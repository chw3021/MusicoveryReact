{"version":3,"file":"static/js/594.8d244336.chunk.js","mappings":"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","sources":["components/playlist/ReadMoreItem.js","components/playlist/ReadMoreList.js","pages/PlaylistPage.js","utils/imageUtils.js","components/common/Button.js"],"sourcesContent":["import React from 'react';\r\nimport Button from \"../common/Button\";\r\nimport \"./ReadMoreItem.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport { getImageUrl } from '../../utils/imageUtils';\r\nimport spotifyImage from '../../assets/spotify.png'; // 이미지 경로를 확인하세요\r\n\r\nconst ReadMoreItem = ({ playlistId, playlistTitle, playlistComment, playlistPhoto, playlistDate, isFriendPlaylist, onPlaylistClick }) => {\r\n    const navigate = useNavigate();\r\n\r\n    const handleClick = () => {\r\n        onPlaylistClick(playlistId);\r\n    };\r\n\r\n    const handleDelete = async (e) => {\r\n        e.stopPropagation(); // 부모 요소의 클릭 이벤트 전파 방지\r\n        const confirmDelete = window.confirm(\"정말로 이 플레이리스트를 삭제하시겠습니까?\");\r\n        if (!confirmDelete) {\r\n            return;\r\n        }\r\n        try {\r\n            const response = await axiosInstance.delete(`/playlist/delete`, {\r\n                params: {\r\n                    playlistId: playlistId,\r\n                },\r\n            });\r\n            console.log(response.data);\r\n            // 삭제 후 플레이리스트 페이지 새로고침\r\n            window.location.reload();\r\n            \r\n            navigate(\"/PlaylistPage\"); // 삭제 후 플레이리스트 페이지로 이동\r\n        } catch (error) {\r\n            console.error(\"플레이리스트 삭제 실패:\", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"ReadMoreItem\" onClick={handleClick}>\r\n            <img src={ getImageUrl(playlistPhoto)} alt=\"Spotify\" className=\"playlistPhoto\" /> {/* 이미지 경로를 사용 */}\r\n            <div className=\"playlistInfo\">\r\n                <div className=\"playlistTitle\">{playlistTitle}</div>\r\n                <div className=\"playlistComment\">{playlistComment}</div>\r\n            </div>\r\n            <div className=\"playlistActions\">\r\n                <div className=\"buttonGroup\">\r\n                    {!isFriendPlaylist && (\r\n                        <Button text=\"삭제\" onClick={(e) => handleDelete(e)} />\r\n                    )}\r\n                </div>\r\n                <div className=\"playlistDate\">{new Date(playlistDate).toLocaleDateString()}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ReadMoreItem;","import { useEffect, useState } from \"react\";\r\nimport Button from \"../common/Button\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ReadMoreItem from \"./ReadMoreItem\";\r\nimport \"./ReadMoreList.css\";\r\n\r\nconst sortOptionList = [\r\n    { value: \"latest\", name: \"최신순\" },\r\n    { value: \"oldest\", name: \"오래된 순\" },\r\n];\r\n\r\nconst ReadMoreList = ({ data, onSelect = () => {}, isFriendPlaylist, onPlaylistClick }) => {\r\n    const [sortType, setSortType] = useState(\"latest\");\r\n    const [sortedData, setSortedData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const compare = (a, b) => {\r\n            const dateA = new Date(a.playlistDate);\r\n            const dateB = new Date(b.playlistDate);\r\n\r\n            if (sortType === \"latest\") {\r\n                return dateB - dateA;\r\n            } else {\r\n                return dateA - dateB;\r\n            }\r\n        };\r\n\r\n        if (Array.isArray(data) && data.every(item => item.playlistDate)) {\r\n            const copyList = [...data];\r\n            copyList.sort(compare);\r\n            setSortedData(copyList);\r\n        } else {\r\n            setSortedData([]);\r\n        }\r\n    }, [data, sortType]);\r\n\r\n    const onChangeSortType = (e) => {\r\n        setSortType(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"ReadMoreList\">\r\n            <div className=\"searchText\">\r\n                <div className=\"form-control\">플레이리스트 리스트</div>\r\n                <select value={sortType} onChange={onChangeSortType}>\r\n                    {sortOptionList.map((it, idx) => (\r\n                        <option key={idx} value={it.value}>\r\n                            {it.name}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n\r\n            <div className=\"list_lower\">\r\n                {sortedData.map((it) => (\r\n                    <div key={it.playlistId} onClick={() => onSelect(it.playlistId)}>\r\n                        <ReadMoreItem \r\n                            playlistId={it.playlistId} \r\n                            playlistTitle={it.playlistTitle}\r\n                            playlistComment={it.playlistComment}\r\n                            playlistPhoto={it.playlistPhoto}\r\n                            playlistDate={it.playlistDate}\r\n                            isFriendPlaylist={isFriendPlaylist}\r\n                            onPlaylistClick={onPlaylistClick}\r\n                        />\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ReadMoreList;","import Header from \"../components/common/Header\";\r\nimport ReadMoreList from \"../components/playlist/ReadMoreList\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport \"../styles/PlaylistPage.css\";\r\nimport Button from \"../components/common/Button\";\r\nimport axiosInstance from '../api/axiosInstance';\r\nimport useUserInfo from \"../hooks/useUserInfo\"; // useUserInfo 임포트\r\n\r\nconst PlaylistPage = () => {\r\n    const [data, setData] = useState([]); // 초기값을 빈 배열로 설정\r\n    const [spotifyAnnounce, setSpotifyAnnounce] = useState(false); // Spotify 연동 필요 여부 상태 추가\r\n    const navigate = useNavigate();\r\n    const userInfo = useUserInfo();\r\n    const location = useLocation();\r\n    const friendInfo = location.state?.friendInfo;\r\n\r\n    const userId = friendInfo ? friendInfo.userId : userInfo?.userId;\r\n    const isFriendPlaylist = !!friendInfo;\r\n\r\n    const getPlaylistsByUserId = async (userId) => {\r\n        try {\r\n            const response = await axiosInstance.get(`/playlist/user/${userId}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Error fetching playlists\", error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            if (userId) {\r\n                try {\r\n                    const playlists = await getPlaylistsByUserId(userId);\r\n                    setSpotifyAnnounce(false); // 성공적으로 데이터를 가져왔으므로 Spotify 연동 필요 없음\r\n                    setData(playlists); // 초기 데이터를 바로 설정\r\n                } catch (error) {\r\n                    //console.error(\"Error fetching playlists\", error);\r\n                    if (error.response && error.response.status === 500) {\r\n                        // Spotify 연동이 필요한 경우\r\n                        setSpotifyAnnounce(true);\r\n                        setData([]); // 플레이리스트 데이터를 비움\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [userId]);\r\n\r\n\r\n    // const onClickCreate = () => {\r\n    //     navigate(\"/createplaylist\");\r\n    // };\r\n\r\n    const handlePlaylistClick = (playlistId) => {\r\n        navigate(`/playlist/${playlistId}`, { state: { friendInfo: friendInfo } });\r\n    };\r\n\r\n    return (\r\n        <div className=\"container1\">\r\n            <Header />\r\n            <div className=\"grayBackground\">\r\n                <div className=\"arraywithButton\">\r\n                    <div className=\"Textplace\">\r\n                        <div id=\"libText\">{isFriendPlaylist ? `${friendInfo.nickname} 님의 플레이리스트` : \"내 라이브러리\"}</div>\r\n                    </div>\r\n                    {(!isFriendPlaylist && !spotifyAnnounce) && (\r\n                        <div className=\"goCreateView\">\r\n                            <Button link={\"/createplaylist\"} text={\"플레이리스트 생성\"} />\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                {spotifyAnnounce ? (\r\n                    <div className=\"spotify-announce\">Spotify 계정 연동이 필요합니다.</div>\r\n                ) : (\r\n                    data.length > 0 ? (\r\n                        <ReadMoreList data={data} isFriendPlaylist={isFriendPlaylist} onPlaylistClick={handlePlaylistClick} />\r\n                    ) : (\r\n                        <p>새 리스트를 생성해주세요</p>\r\n                    )\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlaylistPage;","const defaultImage = `${process.env.REACT_APP_API_URL}/images/default.png`;\r\n\r\nexport const getImageUrl = (playlistPhoto) => {\r\n    if (!playlistPhoto) {\r\n        return defaultImage;\r\n    }\r\n    return playlistPhoto.startsWith(\"/images/\") \r\n        ? `${process.env.REACT_APP_API_URL}${playlistPhoto}` \r\n        : playlistPhoto;\r\n};\r\n\r\nexport const getDefaultImage = () => {\r\n    return defaultImage;\r\n};","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../../styles/Button.css\";\r\n\r\nconst Button = ({ text, link, color, onClick = () => {} }) => {\r\n\r\n    return (\r\n        <Link to={link}  className={`button ${color ? 'custom-color' : ''}`} onClick={onClick}>\r\n            {text}\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default Button;"],"names":["_ref","playlistId","playlistTitle","playlistComment","playlistPhoto","playlistDate","isFriendPlaylist","onPlaylistClick","navigate","useNavigate","_jsxs","className","onClick","handleClick","children","_jsx","src","getImageUrl","alt","Button","text","e","async","stopPropagation","window","confirm","response","axiosInstance","delete","params","console","log","data","location","reload","error","handleDelete","Date","toLocaleDateString","sortOptionList","value","name","onSelect","sortType","setSortType","useState","sortedData","setSortedData","useEffect","compare","a","b","dateA","dateB","Array","isArray","every","item","copyList","sort","onChange","target","map","it","idx","ReadMoreItem","PlaylistPage","_location$state","setData","spotifyAnnounce","setSpotifyAnnounce","userInfo","useUserInfo","friendInfo","useLocation","state","userId","playlists","get","getPlaylistsByUserId","status","fetchData","Header","id","nickname","link","length","ReadMoreList","defaultImage","startsWith","getDefaultImage","color","Link","to"],"sourceRoot":""}