{"version":3,"file":"static/js/510.c60274de.chunk.js","mappings":"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","sources":["components/music/MusicSearch.js","components/music/Music.js","components/social/FriendsList.js","components/common/SidebarLayout.js","components/music/spotifyPlayer.js","hooks/useMusicSearch.js","utils/imageUtils.js","components/common/Nav.js","components/social/Quiz.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../../styles/MusicSearch.css\";\r\nimport Music from \"./Music\";\r\nimport useMusicSearch from \"../../hooks/useMusicSearch\";\r\n\r\nconst MusicSearch = ({ onSelectTrack }) => {\r\n    const {\r\n        keyword,\r\n        setKeyword,\r\n        results,\r\n        handleSearch,\r\n        isPremium,\r\n    } = useMusicSearch();\r\n\r\n    const [hasSearched, setHasSearched] = useState(false); // 검색 실행 여부 상태 추가\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        handleSearch();\r\n        setHasSearched(true); // 검색 실행 후 상태 업데이트\r\n    };\r\n\r\n    return (\r\n        <div className=\"music-search\">\r\n            {isPremium}\r\n            <form onSubmit={handleSubmit}> {/* 폼 제출 핸들러 변경 */}\r\n                <input\r\n                    className=\"music-search-input\"\r\n                    type=\"text\"\r\n                    value={keyword}\r\n                    onChange={(e) => setKeyword(e.target.value)}\r\n                    placeholder=\"음악 검색\"\r\n                />\r\n                <button type=\"submit\">🔎</button>\r\n            </form>\r\n            <div className=\"music-search-results\">\r\n                {!hasSearched && results.length === 0 ? ( // 검색 실행 여부와 결과 유무에 따라 조건부 렌더링\r\n                    <div className=\"music-search-placeholder\">검색어 입력...</div>\r\n                ) : (\r\n                    results.map((track, index) => (\r\n                        <div key={track.id} onClick={() => onSelectTrack(track)}>\r\n                            <Music \r\n                                track={track}\r\n                                isPremium={isPremium} \r\n                            />\r\n                        </div>\r\n                    ))\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MusicSearch;","import React, { useState, useRef, useCallback, useContext } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport \"../../styles/Music.css\";\r\nimport useUserInfo from \"../../hooks/useUserInfo\";\r\nimport { getImageUrl } from \"../../utils/imageUtils\";\r\nimport { TrackContext } from '../../context/TrackContext';\r\n\r\n// PlaylistItem 컴포넌트 분리 및 메모이제이션\r\nconst PlaylistItem = React.memo(({ playlist, isChecked, onCheck }) => (\r\n    <div className=\"playlist-modal-item\">\r\n        <input\r\n            type=\"checkbox\"\r\n            id={`playlist-${playlist.playlistId}`}\r\n            checked={isChecked}\r\n            onChange={() => onCheck(playlist.playlistId)}\r\n        />\r\n        <label htmlFor={`playlist-${playlist.playlistId}`} className=\"playlist-modal-label\">\r\n            <div className=\"playlist-modal-image-container\">\r\n                <img \r\n                    src={getImageUrl(playlist.playlistPhoto)} \r\n                    alt={playlist.playlistTitle} \r\n                    className=\"playlist-modal-image\" \r\n                />\r\n            </div>\r\n            <span className=\"playlist-modal-name\">{playlist.playlistTitle}</span>\r\n        </label>\r\n    </div>\r\n));\r\n\r\n// PlaylistModal 컴포넌트 분리 및 메모이제이션\r\nconst PlaylistModal = React.memo(({ playlists, selectedPlaylists, loading, onCheck, onClose, onAdd }) => (\r\n    <div className=\"playlist-modal-overlay\" onClick={onClose}>\r\n        <div className=\"playlist-modal\" onClick={(e) => e.stopPropagation()}>\r\n            <div className=\"playlist-modal-header\">\r\n                <h3>플레이리스트에 추가</h3>\r\n                <button className=\"playlist-modal-close\" onClick={onClose}>&times;</button>\r\n            </div>\r\n            <div className=\"playlist-modal-body\">\r\n                {loading ? (\r\n                    <p>플레이리스트를 불러오는 중...</p>\r\n                ) : playlists.length === 0 ? (\r\n                    <p>사용 가능한 플레이리스트가 없습니다.</p>\r\n                ) : (\r\n                    <div className=\"playlist-modal-list\">\r\n                        {playlists.map(playlist => (\r\n                            <PlaylistItem\r\n                                key={playlist.playlistId}\r\n                                playlist={playlist}\r\n                                isChecked={selectedPlaylists.includes(playlist.playlistId)}\r\n                                onCheck={onCheck}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <div className=\"playlist-modal-footer\">\r\n                <button \r\n                    className=\"add-to-playlist-button\" \r\n                    onClick={onAdd}\r\n                    disabled={selectedPlaylists.length === 0 || loading}\r\n                >\r\n                    플레이리스트에 추가\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n));\r\n\r\nconst Music = ({ track, isPremium }) => {\r\n    const [tooltipStyle, setTooltipStyle] = useState({});\r\n    const [showPlaylistModal, setShowPlaylistModal] = useState(false);\r\n    const [playlists, setPlaylists] = useState([]);\r\n    const [selectedPlaylists, setSelectedPlaylists] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const { addTrackToList, setIsPlaying, deviceReady } = useContext(TrackContext);\r\n    \r\n    const playlistsLoadedRef = useRef(false);\r\n    const userInfo = useUserInfo();\r\n    \r\n    const handleMouseEnter = (e) => {\r\n        const rect = e.currentTarget.getBoundingClientRect();\r\n        setTooltipStyle({\r\n            top: `${rect.top - 10}px`,\r\n            left: `${rect.left + rect.width / 2}px`,\r\n        });\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setTooltipStyle({});\r\n    };\r\n\r\n    const fetchPlaylists = async (userId) => {\r\n        if (!userId || playlistsLoadedRef.current) return;\r\n        \r\n        setLoading(true);\r\n        try {\r\n            const response = await axiosInstance.get(`/playlist/user/${userId}`);\r\n            setPlaylists(response.data || []);\r\n            playlistsLoadedRef.current = true;\r\n        } catch (error) {\r\n            console.error(\"플레이리스트를 불러오는 데 실패했습니다:\", error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleAddToPlaylist = () => {\r\n        setShowPlaylistModal(true);\r\n        if (userInfo && !playlistsLoadedRef.current) {\r\n            fetchPlaylists(userInfo.userId);\r\n        }\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setShowPlaylistModal(false);\r\n        setSelectedPlaylists([]);\r\n    };\r\n\r\n    const handlePlaylistCheck = useCallback((playlistId) => {\r\n        setSelectedPlaylists(prevSelected => {\r\n            if (prevSelected.includes(playlistId)) {\r\n                return prevSelected.filter(id => id !== playlistId);\r\n            } else {\r\n                return [...prevSelected, playlistId];\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const handleAddTracksToPlaylists = async () => {\r\n        if (selectedPlaylists.length === 0) {\r\n            alert(\"플레이리스트를 선택해주세요.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const promises = selectedPlaylists.map(playlistId => \r\n                axiosInstance.post(`/api/spotify/playlist/${playlistId}/track`, null, {\r\n                    params: { trackId: track.id }\r\n                })\r\n            );\r\n            \r\n            await Promise.all(promises);\r\n            alert(\"선택한 플레이리스트에 트랙이 추가되었습니다.\");\r\n            handleCloseModal();\r\n        } catch (error) {\r\n            console.error(\"플레이리스트에 트랙 추가 실패:\", error);\r\n            alert(\"플레이리스트에 트랙 추가 중 오류가 발생했습니다.\");\r\n        }\r\n    };\r\n\r\n    const handlePlayClick = async (track) => {\r\n        if (isPremium) {\r\n            try {\r\n                addTrackToList(track); // 트랙을 리스트에 추가\r\n                if (deviceReady) {\r\n                    setIsPlaying(true);\r\n                } else {\r\n                    if(!deviceReady){\r\n                        setTimeout(() => {\r\n                            setIsPlaying(true);\r\n                        }, 1000);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error(\"트랙 재생 중 오류:\", error);\r\n                if (error.response?.status === 403) {\r\n                    // 403 오류 발생 시 링크로 이동\r\n                    window.open(track.external_urls.spotify, '_blank');\r\n                    return;\r\n                } else if (error.response?.status === 404) {\r\n                    alert('Spotify 플레이어를 초기화 중입니다. 잠시 후에 다시 시도해주세요.');\r\n                } else {\r\n                    alert('트랙을 재생할 수 없습니다. 다시 시도해주세요.');\r\n                }\r\n            }\r\n        } else {\r\n            window.open(track.external_urls.spotify, '_blank');\r\n        }\r\n    };\r\n\r\n    return (\r\n        // 렌더링 부분은 동일하게 유지\r\n        track && track.album && track.album.images && track.album.images[0] ? (\r\n            <div key={track.id} className=\"track-item\" onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\r\n                <img className=\"track-album-image-music\" src={track.album.images[0].url} alt={track.name} />\r\n                <div className=\"track-info\">\r\n                    <h4>{track.name}</h4>\r\n                    <p>{track.artists.map((artist) => artist.name).join(\", \")}</p>\r\n                    <div className=\"tooltip\" style={tooltipStyle}>\r\n                        <h4>{track.name}</h4>\r\n                        <p>{track.artists.map((artist) => artist.name).join(\", \")}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"track-play-button-container\">\r\n                    <button\r\n                        onClick={() => handlePlayClick(track)}\r\n                        className={isPremium ? \"premium-play\" : \"spotify-link\"}\r\n                    >\r\n                        {isPremium ? \"▶\" : \"LINK\"}\r\n                    </button>\r\n                    <button className=\"add-track-to-playlist-button\" onClick={handleAddToPlaylist}>\r\n                        ➕\r\n                    </button>\r\n                </div>\r\n\r\n                {showPlaylistModal && ReactDOM.createPortal(\r\n                    <PlaylistModal \r\n                        playlists={playlists}\r\n                        selectedPlaylists={selectedPlaylists}\r\n                        loading={loading}\r\n                        onCheck={handlePlaylistCheck}\r\n                        onClose={handleCloseModal}\r\n                        onAdd={handleAddTracksToPlaylists}\r\n                    />,\r\n                    document.body\r\n                )}\r\n            </div>\r\n        ) : null\r\n    );\r\n};\r\n\r\nexport default Music;","import React, { useState, useEffect } from \"react\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport useUserInfo from \"../../hooks/useUserInfo\";\r\nimport \"../../styles/FriendsList.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst FriendsList = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const [friends, setFriends] = useState([]);\r\n    const [friendRequests, setFriendRequests] = useState([]);\r\n    const [pendingRequests, setPendingRequests] = useState([]);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [searchKeyword, setSearchKeyword] = useState(\"\");\r\n    const [searchResults, setSearchResults] = useState([]);\r\n    const [activeTab, setActiveTab] = useState(\"search\"); // 'search', 'pending', 'requests'\r\n    const userInfo = useUserInfo();\r\n\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n            fetchFriends();\r\n            fetchFriendRequests();\r\n            fetchPendingRequests();\r\n        }\r\n    }, [userInfo]);\r\n\r\n    const fetchFriends = async () => {\r\n        try {\r\n            const response = await axiosInstance.get(`/friends/list?userId=${userInfo.id}`);\r\n            setFriends(response.data);\r\n        } catch (error) {\r\n            console.error(\"친구 목록을 가져오는 데 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const fetchFriendRequests = async () => {\r\n        try {\r\n            const response = await axiosInstance.get(`/friends/friendRequests?friendId=${userInfo.id}`);\r\n            setFriendRequests(response.data);\r\n        } catch (error) {\r\n            console.error(\"친구 요청 목록을 가져오는 데 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const fetchPendingRequests = async () => {\r\n        try {\r\n            const response = await axiosInstance.get(`/friends/pendingRequests?userId=${userInfo.id}`);\r\n            setPendingRequests(response.data);\r\n        } catch (error) {\r\n            console.error(\"내가 요청한 친구 목록을 가져오는 데 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const handleSearch = async () => {\r\n        try {\r\n            const response = await axiosInstance.get(`/friends/search?keyword=${searchKeyword}`);\r\n            setSearchResults(response.data);\r\n        } catch (error) {\r\n            console.error(\"사용자 검색에 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const handleAddFriend = async (friendId) => {\r\n        try {\r\n            await axiosInstance.post(\"/friends/add\", { userId: userInfo.id, friendId });\r\n            fetchFriends();\r\n            fetchPendingRequests();\r\n        } catch (error) {\r\n            console.error(\"친구 추가에 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const handleAcceptFriendRequest = async (friendRequestId) => {\r\n        try {\r\n            await axiosInstance.post(\"/friends/accept\", null, { params: { friendRequestId } });\r\n            fetchFriends();\r\n            fetchFriendRequests();\r\n        } catch (error) {\r\n            console.error(\"친구 요청 수락에 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const handleDeleteFriend = async (friendId, event) => {\r\n        event.stopPropagation(); // 이벤트 버블링 막기\r\n        try {\r\n            await axiosInstance.delete(\"/friends/delete\", { params: { userId: userInfo.id, friendId } });\r\n            fetchFriends();\r\n        } catch (error) {\r\n            console.error(\"친구 삭제에 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const isFriendOrRequested = (userId) => {\r\n        return friends.some(friend => friend.friend.id === userId) || \r\n               friendRequests.some(request => request.user.id === userId) ||\r\n               pendingRequests.some(request => request.friend.id === userId);\r\n    };\r\n\r\n    const handleFriendClick = (friend) => {\r\n        navigate(\"/playlistPage\", { state: { friendInfo: friend } });\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"friends-list-container\">\r\n                <h2>친구 목록</h2>\r\n                <button onClick={() => setShowModal(true)} className=\"add-friend-button\">친구 추가</button>\r\n                <div className=\"friends-list\">\r\n                    {friends.map((friend) => (\r\n                        <div key={friend.id} className=\"friend-item\" onClick={() => handleFriendClick(friend.friend.id === userInfo.id ? friend.user : friend.friend)}>\r\n                            <p>\r\n                                <strong>친구 별명 :</strong> {friend.friend.id === userInfo.id ? friend.user.nickname : friend.friend.nickname}\r\n                            </p>\r\n                            <button className=\"friend-delete-button\" onClick={(event) => handleDeleteFriend(friend.friend.id, event)}>❌</button>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {showModal && (\r\n                <div className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        <span className=\"close\" onClick={() => setShowModal(false)}>&times;</span>\r\n                        <div className=\"modal-tabs\">\r\n                            <button \r\n                                className={`modal-tab-button ${activeTab === \"search\" ? \"active\" : \"\"}`}\r\n                                onClick={() => setActiveTab(\"search\")}\r\n                            >\r\n                                친구 검색\r\n                            </button>\r\n                            <button \r\n                                className={`modal-tab-button ${activeTab === \"pending\" ? \"active\" : \"\"}`}\r\n                                onClick={() => setActiveTab(\"pending\")}\r\n                            >\r\n                                요청한 목록\r\n                            </button>\r\n                            <button \r\n                                className={`modal-tab-button ${activeTab === \"requests\" ? \"active\" : \"\"}`}\r\n                                onClick={() => setActiveTab(\"requests\")}\r\n                            >\r\n                                받은 친구 요청\r\n                            </button>\r\n                        </div>\r\n\r\n                        {activeTab === \"search\" && (\r\n                            <div className=\"friendlist-search-tab\">\r\n                                <h2>친구 추가</h2>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"검색 (ID, 이메일, 닉네임)\"\r\n                                    value={searchKeyword}\r\n                                    onChange={(e) => setSearchKeyword(e.target.value)}\r\n                                />\r\n                                <button onClick={handleSearch}>검색</button>\r\n                                <div className=\"search-results\">\r\n                                    {searchResults.map((user) => (\r\n                                        <div key={user.id} className=\"search-result-item\">\r\n                                            <p>\r\n                                                <strong>ID:</strong> {user.id}\r\n                                            </p>\r\n                                            <p>\r\n                                                <strong>이메일:</strong> {user.email}\r\n                                            </p>\r\n                                            <p>\r\n                                                <strong>닉네임:</strong> {user.nickname}\r\n                                            </p>\r\n                                            <button \r\n                                                onClick={() => handleAddFriend(user.id)} \r\n                                                disabled={isFriendOrRequested(user.id)}\r\n                                            >\r\n                                                {isFriendOrRequested(user.id) ? \"요청됨\" : \"친구 추가\"}\r\n                                            </button>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {activeTab === \"pending\" && (\r\n                            <div className=\"friendlist-pending-tab\">\r\n                                <h2>요청한 목록</h2>\r\n                                <div className=\"pending-requests-list\">\r\n                                    {pendingRequests.length === 0 ? (\r\n                                        <p>요청한 목록이 없습니다.</p>\r\n                                    ) : (\r\n                                        pendingRequests.map((request) => (\r\n                                            console.log(request),\r\n                                            <div key={request.id} className=\"pending-request-item\">\r\n                                                <p>\r\n                                                    <strong>요청한 사용자 ID:</strong> {request.friend.nickname}\r\n                                                </p>\r\n                                            </div>\r\n                                        ))\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {activeTab === \"requests\" && (\r\n                            <div className=\"friendlist-requests-tab\">\r\n                                <h2>받은 친구 요청</h2>\r\n                                <div className=\"friend-requests-list\">\r\n                                    {friendRequests.length === 0 ? (\r\n                                        <p>받은 요청이 없습니다.</p>\r\n                                    ) : (\r\n                                        \r\n                                        friendRequests.map((request) => (\r\n                                            console.log(request),\r\n                                            <div key={request.id} className=\"friend-request-item\">\r\n                                                \r\n                                                <p>\r\n                                                    <strong>요청한 사용자:</strong> {request.user.nickname}\r\n                                                    <button className=\"accept-button\" onClick={() => handleAcceptFriendRequest(request.id)}>✅</button>\r\n                                                </p>\r\n                                            </div>\r\n                                        ))\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FriendsList;","import React from \"react\";\r\nimport MusicSearch from \"../music/MusicSearch\";\r\nimport \"../../styles/SidebarLayout.css\";\r\nimport FriendsList from \"../social/FriendsList\";\r\n\r\nconst SidebarLayout = ({ children }) => {\r\n    return (\r\n        <div className=\"sidebar-layout-layout\">\r\n            <div className=\"sidebar-layout-sidebar\">\r\n                <MusicSearch onSelectTrack={()=>{}}/>\r\n                <FriendsList />\r\n            </div>\r\n            <div className=\"sidebar-layout-main-content\">\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SidebarLayout;","import axios from 'axios';\r\n\r\nexport const transferPlayback = async (deviceId) => {\r\n    try {\r\n        const url = 'https://api.spotify.com/v1/me/player';\r\n        await axios.put(\r\n            url,\r\n            {\r\n                device_ids: [deviceId],\r\n                play: true\r\n            },\r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n                }\r\n            }\r\n        );\r\n    } catch (error) {\r\n        console.error('Failed to transfer playback:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const play = async ({ spotify_uri, deviceId, position = 0 }) => {\r\n    try {\r\n        const url = `https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`;\r\n        \r\n        await axios.put(\r\n            url,\r\n            {\r\n                uris: [spotify_uri],\r\n                position_ms: position\r\n            },\r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n                }\r\n            }\r\n        );\r\n    } catch (error) {\r\n        console.error('Failed to play track:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const pause = async () => {\r\n    try {\r\n        await axios.put('https://api.spotify.com/v1/me/player/pause', null, {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error('Failed to pause track:', error);\r\n        throw error;\r\n    }\r\n};","import { useState, useEffect } from \"react\";\r\nimport axiosInstance from \"../api/axiosInstance\";\r\nimport { transferPlayback } from \"../components/music/spotifyPlayer\";\r\n\r\nconst useMusicSearch = () => {\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [results, setResults] = useState([]);\r\n    const [audioPlayer, setAudioPlayer] = useState(new Audio());\r\n    const [isPremium, setIsPremium] = useState(false);\r\n    const [deviceId, setDeviceId] = useState(null);\r\n\r\n    // Premium 상태 확인\r\n    useEffect(() => {\r\n        const checkPremiumStatus = async () => {\r\n            try {\r\n                const response = await axiosInstance.get('/api/spotify/userInfo');\r\n                setIsPremium(response.data.product === 'premium');\r\n            } catch (error) {\r\n                //console.error(\"Failed to check premium status\", error);\r\n            }\r\n        };\r\n        checkPremiumStatus();\r\n    }, []);\r\n\r\n    // 디바이스 ID 설정\r\n    useEffect(() => {\r\n        const fetchDeviceId = async () => {\r\n            try {\r\n                const response = await axiosInstance.get('/music/devices', {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n                    }\r\n                });\r\n                const devices = response.data.devices;\r\n                if (devices.length > 0) {\r\n                    setDeviceId(devices[0].id);\r\n                    // 브라우저를 활성 디바이스로 설정\r\n                    await transferPlayback(devices[0].id);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch devices\", error);\r\n            }\r\n        };\r\n        fetchDeviceId();\r\n    }, []);\r\n\r\n    const handleSearch = async (e) => {\r\n        try {\r\n            const response = await axiosInstance.get(`/api/spotify/search?keyword=${keyword}&type=track`);\r\n            const filteredResults = response.data.tracks.items.filter(\r\n                (track) => track.is_playable\r\n            );\r\n            setResults(filteredResults);\r\n        } catch (error) {\r\n            console.error(\"Failed to search music\", error);\r\n            setResults([]);\r\n        }\r\n    };\r\n\r\n    return {\r\n        keyword,\r\n        setKeyword,\r\n        results,\r\n        handleSearch,\r\n        isPremium,\r\n        deviceId,\r\n    };\r\n};\r\n\r\nexport default useMusicSearch;","const defaultImage = `${process.env.REACT_APP_API_URL}/images/default.png`;\r\n\r\nexport const getImageUrl = (playlistPhoto) => {\r\n    if (!playlistPhoto) {\r\n        return defaultImage;\r\n    }\r\n    return playlistPhoto.startsWith(\"/images/\") \r\n        ? `${process.env.REACT_APP_API_URL}${playlistPhoto}` \r\n        : playlistPhoto;\r\n};\r\n\r\nexport const getDefaultImage = () => {\r\n    return defaultImage;\r\n};","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../../styles/Nav.css\";\r\n\r\nconst Nav = () => {\r\n    return (\r\n            <aside className=\"social-sidebar\">\r\n                <nav className=\"nav-menu\">\r\n                    <ul>\r\n                        <li><Link to=\"/quiz\">AI가사 퀴즈</Link></li>\r\n                        <li><Link to=\"/songquiz\">노래퀴즈</Link></li>\r\n                        <li><Link to=\"/streaming\">스트리밍</Link></li>\r\n                    </ul>\r\n                </nav>\r\n            </aside>\r\n\r\n    );\r\n};\r\n\r\nexport default Nav;\r\n","import { useState, useEffect } from \"react\";\r\nimport Header from \"../common/Header\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport Nav from \"../common/Nav\";\r\nimport SidebarLayout from \"../common/SidebarLayout\";\r\nimport \"../../styles/Quiz.css\";\r\n\r\nconst Quiz = () => {\r\n    const [artist, setArtist] = useState(\"\");\r\n    const [songs, setSongs] = useState([]);\r\n    const [matchedSongs, setMatchedSongs] = useState([]); // 맞춘 노래 목록\r\n    const [lyrics, setLyrics] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [currentTitle, setCurrentTitle] = useState(\"\");\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [synth, setSynth] = useState(null);\r\n    const [isSpeaking, setIsSpeaking] = useState(false);\r\n    const [showFetchLyricsButton, setShowFetchLyricsButton] = useState(false);\r\n    const [rankings, setRankings] = useState([]);\r\n    const [startTime, setStartTime] = useState(null);\r\n    const [user, setUser] = useState(null);\r\n\r\n\r\n    // 유저 정보 가져오기\r\n    useEffect(() => {\r\n        const fetchUser = async () => {\r\n            // localStorage에서 user 정보 가져오기 (있으면 API 호출 안함)\r\n            const cachedUser = localStorage.getItem(\"user\");\r\n            if (cachedUser) {\r\n                setUser(JSON.parse(cachedUser));\r\n                return;\r\n            }\r\n    \r\n            try {\r\n                const response = await axiosInstance.get(\"/api/spotify/userInfo\");\r\n                setUser(response.data);\r\n                \r\n                // localStorage에 저장 (다음 요청 최소화)\r\n                localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n            } catch (error) {\r\n                console.error(\"유저 정보를 가져오는 데 실패:\", error);\r\n            }\r\n        };\r\n    \r\n        fetchUser();\r\n    }, []);\r\n\r\n    const handleFetchSongs = async (event) => {\r\n        event.preventDefault();\r\n        if (!artist.trim()) {\r\n            console.error(\"가수명을 입력하세요.\");\r\n            return;\r\n        }\r\n    \r\n        setLoading(true);\r\n        try {\r\n            const response = await axiosInstance.get(`/api/quizlist`, { params: { artist } });\r\n            if (response.data.length === 0) {\r\n                console.error(\"노래 목록이 없습니다.\");\r\n                return;\r\n            }\r\n    \r\n            // 제목을 정제하여 저장\r\n            const cleanedSongs = response.data.map(song => ({\r\n                ...song,\r\n                title: song.title\r\n                    .split(/[([{['\"]/)[0] // 여러 구분자로 나누기\r\n                    .replace(/[\\(\\)\\[\\]{}'\"]/g, '') // 괄호와 따옴표 제거\r\n                    .trim()\r\n            }));\r\n    \r\n            const shuffledSongs = cleanedSongs.sort(() => 0.5 - Math.random());\r\n            const selectedSongs = shuffledSongs.slice(0, 10);\r\n            setSongs(selectedSongs);\r\n            console.log(\"노래 목록:\", selectedSongs);\r\n            setShowFetchLyricsButton(true);\r\n        } catch (error) {\r\n            console.error(\"노래 목록을 가져오는 중 오류 발생:\", error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n    // 랭킹 저장 함수 추가\r\n    const saveRanking = async (timeTaken) => {\r\n        try {\r\n            const songInfo = `${artist} - ${currentTitle}`; // \"아티스트 - 노래 제목\" 형식으로 변환\r\n\r\n            const response = await axiosInstance.post('/api/ranking', {\r\n                username: user?.display_name, // Spotify에서 가져온 사용자 이름\r\n                songTitle: songInfo, // 노래 정보\r\n                timeTaken: timeTaken // 정답까지 걸린 시간 (밀리초 단위)\r\n            });  // 백엔드에 랭킹 저장 요청\r\n    \r\n            console.log(\"랭킹 저장 완료:\", response.data);\r\n    \r\n            // 🎯 랭킹 목록 다시 불러오기\r\n            fetchRankings();\r\n        } catch (error) {\r\n            console.error(\"랭킹 저장 중 오류 발생:\", error);\r\n        }\r\n    };\r\n\r\n    const handleSubmitGuess = async (event) => {\r\n        event.preventDefault();\r\n        const normalizedInput = userInput.trim().toLowerCase();\r\n        const normalizedTitle = currentTitle.toLowerCase();\r\n    \r\n        try {\r\n            console.log(`/api/sometitle 요청: title=${currentTitle}`);\r\n            const response = await axiosInstance.get('/api/sometitle', {\r\n                params: { title: currentTitle }\r\n            });\r\n            console.log(`/api/sometitle 응답:`, response.data);\r\n    \r\n            const alternativeTitles = response.data || [];\r\n            const normalizedAlternatives = alternativeTitles.map(title => title.trim().toLowerCase());\r\n    \r\n            if (normalizedInput === normalizedTitle || normalizedAlternatives.includes(normalizedInput)) {\r\n                alert(\"정답입니다! 같은 아티스트의 다른 곡을 맞춰보세요.\");\r\n    \r\n                if (synth) {\r\n                    synth.cancel();\r\n                    setIsSpeaking(false);\r\n                }\r\n                setUserInput(\"\");\r\n    \r\n                // 맞춘 노래를 matchedSongs에 추가\r\n                setMatchedSongs(prev => [...prev, currentTitle]);\r\n    \r\n                // 🕒 정답까지 걸린 시간 계산 (밀리초 단위)\r\n                const timeTaken = startTime ? Date.now() - startTime : 0;\r\n    \r\n                // 🎯 랭킹 저장 API 호출\r\n                saveRanking(timeTaken);\r\n    \r\n                fetchLyrics();\r\n    \r\n                // 음성 재조정 (속도, 피치, 볼륨)\r\n                if (synth) {\r\n                    const utterance = new SpeechSynthesisUtterance(\"정답입니다! 다른 곡을 맞춰보세요!\");\r\n                    utterance.lang = \"ko-KR\";\r\n                    utterance.rate = Math.random() * (5 - 2) + 2;  // 음성의 속도 2 ~ 5 사이의 랜덤 값\r\n                    utterance.pitch = Math.random() * (2 - 0.1) + 0.1;  // 음성의 피치 0.1 ~ 2 사이의 랜덤 값\r\n                    utterance.volume = 1.0;  // 볼륨 설정\r\n    \r\n                    synth.speak(utterance);\r\n                }\r\n            } else {\r\n                alert(\"틀렸습니다. 다시 시도해 보세요.\");\r\n                setUserInput(\"\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"대체 제목을 가져오는 중 오류 발생:\", error);\r\n            alert(\"오류가 발생했습니다. 다시 시도해 주세요.\");\r\n        }\r\n    };\r\n\r\n    const fetchLyrics = async () => {\r\n        if (songs.length === 0) {\r\n            console.error(\"노래 목록이 없습니다.\");\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        try {\r\n            // 맞춘 노래를 제외한 나머지 노래 중에서 랜덤 선택\r\n            const remainingSongs = songs.filter(song => !matchedSongs.includes(song.title));\r\n            if (remainingSongs.length === 0) {\r\n                console.log(\"모든 노래를 맞추셨습니다!\");\r\n                return;\r\n            }\r\n            const randomSong = remainingSongs[Math.floor(Math.random() * remainingSongs.length)];\r\n            const encodedArtist = encodeURIComponent(randomSong.artist);\r\n            const encodedTitle = encodeURIComponent(randomSong.title);\r\n\r\n            const response = await axiosInstance.get(`/api/lyrics`, {\r\n                params: { artist: encodedArtist, title: encodedTitle }\r\n            });\r\n\r\n            setLyrics(response.data.lyrics);\r\n            setCurrentTitle(randomSong.title);\r\n            speakLyrics(response.data.lyrics);\r\n\r\n            console.log(\"제목:\", randomSong.title);\r\n        } catch (error) {\r\n            if (error.response && error.response.status === 429) {\r\n                console.error(\"요청 제한 초과. 잠시 후 다시 시도해주세요.\");\r\n                alert(\"서버에 과도한 요청을 보내고 있습니다. 잠시 후 다시 시도해주세요.\");\r\n                setTimeout(fetchLyrics, 5000);\r\n            } else {\r\n                console.error(\"가사를 불러오는 중 오류 발생:\", error);\r\n            }\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const speakLyrics = (lyricsText) => {\r\n        if (!lyricsText) {\r\n            console.error(\"읽을 가사가 없습니다.\");\r\n            return;\r\n        }\r\n\r\n        const speechSynth = window.speechSynthesis;\r\n        const utterance = new SpeechSynthesisUtterance(lyricsText);\r\n\r\n        utterance.lang = \"ko-KR\";\r\n        utterance.rate = Math.random() * (5 - 2) + 2;  // 음성의 속도 2 ~ 5 사이의 랜덤 값\r\n        utterance.pitch = Math.random() * (2 - 0.1) + 0.1;  // 음성의 피치 0.1 ~ 2 사이의 랜덤 값\r\n        utterance.volume = 1.0;\r\n\r\n        setSynth(speechSynth);\r\n        setIsSpeaking(true);\r\n        speechSynth.speak(utterance);\r\n\r\n        utterance.onstart = () => {\r\n            setIsSpeaking(true);\r\n            setStartTime(Date.now());  // 🕒 시작 시간 기록\r\n        };\r\n\r\n        utterance.onend = () => {\r\n            setIsSpeaking(false);\r\n        };\r\n        //synth.speak(utterance);\r\n    };\r\n\r\n    const handleStopSpeaking = () => {\r\n        if (synth) {\r\n            synth.cancel();\r\n            setIsSpeaking(false);\r\n        }\r\n    };\r\n\r\n    const handleKeyPress = (event) => {\r\n        if (event.key === 'Enter') {\r\n            if (event.target.name === 'artist') {\r\n                handleFetchSongs(event);\r\n            } else if (event.target.name === 'userInput') {\r\n                handleSubmitGuess(event);\r\n            }\r\n        }\r\n    };\r\n\r\n    const fetchRankings = async () => {\r\n        try {\r\n            const response = await axiosInstance.get(\"/api/ranking/top5\"); // 백엔드에서 랭킹 데이터 가져오기\r\n            setRankings(response.data);\r\n        } catch (error) {\r\n            console.error(\"랭킹 데이터를 불러오는 중 오류 발생:\", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchRankings();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"quiz-container\">\r\n            <Header />\r\n            <SidebarLayout>\r\n            <div className=\"quiz-social-layout\">\r\n                <div className=\"content-wrapper\">\r\n                    <div className=\"quiz-content\">\r\n                        <h2 className=\"quiz-title\">🎵 AI 가사 맞히기 퀴즈</h2>\r\n                    <div className=\"oneLineView\">\r\n                        <div className=\"search-box\">\r\n                            <div className=\"search-label-box\">\r\n                                <input \r\n                                    type=\"text\" \r\n                                    className=\"search-input\"\r\n                                    placeholder=\"가수명을 입력하세요\" \r\n                                    value={artist} \r\n                                    onChange={(e) => setArtist(e.target.value)}\r\n                                    onKeyPress={handleKeyPress}\r\n                                    name=\"artist\"\r\n                                />\r\n                                <button className=\"quiz-button2\" onClick={handleFetchSongs}>🔍찾기</button>\r\n                            </div>\r\n                            <div className=\"quiz-button-box\">\r\n                                        \r\n                                {showFetchLyricsButton && (\r\n                                    <button className=\"quiz-button\" onClick={fetchLyrics} disabled={loading || isSpeaking}>\r\n                                        {loading ? \"가져오는 중...\" : \"🎵 AI 음성 재생\"}\r\n                                    </button>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        {/* 🔥 랭킹 추가된 부분 */}\r\n                        <div className=\"rankingPart\">\r\n                            <h3>🏆 랭킹</h3>\r\n                            <ul className=\"ranking-list\">\r\n                                {rankings.length > 0 ? (\r\n                                    rankings.map((rank, index) => (\r\n                                        <li key={rank.id} className=\"ranking-item\">\r\n                                            <span>{index + 1}위:</span>\r\n                                            <div className=\"rank-userinfo-item-text\">{rank.username} ({rank.songTitle})</div>\r\n                                            <span>{rank.timeTaken / 1000}초</span>\r\n                                        </li>\r\n                                    ))\r\n                                ) : (\r\n                                    <li>랭킹 데이터가 없습니다.</li>\r\n                                )}\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                       \r\n                    \r\n                    <div className=\"stopBtnplace\">\r\n                        {isSpeaking && (\r\n                            <button className=\"quiz-button\" onClick={handleStopSpeaking}>\r\n                                음성 멈추기\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                        {currentTitle && (\r\n                            <div className=\"guess-box\">\r\n                                <input \r\n                                    type=\"text\"\r\n                                    className=\"guess-input\"\r\n                                    placeholder=\"노래 제목을 맞혀보세요\"\r\n                                    value={userInput}\r\n                                    onChange={(e) => setUserInput(e.target.value)}\r\n                                    onKeyPress={handleKeyPress}\r\n                                    name=\"userInput\"\r\n                                />\r\n                                <button className=\"quiz-button2\" type=\"submit\" onClick={handleSubmitGuess}>확인</button>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <Nav />\r\n            </div>\r\n            </SidebarLayout>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Quiz;\r\n"],"names":["_ref","onSelectTrack","keyword","setKeyword","results","handleSearch","isPremium","useMusicSearch","hasSearched","setHasSearched","useState","_jsxs","className","children","onSubmit","e","preventDefault","_jsx","type","value","onChange","target","placeholder","length","map","track","index","onClick","Music","id","PlaylistItem","React","playlist","isChecked","onCheck","playlistId","checked","htmlFor","src","getImageUrl","playlistPhoto","alt","playlistTitle","PlaylistModal","_ref2","playlists","selectedPlaylists","loading","onClose","onAdd","stopPropagation","includes","disabled","_ref3","tooltipStyle","setTooltipStyle","showPlaylistModal","setShowPlaylistModal","setPlaylists","setSelectedPlaylists","setLoading","addTrackToList","setIsPlaying","deviceReady","useContext","TrackContext","playlistsLoadedRef","useRef","userInfo","useUserInfo","handleCloseModal","handlePlaylistCheck","useCallback","prevSelected","filter","album","images","onMouseEnter","rect","currentTarget","getBoundingClientRect","top","left","width","onMouseLeave","handleMouseLeave","url","name","artists","artist","join","style","async","setTimeout","error","_error$response","_error$response2","console","response","status","window","open","external_urls","spotify","alert","handlePlayClick","handleAddToPlaylist","current","userId","axiosInstance","get","data","fetchPlaylists","ReactDOM","promises","post","params","trackId","Promise","all","document","body","FriendsList","navigate","useNavigate","friends","setFriends","friendRequests","setFriendRequests","pendingRequests","setPendingRequests","showModal","setShowModal","searchKeyword","setSearchKeyword","searchResults","setSearchResults","activeTab","setActiveTab","useEffect","fetchFriends","fetchFriendRequests","fetchPendingRequests","isFriendOrRequested","some","friend","request","user","state","friendInfo","handleFriendClick","nickname","event","friendId","delete","handleDeleteFriend","email","handleAddFriend","log","friendRequestId","handleAcceptFriendRequest","MusicSearch","setResults","audioPlayer","setAudioPlayer","Audio","setIsPremium","deviceId","setDeviceId","product","checkPremiumStatus","devices","headers","localStorage","getItem","axios","put","device_ids","play","transferPlayback","fetchDeviceId","filteredResults","tracks","items","is_playable","defaultImage","startsWith","getDefaultImage","Nav","Link","to","Quiz","setArtist","songs","setSongs","matchedSongs","setMatchedSongs","lyrics","setLyrics","currentTitle","setCurrentTitle","userInput","setUserInput","synth","setSynth","isSpeaking","setIsSpeaking","showFetchLyricsButton","setShowFetchLyricsButton","rankings","setRankings","startTime","setStartTime","setUser","cachedUser","JSON","parse","setItem","stringify","fetchUser","handleFetchSongs","trim","cleanedSongs","song","title","split","replace","selectedSongs","sort","Math","random","slice","handleSubmitGuess","normalizedInput","toLowerCase","normalizedTitle","normalizedAlternatives","cancel","prev","songInfo","username","display_name","songTitle","timeTaken","fetchRankings","saveRanking","Date","now","fetchLyrics","utterance","SpeechSynthesisUtterance","lang","rate","pitch","volume","speak","remainingSongs","randomSong","floor","encodedArtist","encodeURIComponent","encodedTitle","speakLyrics","lyricsText","speechSynth","speechSynthesis","onstart","onend","handleKeyPress","key","Header","SidebarLayout","onKeyPress","rank","handleStopSpeaking"],"sourceRoot":""}