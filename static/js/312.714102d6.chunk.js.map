{"version":3,"file":"static/js/312.714102d6.chunk.js","mappings":"kLAKA,MAgDA,EAhDoBA,IAAwB,IAAvB,cAAEC,GAAeD,EAClC,MAAM,QACFE,EAAO,WACPC,EAAU,QACVC,EAAO,aACPC,EAAY,UACZC,IACAC,EAAAA,EAAAA,MAEGC,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,GAQ/C,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,CACxBP,GACDK,EAAAA,EAAAA,MAAA,QAAMG,SATQC,IAClBA,EAAEC,iBACFX,IACAI,GAAe,EAAK,EAMaI,SAAA,CAAC,KAC1BI,EAAAA,EAAAA,KAAA,SACIL,UAAU,qBACVM,KAAK,OACLC,MAAOjB,EACPkB,SAAWL,GAAMZ,EAAWY,EAAEM,OAAOF,OACrCG,YAAY,+BAEhBL,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQL,SAAC,qBAE1BI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,uBAAsBC,SAC/BL,GAAkC,IAAnBJ,EAAQmB,OAGrBnB,EAAQoB,KAAI,CAACC,EAAOC,KAChBT,EAAAA,EAAAA,KAAA,OAAoBU,QAASA,IAAM1B,EAAcwB,GAAOZ,UACpDI,EAAAA,EAAAA,KAACW,EAAAA,EAAK,CACFH,MAAOA,EACPnB,UAAWA,KAHTmB,EAAMI,OAHpBZ,EAAAA,EAAAA,KAAA,OAAKL,UAAU,2BAA0BC,SAAC,2CAYhD,C,0FC7Cd,MAUA,EAVqBb,IAA0B,IAAzB,gBAAE8B,GAAiB9B,EACrC,OACIW,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC1BI,EAAAA,EAAAA,KAACc,EAAAA,EAAM,CAACC,KAAM,2BAAQC,MAAM,OAAON,QAASA,IAAMG,EAAgB,WAClEb,EAAAA,EAAAA,KAACc,EAAAA,EAAM,CAACC,KAAM,2BAAQC,MAAM,OAAON,QAASA,IAAMG,EAAgB,aAClEb,EAAAA,EAAAA,KAACc,EAAAA,EAAM,CAACC,KAAM,2BAAQC,MAAM,OAAON,QAASA,IAAMG,EAAgB,uBAChE,E,cCNd,MAwBA,EAxBiB9B,IAA6B,IAA5B,KAAEkC,EAAI,aAAEC,GAAcnC,EACpC,MAAMoC,GAAWC,EAAAA,EAAAA,MAMjB,OACI1B,EAAAA,EAAAA,MAAA,OAAKC,UAAW,cAAasB,EAAKI,SAAW,SAAW,IAAMX,QAASA,IAAMQ,EAAaD,GAAMrB,SAAA,EAC5FI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,cAAaC,SAAEqB,EAAKL,MACnClB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,CACtBqB,EAAKI,WAAYrB,EAAAA,EAAAA,KAAA,QAAML,UAAU,eAAcC,SAAC,mBAChDqB,EAAKK,UAEVtB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,cAAaC,SAAEqB,EAAKM,KAAKC,YACxCxB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,YAAWC,SAAE,IAAI6B,KAAKR,EAAKS,aAAaC,wBACvD3B,EAAAA,EAAAA,KAAA,OAAKL,UAAU,aAAYC,SAAEqB,EAAKW,aAClC5B,EAAAA,EAAAA,KAAA,OAAKL,UAAU,cAAaC,UACxBI,EAAAA,EAAAA,KAAA,UAAQL,UAAU,gBAAgBe,QAASA,IAf5BO,KACvBE,EAAS,cAAe,CAAEU,MAAO,CAAEC,aAAcb,IAAS,EAcDc,CAAkBd,GAAMrB,SAAC,qBAE5E,EC8Cd,EAlEiBb,IAA2G,IAA1G,MAAEiD,EAAK,aAAEd,EAAY,aAAEe,EAAY,SAAEC,EAAQ,WAAEC,EAAU,cAAEC,EAAa,WAAEC,EAAU,aAAEC,GAAcvD,EAClH,MAAOwD,EAAoBC,IAAyB/C,EAAAA,EAAAA,UAAS2C,IACtDK,EAAiBC,IAAsBjD,EAAAA,EAAAA,UAAS4C,GAoBvD,OACI3C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EAChB0C,IACF5C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACzBF,EAAAA,EAAAA,MAAA,QAAMC,UAAU,cAAcE,SATlBC,IACxBA,EAAEC,iBACFmC,EAASO,EAAiBF,EAAmB,EAO0B3C,SAAA,EACvDF,EAAAA,EAAAA,MAAA,UAAQQ,MAAOuC,EAAiBtC,SAdpBL,IAC5B4C,EAAmB5C,EAAEM,OAAOF,MAAM,EAa+CN,SAAA,EAC7DI,EAAAA,EAAAA,KAAA,UAAQE,MAAM,QAAON,SAAC,kBACtBI,EAAAA,EAAAA,KAAA,UAAQE,MAAM,cAAaN,SAAC,kBAC5BI,EAAAA,EAAAA,KAAA,UAAQE,MAAM,SAAQN,SAAC,2BAE3BI,EAAAA,EAAAA,KAAA,SACIC,KAAK,OACLI,YAAY,0DACZH,MAAOqC,EACPpC,SA3BWL,IAC/B0C,EAAsB1C,EAAEM,OAAOF,MAAM,KA4BrBF,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQL,SAAC,qBAE1BI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,eAAcC,UACzBF,EAAAA,EAAAA,MAAA,UAAQQ,MAAOiC,EAAYhC,SArCrBL,IACtB,MAAM6C,EAAgB7C,EAAEM,OAAOF,MAC/B+B,EAAaU,EAAc,EAmC2C/C,SAAA,EAClDI,EAAAA,EAAAA,KAAA,UAAQE,MAAM,SAAQN,SAAC,wBACvBI,EAAAA,EAAAA,KAAA,UAAQE,MAAM,SAAQN,SAAC,8BACvBI,EAAAA,EAAAA,KAAA,UAAQE,MAAM,UAASN,SAAC,sCAOpCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7BI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,cAAaC,SAAC,kBAC7BI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,aAAYC,SAAC,kBAC5BI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,cAAaC,SAAC,wBAC7BI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,YAAWC,SAAC,wBAC3BI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,aAAYC,SAAC,wBAC5BI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,cAAaC,SAAC,oBAEpCoC,EAAMzB,KAAKU,IACRjB,EAAAA,EAAAA,KAAC4C,EAAQ,CAAe3B,KAAMA,EAAMC,aAAcA,GAAnCD,EAAKL,QAEtB,E,gECxDd,MA+SA,EA/SmB7B,IAAuB,IAAtB,KAAEkC,EAAI,OAAE4B,GAAQ9D,EAChC,MAAO+D,EAAUC,IAAetD,EAAAA,EAAAA,UAAS,OAClCuD,EAAWC,IAAgBxD,EAAAA,EAAAA,UAASwB,EAAK+B,YACzCE,EAASC,IAAc1D,EAAAA,EAAAA,UAAS,KAChC2D,EAAUC,IAAe5D,EAAAA,EAAAA,UAAS,KAClC6D,EAAcC,IAAmB9D,EAAAA,EAAAA,WAAS,IAC1C+D,EAAUC,IAAehE,EAAAA,EAAAA,WAAS,IAClCiE,EAAWC,IAAgBlE,EAAAA,EAAAA,WAAS,IACpCmE,EAAYC,IAAiBpE,EAAAA,EAAAA,WAAS,IACtCqE,EAAaC,IAAkBtE,EAAAA,EAAAA,UAASwB,EAAKK,QAC7C0C,EAAmBC,IAAwBxE,EAAAA,EAAAA,UAASwB,EAAKiD,cACzDC,EAAaC,IAAkB3E,EAAAA,EAAAA,UAASwB,IACxCoD,EAAiBC,IAAsB7E,EAAAA,EAAAA,WAAS,GACjD0B,GAAWC,EAAAA,EAAAA,MACXmD,GAAWC,EAAAA,EAAAA,MAEX,UACFnF,IACAC,EAAAA,EAAAA,MAEJmF,EAAAA,EAAAA,YAAU,KACNC,QAAQC,IAAI,aAAcJ,EAAS,GACpC,CAACA,KAEJE,EAAAA,EAAAA,YAAU,KAkDFxD,EAAK6B,UAjDa8B,WAClB,IACI,MAAMC,QAAiBC,EAAAA,EAAcC,IAAI,oBAAoB9D,EAAK6B,SAASkC,cACrEC,GAAYC,EAAAA,EAAAA,GAAYL,EAASM,KAAKC,QAC5CrC,EAAY,IACL8B,EAASM,KAAKrC,SACjBuC,WAAYJ,EACZK,eAAeC,EAAAA,EAAAA,GAAYV,EAASM,KAAKrC,SAASwC,gBAE1D,CAAE,MAAOE,GAELlB,GAAmB,EACvB,GAsCAmB,GAnCiBb,WACjB,IACI,MAAMC,QAAiBC,EAAAA,EAAcC,IAAI,iBAAiB9D,EAAKL,MAC/DuC,EAAW0B,EAASM,MACpBT,QAAQC,IAAI,mBAAoBE,EAASM,KAC7C,CAAE,MAAOK,GACLd,QAAQc,MAAM,yBAA0BA,EAC5C,GA8BJE,GA3BuBd,WACnB,IACI,MAAMC,QAAiBC,EAAAA,EAAcC,IAAI,cAAc9D,EAAKL,MAC5DqC,EAAa4B,EAASM,KAC1B,CAAE,MAAOK,GACLd,QAAQc,MAAM,4BAA6BA,EAC/C,GAsBJG,GAjB0Bf,WACtB,UACUE,EAAAA,EAAcc,IAAI,sBAAsB3E,EAAKL,KAAM,KAAM,CAC3DiF,OAAQ,CACJvE,MAAOL,EAAKK,MACZ4C,YAAajD,EAAKiD,cAG9B,CAAE,MAAOsB,GACLd,QAAQc,MAAM,8BAA+BA,EACjD,GAQJM,EAAmB,GACpB,CAAC7E,EAAK6B,SAAU7B,EAAKL,KAoGxB,OACIlB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EACxBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACtBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CAAM,uBAAMuE,EAAYvC,cACxB5B,EAAAA,EAAAA,KAAA,UAAQL,UAAU,cAAce,QAASmC,EAAOjD,SAAC,8BACjDI,EAAAA,EAAAA,KAAA,UAAQL,UAAU,cAAce,QAxG7BkE,UACfnB,GAAY,GACZ,IAGIR,EADqBD,GAAaQ,GAAY,EAAI,UAG5CsB,EAAAA,EAAc7D,KAAK,cAAcA,EAAKL,KAAM,CAAC,EAAG,CAClDiF,OAAQ,CAAEE,OAAQxB,EAASwB,UAI/B,MAAMlB,QAAiBC,EAAAA,EAAcC,IAAI,cAAc9D,EAAKL,MAC5DqC,EAAa4B,EAASM,KAC1B,CAAE,MAAOK,GACLd,QAAQc,MAAM,oBAAqBA,EACvC,CAAC,QACG/B,GAAY,EAChB,GAsFiEuC,SAAUxC,EAAS5D,SACnE4D,EAAW,4CAAgB,gBAAMR,UAG1ChD,EAAAA,EAAAA,KAAA,OAAKL,UAAU,mBAAkBC,SAE5B2E,GAAYJ,EAAY5C,KAAKwE,SAAWxB,EAASwB,SAC9C/F,EAAAA,EAAAA,KAAAiG,EAAAA,SAAA,CAAArG,SACK8D,GACGhE,EAAAA,EAAAA,MAAAuG,EAAAA,SAAA,CAAArG,SAAA,EACII,EAAAA,EAAAA,KAAA,UAAQL,UAAU,0BAA0Be,QA9DvDkE,UACjBf,GAAc,GACd,UACUiB,EAAAA,EAAcc,IAAI,gBAAgB3E,EAAKL,KAAM,KAAM,CACrDiF,OAAQ,CACJvE,MAAOwC,EACPI,YAAaF,KAIrBI,GAAe8B,IAAS,IACjBA,EACH5E,MAAOwC,EACPI,YAAaF,KAGrB,CAAE,MAAOwB,GACLd,QAAQc,MAAM,sBAAuBA,EACzC,CAAC,QACG3B,GAAc,GACdF,GAAa,EACjB,GAyC8F/D,SAAC,kBACnEI,EAAAA,EAAAA,KAAA,UAAQL,UAAU,0BAA0Be,QAvBnDyF,KACrBxC,GAAa,GACbI,EAAeI,EAAY7C,OAC3B2C,EAAqBE,EAAYD,YAAY,EAoBqDtE,SAAC,qBAG3EF,EAAAA,EAAAA,MAAAuG,EAAAA,SAAA,CAAArG,SAAA,EACII,EAAAA,EAAAA,KAAA,UAAQL,UAAU,0BAA0Be,QAzEpD0F,KACpBzC,GAAa,GACbI,EAAeI,EAAY7C,OAC3B2C,EAAqBE,EAAYD,YAAY,EAsEqD8B,SAAUpC,EAAWhE,SACtFgE,EAAa,yBAAY,kBAE9B5D,EAAAA,EAAAA,KAAA,UAAQL,UAAU,0BAA0Be,QA9CvDkE,UACjB9E,EAAEuG,kBAEF,GADsBC,OAAOC,QAAQ,wGAIrC,UACUzB,EAAAA,EAAc0B,OAAO,gBAAgBvF,EAAKL,MAChD0F,OAAOG,SAASC,SAEhBvF,EAAS,QACb,CAAE,MAAOqE,GACLd,QAAQc,MAAM,gDAAcA,EAChC,GAiC8F5F,SAAC,2BAO1F8D,GACG1D,EAAAA,EAAAA,KAAAiG,EAAAA,SAAA,CAAArG,UACAF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAE3BI,EAAAA,EAAAA,KAAA,SACIC,KAAK,OACLC,MAAO4D,EACP3D,SAAWL,GAAMiE,EAAejE,EAAEM,OAAOF,UAE7CF,EAAAA,EAAAA,KAAA,YACIE,MAAO8D,EACP7D,SAAWL,GAAMmE,EAAqBnE,EAAEM,OAAOF,eAKvDR,EAAAA,EAAAA,MAAAuG,EAAAA,SAAA,CAAArG,SAAA,EACII,EAAAA,EAAAA,KAAA,MAAAJ,SAAKuE,EAAY7C,SACjBtB,EAAAA,EAAAA,KAAA,KAAAJ,SAAIuE,EAAYD,kBAGxBxE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7BF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CAAM,uBAAM,IAAI6B,KAAK0C,EAAYzC,aAAaC,yBAC9CjC,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CAAM,uBAAMuE,EAAY5C,KAAKC,gBAG/B2C,EAAY9C,UAAYyB,GACtBpD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACjCI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,uDACJF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EAC/BI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,2BAA2BgH,KAAMpB,EAAAA,EAAAA,GAAYzC,EAASwC,eAAgBsB,IAAI,cACzFlH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0BAAyBC,SAAA,EACpCF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,iBAAKkD,EAAS+D,kBACjBnH,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,iBAAKkD,EAASgE,oBACjBpH,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,uBAAM,IAAI6B,KAAKqB,EAASiE,cAAcpF,+BAGjD3B,EAAAA,EAAAA,KAAA,OAAKL,UAAU,uBAAsBC,SAChCkD,EAASuC,WAAW9E,KAAKC,IACtBR,EAAAA,EAAAA,KAACW,EAAAA,EAAK,CAACH,MAAOA,EACdnB,UAAWA,WAKvBgF,GACIrE,EAAAA,EAAAA,KAAA,KAAAJ,SAAG,6EAEHI,EAAAA,EAAAA,KAAA,SAKRN,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7BI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,kBACJF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC1BI,EAAAA,EAAAA,KAAA,YACIE,MAAOkD,EACPjD,SAAWL,GAAMuD,EAAYvD,EAAEM,OAAOF,OACtCG,YAAY,0DAEhBL,EAAAA,EAAAA,KAAA,UAAQU,QAzKEkE,UACtB,GAAKxB,EAAS4D,OAAd,CACAzD,GAAgB,GAChB,UACUuB,EAAAA,EAAc7D,KAAK,eAAeA,EAAKL,KAAM,KAAM,CACrDiF,OAAQ,CAAEE,OAAQxB,EAASwB,OAAQkB,QAAS7D,KAEhDD,EAAW,IAAID,EAAS,CAAE3B,KAAMgD,EAAU0C,QAAS7D,EAAU1B,YAAa,IAAID,QAC9E4B,EAAY,GAChB,CAAE,MAAOmC,GACLd,QAAQc,MAAM,qBAAsBA,EACxC,CAAC,QACGjC,GAAgB,EACpB,CAZ4B,CAY5B,EA4JgDyC,SAAU1C,EAAa1D,SACtD0D,EAAe,sCAAe,kCAGvCtD,EAAAA,EAAAA,KAAA,OAAKL,UAAU,qBAAoBC,SAC9BsD,EAAQ5C,OAAS,EACd4C,EAAQ3C,KAAI,CAAC2G,EAAOzG,KAChBf,EAAAA,EAAAA,MAAA,OAAiBC,UAAU,oBAAmBC,SAAA,EAC1CF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAC9BF,EAAAA,EAAAA,MAAA,QAAMC,UAAU,iBAAgBC,SAAA,CAAEsH,EAAM3F,KAAKC,SAAS,QACtDxB,EAAAA,EAAAA,KAAA,QAAML,UAAU,kBAAiBC,SAAEsH,EAAMD,cAE7CvH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBC,SAAA,EAChCI,EAAAA,EAAAA,KAAA,OAAAJ,SACK,IAAI6B,KAAKyF,EAAMxF,aAAaC,uBAEhC4C,GAAY2C,EAAM3F,KAAKwE,SAAWxB,EAASwB,SACxC/F,EAAAA,EAAAA,KAAA,UAAQU,QAASA,IA3K3BkE,OAAOuC,EAASC,KACtC,UACUtC,EAAAA,EAAc0B,OAAO,qBAAqBW,IAAW,CACvDtB,OAAQ,CAAEwB,OAAQD,KAEtBjE,EAAWD,EAAQoE,QAAOJ,GAASA,EAAMtG,KAAOuG,IACpD,CAAE,MAAO3B,GACLd,QAAQc,MAAM,uBAAwBA,EAC1C,GAmKuD+B,CAAkBL,EAAMtG,GAAIuD,EAAYvD,IAAIhB,SAAC,sBAVtEa,MAgBdT,EAAAA,EAAAA,KAAA,KAAAJ,SAAG,wDAIb,ECrLd,EA1HiBb,IAA2C,IAA1C,SAAEc,EAAQ,SAAE2H,EAAQ,aAAEC,GAAc1I,EAClD,MAAOuC,EAAOoG,IAAYjI,EAAAA,EAAAA,UAAS,KAC5ByE,EAAayD,IAAkBlI,EAAAA,EAAAA,UAAS,IACzC8E,GAAWC,EAAAA,EAAAA,MACVoD,EAAWC,IAAgBpI,EAAAA,EAAAA,UAAS,KACpCqI,EAAkBC,IAAuBtI,EAAAA,EAAAA,UAAS,OAgCzDgF,EAAAA,EAAAA,YAAU,KAWFF,IAAakD,GAVM7C,WACnB,IACI,MAAMC,QAAiBC,EAAAA,EAAcC,IAAI,kBAAkBR,EAASwB,UACpErB,QAAQC,IAAIE,GACZgD,EAAahD,EAASM,KAC1B,CAAE,MAAOK,GACLd,QAAQc,MAAM,4BAA6BA,EAC/C,GAIAwC,EACJ,GACD,CAACzD,EAAUkD,IAEd,MAQMQ,GAAeC,EAAAA,EAAAA,KAErB,OACIlI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,YAAWC,UACtBF,EAAAA,EAAAA,MAAA,QAAMG,SA1DO+E,UAEjB,GADA9E,EAAEC,iBACG0H,GAAiBK,EAKtB,IACI,GAAIL,EAAc,OACS3C,EAAAA,EAAc7D,KACjC,6BAA6BsD,EAASwB,gBAAgBzE,iBAAqB4C,IAC3E,CAAC,EACD,CACIiE,QAAS,CACLC,cAAe,UAAUC,aAAaC,QAAQ,wBAI9D,KAAO,OACoBxD,EAAAA,EAAc7D,KACjC,uBAAuBsD,EAASwB,gBAAgBzE,iBAAqB4C,gBAA0B4D,EAAiB9C,aAChH,CAAC,EAET,CACAnF,GACJ,CAAE,MAAO2F,GACLd,QAAQc,MAAM,wBAAyBA,EAC3C,MAxBI+C,MAAM,mFAwBV,EA+BiC3I,SAAA,EACzBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACvBI,EAAAA,EAAAA,KAAA,SAAAJ,SAAO,kBACPI,EAAAA,EAAAA,KAAA,SACIC,KAAK,OACLC,MAAOoB,EACPnB,SAAWL,GAAM4H,EAAS5H,EAAEM,OAAOF,OACnCsI,UAAQ,QAGhB9I,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACvBI,EAAAA,EAAAA,KAAA,SAAAJ,SAAO,kBACPI,EAAAA,EAAAA,KAAA,YACIE,MAAOgE,EACP/D,SAAWL,GAAM6H,EAAe7H,EAAEM,OAAOF,OACzCsI,UAAQ,QAGdf,IACE/H,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACvBI,EAAAA,EAAAA,KAAA,SAAAJ,SAAO,uDACPI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,mCAAkCC,UAC7CI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,yBAAwBC,SAClCgI,EAAUrH,KAAKkI,IAEZ,MAAMC,EAAWD,EAAGnD,cACbmD,EAAGnD,cAAcqD,WAAW,YACzB,4BAAmCF,EAAGnD,gBACtCmD,EAAGnD,cACP2C,EAEN,OACIvI,EAAAA,EAAAA,MAAA,OAEIgB,QAASA,KAAMkI,OA9C7B9F,EA8C8C2F,OA7ChEX,GAAoBA,EAAiB9C,aAAelC,EAASkC,WAC7D+C,EAAoB,MAEpBA,EAAoBjF,IAJFA,KA8CkD,EACpCnD,UAAW,2BAA0BmI,GAAoBA,EAAiB9C,aAAeyD,EAAGzD,WAAa,WAAa,IAAKpF,SAAA,EAE3HI,EAAAA,EAAAA,KAAA,OAAK2G,IAAK+B,EAAU9B,IAAK6B,EAAG5B,iBAC5B7G,EAAAA,EAAAA,KAAA,OAAKL,UAAU,yBAAwBC,UACnCI,EAAAA,EAAAA,KAAA,OAAAJ,SAAM6I,EAAG5B,oBANR4B,EAAGzD,WAQN,YAO9BtF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACzBI,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAASN,UAAU,yBAAyBe,QAAS8G,EAAS5H,SAAC,kBAC5EI,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAASN,UAAU,yBAAwBC,SAAC,wBAG/D,ECkDd,EAtKiBiJ,KACb,MAAO7G,EAAO8G,IAAYrJ,EAAAA,EAAAA,UAAS,KAC5BsJ,EAAaC,IAAkBvJ,EAAAA,EAAAA,UAAS,KACxCwJ,EAAcC,IAAmBzJ,EAAAA,EAAAA,UAAS,OAC1C0J,EAAYC,IAAiB3J,EAAAA,EAAAA,WAAS,IACtC4J,EAAMC,IAAW7J,EAAAA,EAAAA,UAAS,IAC1B8J,EAAYC,IAAiB/J,EAAAA,EAAAA,UAAS,IACtCgK,EAAWC,IAAgBjK,EAAAA,EAAAA,WAAS,IACpC0C,EAAYwH,IAAiBlK,EAAAA,EAAAA,UAAS,WACtC2C,EAAewH,IAAoBnK,EAAAA,EAAAA,UAAS,KAC5C4C,EAAYwH,IAAiBpK,EAAAA,EAAAA,UAAS,SAEvC0B,GAAWC,EAAAA,EAAAA,MACXqF,GAAWqD,EAAAA,EAAAA,OAEjBrF,EAAAA,EAAAA,YAAU,KACN,MAAMoB,EAAS,IAAIkE,gBAAgBtD,EAASuD,QACtCC,EAAcC,SAASrE,EAAOd,IAAI,SAAW,IAAK,IAClDoF,EAAoBtE,EAAOd,IAAI,SAAW,SAC1CqF,EAAoBvE,EAAOd,IAAI,eAAiB,QAChDsF,EAAuBxE,EAAOd,IAAI,YAAc,GAEtDuE,EAAQW,GACRN,EAAcQ,GACdN,EAAcO,GACdR,EAAiBS,GAEjBC,EAAWL,EAAaE,EAAmBC,EAAmBC,EAAqB,GACpF,CAAC5D,EAASuD,SAEb,MAAMM,GAAaC,EAAAA,EAAAA,cAAY3F,MAAOqF,EAAaO,EAAMnI,EAAYpD,KACjE,IAAK,IAADwL,EACAf,GAAa,GACb,IAAIgB,EAAM,mBAAmBT,YACzBO,IAAME,GAAO,SAASF,KACtBnI,GAAcpD,IAASyL,GAAO,eAAerI,aAAsBpD,KAEvE,MAAM4F,QAAiBC,EAAAA,EAAcC,IAAI2F,GACzC5B,GAAgC,QAAvB2B,EAAA5F,EAASM,KAAKwF,iBAAS,IAAAF,OAAA,EAAvBA,EAAyBG,sBAAuB,IACzDpB,EAAc3E,EAASM,KAAKkE,KAAKE,WACrC,CAAE,MAAO/D,GACLd,QAAQc,MAAM,wBAAyBA,GACvCsD,EAAS,IACTU,EAAc,EAClB,CAAC,QACGE,GAAa,EACjB,IACD,IAEGmB,GAAYN,EAAAA,EAAAA,cAAY,KAC1B,MAAM1E,EAAS,IAAIkE,gBACnBlE,EAAOiF,IAAI,OAAQzB,EAAK0B,YACxBlF,EAAOiF,IAAI,OAAQ3I,GACnB0D,EAAOiF,IAAI,aAAczI,GACzBwD,EAAOiF,IAAI,UAAW1I,GACtBjB,EAAS,IAAI0E,EAAOkF,aAAc,CAAEC,SAAS,GAAO,GACrD,CAAC3B,EAAMlH,EAAYE,EAAYD,EAAejB,KAEjDsD,EAAAA,EAAAA,YAAU,KACNoG,GAAW,GACZ,CAACxB,EAAMlH,EAAYE,EAAYD,EAAeyI,IAEjD,MAkBMI,EAAaA,KACf/B,EAAgB,MAChBE,GAAc,EAAM,EAelB8B,EAAcA,KAChB5E,OAAO6E,SAAS,CACZC,IAAK,EACLC,SAAU,UACZ,EAGN,OAAIlC,GAEInJ,EAAAA,EAAAA,KAACsL,EAAQ,CACLzL,SAAUA,KACNuJ,GAAc,GACdkB,EAAWjB,EAAMlH,EAAYE,EAAYD,EAAc,EAE3DoF,SAAUyD,EACVxD,cAAc,IAKtBwB,GACOjJ,EAAAA,EAAAA,KAACuL,EAAU,CAACtK,KAAMgI,EAAcpG,OAAQoI,KAI/CjL,EAAAA,EAAAA,KAAA,OAAKL,UAAU,YAAWC,SACrB6J,GACGzJ,EAAAA,EAAAA,KAAA,OAAKL,UAAU,kBAAiBC,SAAC,4BAEjCF,EAAAA,EAAAA,MAAAuG,EAAAA,SAAA,CAAArG,SAAA,EACII,EAAAA,EAAAA,KAACwL,EAAQ,CACLxJ,MAAOA,EACPd,aArDMD,IACtBiI,EAAgBjI,EAAK,EAqDLgB,aA7CMU,IACtBgH,EAAchH,GACd2G,EAAQ,EAAE,EA4CMpH,SAzCC9C,CAACqM,EAAeC,KACjC7B,EAAc4B,GACd7B,EAAiB8B,GACjBpC,EAAQ,GACRgB,EAAW,EAAGnI,EAAYsJ,EAAeC,EAAiB,EAsC1CvJ,WAAYA,EACZC,cAAeA,EACfC,WAAYA,EACZC,cAAc,KAElB5C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACvBI,EAAAA,EAAAA,KAAA,UACIL,UAAU,cACVe,QA9EGiL,KACnBtC,EAAO,IACPC,EAAQD,EAAO,GACf6B,IACJ,EA2EoBlF,SAAmB,IAATqD,EAAWzJ,SACxB,kBAGDI,EAAAA,EAAAA,KAAA,QAAML,UAAU,cAAaC,SAAEyJ,EAAO,KACtCrJ,EAAAA,EAAAA,KAAA,UACIL,UAAU,cACVe,QA/EDkL,KACfvC,EAAOE,EAAa,IACpBD,EAAQD,EAAO,GACf6B,IACJ,EA4EoBlF,SAAUqD,IAASE,EAAa,EAAE3J,SACrC,kBAGDI,EAAAA,EAAAA,KAAA,UACIL,UAAU,eACVe,QAASA,IAAM0I,GAAc,GAAMxJ,SACtC,wBAMX,ECAd,EAjKmBiM,KACf,MAAO9C,EAAaC,IAAkBvJ,EAAAA,EAAAA,UAAS,KACxCwJ,EAAcC,IAAmBzJ,EAAAA,EAAAA,UAAS,OAC1C0J,EAAYC,IAAiB3J,EAAAA,EAAAA,WAAS,IACtC4J,EAAMC,IAAW7J,EAAAA,EAAAA,UAAS,IAC1B8J,EAAYC,IAAiB/J,EAAAA,EAAAA,UAAS,IACtCgK,EAAWC,IAAgBjK,EAAAA,EAAAA,WAAS,IACpC0C,EAAYwH,IAAiBlK,EAAAA,EAAAA,UAAS,WACtC2C,EAAewH,IAAoBnK,EAAAA,EAAAA,UAAS,KAC5C4C,EAAYwH,IAAiBpK,EAAAA,EAAAA,UAAS,SACvC8E,GAAWC,EAAAA,EAAAA,KAEXrD,GAAWC,EAAAA,EAAAA,MACXqF,GAAWqD,EAAAA,EAAAA,OAEjBrF,EAAAA,EAAAA,YAAU,KACN,MAAMoB,EAAS,IAAIkE,gBAAgBtD,EAASuD,QAC5CV,EAAQY,SAASrE,EAAOd,IAAI,SAAW,IAAK,KAC5C4E,EAAc9D,EAAOd,IAAI,SAAW,UACpC8E,EAAchE,EAAOd,IAAI,eAAiB,SAC1C6E,EAAiB/D,EAAOd,IAAI,YAAc,GAAG,GAC9C,CAAC0B,EAASuD,SAEb,MAAM8B,GAAmBvB,EAAAA,EAAAA,cAAY3F,UACjC,IAAK,IAAD6F,EACAf,GAAa,GACb,MAAM7E,QAAiBC,EAAAA,EAAcC,IAAI,gCACzCiE,GAAsC,QAAvByB,EAAA5F,EAASM,KAAKwF,iBAAS,IAAAF,OAAA,EAAvBA,EAAyBG,sBAAuB,IAC/DpB,EAAc3E,EAASM,KAAKkE,KAAKE,WACrC,CAAE,MAAO/D,GACLd,QAAQc,MAAM,+BAAgCA,GAC9CwD,EAAe,IACfQ,EAAc,EAClB,CAAC,QACGE,GAAa,EACjB,CACAhF,QAAQC,IAAIJ,EAAS,GACtB,CAACA,KAEJE,EAAAA,EAAAA,YAAU,KACNqH,GAAkB,GACnB,CAACzC,EAAMlH,EAAY2J,IAEtB,MAAMjB,GAAYN,EAAAA,EAAAA,cAAY,KAC1B,MAAM1E,EAAS,IAAIkE,gBACnBlE,EAAOiF,IAAI,OAAQzB,EAAK0B,YACxBlF,EAAOiF,IAAI,OAAQ3I,GACnB0D,EAAOiF,IAAI,aAAczI,GACzBwD,EAAOiF,IAAI,UAAW1I,GACtBjB,EAAS,IAAI0E,EAAOkF,aAAc,CAAEC,SAAS,GAAO,GACrD,CAAC3B,EAAMlH,EAAYE,EAAYD,EAAejB,KAEjDsD,EAAAA,EAAAA,YAAU,KACNoG,GAAW,GACZ,CAACxB,EAAMlH,EAAYE,EAAYD,EAAeyI,IAEjD,MAkBMI,EAAaA,KACf/B,EAAgB,MAChBE,GAAc,EAAM,EAclB8B,EAAcA,KAChB5E,OAAO6E,SAAS,CACZC,IAAK,EACLC,SAAU,UACZ,EAGN,OAAIlC,GAEInJ,EAAAA,EAAAA,KAACsL,EAAQ,CACLzL,SAAUA,KACNuJ,GAAc,GACd0C,GAAkB,EAEtBtE,SAAUyD,EACVxD,cAAc,IAKtBwB,GACOjJ,EAAAA,EAAAA,KAACuL,EAAU,CAACtK,KAAMgI,EAAcpG,OAAQoI,KAI/CjL,EAAAA,EAAAA,KAAA,OAAKL,UAAU,YAAWC,SACrB6J,GACGzJ,EAAAA,EAAAA,KAAA,OAAKL,UAAU,kBAAiBC,SAAC,4BAEjCF,EAAAA,EAAAA,MAAAuG,EAAAA,SAAA,CAAArG,SAAA,EACII,EAAAA,EAAAA,KAACwL,EAAQ,CACLxJ,MAAO+G,EACP7H,aApDMD,IACtBiI,EAAgBjI,EAAK,EAoDLgB,aA5CMU,IACtBgH,EAAchH,GACd2G,EAAQ,EAAE,EA2CMpH,SAxCC9C,CAACqM,EAAeC,KACjC7B,EAAc4B,GACd7B,EAAiB8B,GACjBpC,EAAQ,EAAE,EAsCMnH,WAAYA,EACZC,cAAeA,EACfC,WAAYA,EACZC,cAAc,KAElB5C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACvBI,EAAAA,EAAAA,KAAA,UACIL,UAAU,cACVe,QA7EGiL,KACnBtC,EAAO,IACPC,EAAQD,EAAO,GACf6B,IACJ,EA0EoBlF,SAAmB,IAATqD,EAAWzJ,SACxB,kBAGDI,EAAAA,EAAAA,KAAA,QAAML,UAAU,cAAaC,SAAEyJ,EAAO,KACtCrJ,EAAAA,EAAAA,KAAA,UACIL,UAAU,cACVe,QA9EDkL,KACfvC,EAAOE,EAAa,IACpBD,EAAQD,EAAO,GACf6B,IACJ,EA2EoBlF,SAAUqD,IAASE,EAAa,EAAE3J,SACrC,iBAGA2E,GAAYA,EAASwH,QAClB/L,EAAAA,EAAAA,KAAA,UACIL,UAAU,eACVe,QAASA,IAAM0I,GAAc,GAAMxJ,SACtC,wBAOf,E,wBC7Jd,MAwBA,EAxBiBoM,KACb,MAAO/E,EAASgF,IAAcxM,EAAAA,EAAAA,UAAS,QAMvC,OACIO,EAAAA,EAAAA,KAAA,OAAAJ,UACIF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACtBI,EAAAA,EAAAA,KAACkM,EAAAA,EAAM,KACPxM,EAAAA,EAAAA,MAACyM,EAAAA,EAAa,CAAAvM,SAAA,EACVI,EAAAA,EAAAA,KAACoM,EAAY,CAACvL,gBATDwL,IACzBJ,EAAWI,EAAY,KASX3M,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBC,SAAA,CACnB,SAAZqH,IAAsBjH,EAAAA,EAAAA,KAAC6I,EAAQ,IACnB,WAAZ5B,IAAwBjH,EAAAA,EAAAA,KAAC6L,EAAU,IACvB,oBAAZ5E,IAAiCjH,EAAAA,EAAAA,KAACsM,EAAAA,QAAe,cAI5D,C,2GCpBd,MAAMC,EAAeC,EAAAA,MAAWzN,IAAA,IAAC,SAAE+D,EAAQ,UAAE2J,EAAS,QAAEC,GAAS3N,EAAA,OAC7DW,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBC,SAAA,EAChCI,EAAAA,EAAAA,KAAA,SACIC,KAAK,WACLW,GAAI,YAAYkC,EAASkC,aACzB2H,QAASF,EACTtM,SAAUA,IAAMuM,EAAQ5J,EAASkC,eAErCtF,EAAAA,EAAAA,MAAA,SAAOkN,QAAS,YAAY9J,EAASkC,aAAcrF,UAAU,uBAAsBC,SAAA,EAC/EI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,iCAAgCC,UAC3CI,EAAAA,EAAAA,KAAA,OACI2G,KAAKpB,EAAAA,EAAAA,GAAYzC,EAASwC,eAC1BsB,IAAK9D,EAAS+D,cACdlH,UAAU,4BAGlBK,EAAAA,EAAAA,KAAA,QAAML,UAAU,sBAAqBC,SAAEkD,EAAS+D,qBAElD,IAIJgG,EAAgBL,EAAAA,MAAWM,IAAA,IAAC,UAAElF,EAAS,kBAAEmF,EAAiB,QAAEC,EAAO,QAAEN,EAAO,QAAEO,EAAO,MAAEC,GAAOJ,EAAA,OAChG9M,EAAAA,EAAAA,KAAA,OAAKL,UAAU,yBAAyBe,QAASuM,EAAQrN,UACrDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAiBe,QAAUZ,GAAMA,EAAEuG,kBAAkBzG,SAAA,EAChEF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EAClCI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,6DACJI,EAAAA,EAAAA,KAAA,UAAQL,UAAU,uBAAuBe,QAASuM,EAAQrN,SAAC,aAE/DI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,sBAAqBC,SAC/BoN,GACGhN,EAAAA,EAAAA,KAAA,KAAAJ,SAAG,kFACkB,IAArBgI,EAAUtH,QACVN,EAAAA,EAAAA,KAAA,KAAAJ,SAAG,0GAEHI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,sBAAqBC,SAC/BgI,EAAUrH,KAAIuC,IACX9C,EAAAA,EAAAA,KAACuM,EAAY,CAETzJ,SAAUA,EACV2J,UAAWM,EAAkBI,SAASrK,EAASkC,YAC/C0H,QAASA,GAHJ5J,EAASkC,mBASlChF,EAAAA,EAAAA,KAAA,OAAKL,UAAU,wBAAuBC,UAClCI,EAAAA,EAAAA,KAAA,UACIL,UAAU,yBACVe,QAASwM,EACTlH,SAAuC,IAA7B+G,EAAkBzM,QAAgB0M,EAAQpN,SACvD,kEAKP,IA4JV,EAzJcwN,IAA2B,IAA1B,MAAE5M,EAAK,UAAEnB,GAAW+N,EAC/B,MAAOC,EAAcC,IAAmB7N,EAAAA,EAAAA,UAAS,CAAC,IAC3C8N,EAAmBC,IAAwB/N,EAAAA,EAAAA,WAAS,IACpDmI,EAAWC,IAAgBpI,EAAAA,EAAAA,UAAS,KACpCsN,EAAmBU,IAAwBhO,EAAAA,EAAAA,UAAS,KACpDuN,EAASU,IAAcjO,EAAAA,EAAAA,WAAS,IACjC,eAAEkO,EAAc,aAAEC,EAAY,YAAEC,IAAgBC,EAAAA,EAAAA,YAAWC,EAAAA,IAE3DC,GAAqBC,EAAAA,EAAAA,SAAO,GAC5B1J,GAAWC,EAAAA,EAAAA,KAoCX0J,EAAmBA,KACrBV,GAAqB,GACrBC,EAAqB,GAAG,EAGtBU,GAAsB5D,EAAAA,EAAAA,cAAavF,IACrCyI,GAAqBW,GACbA,EAAajB,SAASnI,GACfoJ,EAAa9G,QAAO1G,GAAMA,IAAOoE,IAEjC,IAAIoJ,EAAcpJ,IAE/B,GACH,IAsDH,OAEIxE,GAASA,EAAM6N,OAAS7N,EAAM6N,MAAMC,QAAU9N,EAAM6N,MAAMC,OAAO,IAC7D5O,EAAAA,EAAAA,MAAA,OAAoBC,UAAU,aAAa4O,aAxGzBzO,IACtB,MAAM0O,EAAO1O,EAAE2O,cAAcC,wBAC7BpB,EAAgB,CACZlC,IAAQoD,EAAKpD,IAAM,GAAd,KACLuD,KAAM,GAAGH,EAAKG,KAAOH,EAAKI,MAAQ,OACpC,EAmG6EC,aAhG1DC,KACrBxB,EAAgB,CAAC,EAAE,EA+F2F1N,SAAA,EACtGI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,0BAA0BgH,IAAKnG,EAAM6N,MAAMC,OAAO,GAAG5D,IAAK9D,IAAKpG,EAAMuO,QACpFrP,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACvBI,EAAAA,EAAAA,KAAA,MAAAJ,SAAKY,EAAMuO,QACX/O,EAAAA,EAAAA,KAAA,KAAAJ,SAAIY,EAAMwO,QAAQzO,KAAK0O,GAAWA,EAAOF,OAAMG,KAAK,SACpDxP,EAAAA,EAAAA,MAAA,OAAKC,UAAU,UAAUwP,MAAO9B,EAAazN,SAAA,EACzCI,EAAAA,EAAAA,KAAA,MAAAJ,SAAKY,EAAMuO,QACX/O,EAAAA,EAAAA,KAAA,KAAAJ,SAAIY,EAAMwO,QAAQzO,KAAK0O,GAAWA,EAAOF,OAAMG,KAAK,eAG5DxP,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8BAA6BC,SAAA,EACxCI,EAAAA,EAAAA,KAAA,UACIU,QAASA,IA7CLkE,WACpB,GAAIvF,EACA,IACIsO,EAAenN,GACXqN,EACAD,GAAa,GAETC,GACAuB,YAAW,KACPxB,GAAa,EAAK,GACnB,IAGf,CAAE,MAAOpI,GAAQ,IAAD6J,EAAAC,EAEZ,GADA5K,QAAQc,MAAM,iDAAeA,GACE,OAAb,QAAd6J,EAAA7J,EAAMX,gBAAQ,IAAAwK,OAAA,EAAdA,EAAgBE,QAGhB,YADAjJ,OAAOkJ,KAAKhP,EAAMiP,cAAcC,QAAS,UAEP,OAAb,QAAdJ,EAAA9J,EAAMX,gBAAQ,IAAAyK,OAAA,EAAdA,EAAgBC,QACvBhH,MAAM,oKAENA,MAAM,4HAEd,MAEAjC,OAAOkJ,KAAKhP,EAAMiP,cAAcC,QAAS,SAC7C,EAkB+BC,CAAgBnP,GAC/Bb,UAAWN,EAAY,eAAiB,eAAeO,SAEtDP,EAAY,SAAM,UAEvBW,EAAAA,EAAAA,KAAA,UAAQL,UAAU,+BAA+Be,QA9FrCkP,KACxBpC,GAAqB,GACjBjJ,IAAayJ,EAAmB6B,SAjBjBjL,WACnB,GAAKmB,IAAUiI,EAAmB6B,QAAlC,CAEAnC,GAAW,GACX,IACI,MAAM7I,QAAiBC,EAAAA,EAAcC,IAAI,kBAAkBgB,KAC3D8B,EAAahD,EAASM,MAAQ,IAC9B6I,EAAmB6B,SAAU,CACjC,CAAE,MAAOrK,GACLd,QAAQc,MAAM,mHAA0BA,EAC5C,CAAC,QACGkI,GAAW,EACf,CAXiD,CAWjD,EAMI1F,CAAezD,EAASwB,OAC5B,EA0F0FnG,SAAC,cAKlF2N,GAAqBuC,EAAAA,cAClB9P,EAAAA,EAAAA,KAAC6M,EAAa,CACVjF,UAAWA,EACXmF,kBAAmBA,EACnBC,QAASA,EACTN,QAASyB,EACTlB,QAASiB,EACThB,MApFetI,UAC/B,GAAiC,IAA7BmI,EAAkBzM,OAKtB,IACI,MAAMyP,EAAWhD,EAAkBxM,KAAIyE,GACnCF,EAAAA,EAAc7D,KAAK,yBAAyB+D,UAAoB,KAAM,CAClEa,OAAQ,CAAEmK,QAASxP,EAAMI,cAI3BqP,QAAQC,IAAIH,GAClBxH,MAAM,gIACN2F,GACJ,CAAE,MAAO1I,GACLd,QAAQc,MAAM,qFAAqBA,GACnC+C,MAAM,uIACV,MAjBIA,MAAM,mFAiBV,IAmEY4H,SAASC,QA/BP5P,EAAMI,IAkChB,IAAI,C,gGCpNhB,MA8NA,EA9NoByP,KAChB,MAAMlP,GAAWC,EAAAA,EAAAA,OAEVkP,EAASC,IAAc9Q,EAAAA,EAAAA,UAAS,KAChC+Q,EAAgBC,IAAqBhR,EAAAA,EAAAA,UAAS,KAC9CiR,EAAiBC,IAAsBlR,EAAAA,EAAAA,UAAS,KAChDmR,EAAWC,IAAgBpR,EAAAA,EAAAA,WAAS,IACpC2C,EAAewH,IAAoBnK,EAAAA,EAAAA,UAAS,KAC5CqR,EAAeC,IAAoBtR,EAAAA,EAAAA,UAAS,KAC5CuR,EAAWC,IAAgBxR,EAAAA,EAAAA,UAAS,UACrC8E,GAAWC,EAAAA,EAAAA,MAEjBC,EAAAA,EAAAA,YAAU,KACFF,IACA2M,IACAC,IACAC,IACJ,GACD,CAAC7M,IAEJ,MAAM2M,EAAetM,UACjB,IACI,MAAMC,QAAiBC,EAAAA,EAAcC,IAAI,wBAAwBR,EAAS3D,MAC1E2P,EAAW1L,EAASM,KACxB,CAAE,MAAOK,GACLd,QAAQc,MAAM,wGAAyBA,EAC3C,GAGE2L,EAAsBvM,UACxB,IACI,MAAMC,QAAiBC,EAAAA,EAAcC,IAAI,oCAAoCR,EAAS3D,MACtF6P,EAAkB5L,EAASM,KAC/B,CAAE,MAAOK,GACLd,QAAQc,MAAM,qHAA4BA,EAC9C,GAGE4L,EAAuBxM,UACzB,IACI,MAAMC,QAAiBC,EAAAA,EAAcC,IAAI,mCAAmCR,EAAS3D,MACrF+P,EAAmB9L,EAASM,KAChC,CAAE,MAAOK,GACLd,QAAQc,MAAM,wIAAgCA,EAClD,GA0CE6L,EAAuBtL,GAClBuK,EAAQgB,MAAKC,GAAUA,EAAOA,OAAO3Q,KAAOmF,KAC5CyK,EAAec,MAAKE,GAAWA,EAAQjQ,KAAKX,KAAOmF,KACnD2K,EAAgBY,MAAKE,GAAWA,EAAQD,OAAO3Q,KAAOmF,IAQjE,OACIrG,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACnCI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,+BACJI,EAAAA,EAAAA,KAAA,UAAQU,QAASA,IAAMmQ,GAAa,GAAOlR,UAAU,oBAAmBC,SAAC,+BACzEI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,eAAcC,SACxB0Q,EAAQ/P,KAAKgR,IACV7R,EAAAA,EAAAA,MAAA,OAAqBC,UAAU,cAAce,QAASA,IAZ/C6Q,KACvBpQ,EAAS,gBAAiB,CAAEU,MAAO,CAAE4P,WAAYF,IAAW,EAWgBG,CAAkBH,EAAOA,OAAO3Q,KAAO2D,EAAS3D,GAAK2Q,EAAOhQ,KAAOgQ,EAAOA,QAAQ3R,SAAA,EAC1IF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACII,EAAAA,EAAAA,KAAA,UAAAJ,SAAQ,gCAAgB,IAAE2R,EAAOA,OAAO3Q,KAAO2D,EAAS3D,GAAK2Q,EAAOhQ,KAAKC,SAAW+P,EAAOA,OAAO/P,aAEtGxB,EAAAA,EAAAA,KAAA,UAAQL,UAAU,uBAAuBe,QAAUiR,GAhChD/M,OAAOgN,EAAUD,KACxCA,EAAMtL,kBACN,UACUvB,EAAAA,EAAc0B,OAAO,kBAAmB,CAAEX,OAAQ,CAAEE,OAAQxB,EAAS3D,GAAIgR,cAC/EV,GACJ,CAAE,MAAO1L,GACLd,QAAQc,MAAM,wEAAkBA,EACpC,GAyBiFqM,CAAmBN,EAAOA,OAAO3Q,GAAI+Q,GAAO/R,SAAC,aAJpG2R,EAAO3Q,WAU5BgQ,IACG5Q,EAAAA,EAAAA,KAAA,OAAKL,UAAU,QAAOC,UAClBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC1BI,EAAAA,EAAAA,KAAA,QAAML,UAAU,QAAQe,QAASA,IAAMmQ,GAAa,GAAOjR,SAAC,UAC5DF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACvBI,EAAAA,EAAAA,KAAA,UACIL,UAAW,qBAAkC,WAAdqR,EAAyB,SAAW,IACnEtQ,QAASA,IAAMuQ,EAAa,UAAUrR,SACzC,+BAGDI,EAAAA,EAAAA,KAAA,UACIL,UAAW,qBAAkC,YAAdqR,EAA0B,SAAW,IACpEtQ,QAASA,IAAMuQ,EAAa,WAAWrR,SAC1C,qCAGDI,EAAAA,EAAAA,KAAA,UACIL,UAAW,qBAAkC,aAAdqR,EAA2B,SAAW,IACrEtQ,QAASA,IAAMuQ,EAAa,YAAYrR,SAC3C,8CAKU,WAAdoR,IACGtR,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EAClCI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,+BACJI,EAAAA,EAAAA,KAAA,SACIC,KAAK,OACLI,YAAY,4DACZH,MAAOkC,EACPjC,SAAWL,GAAM8J,EAAiB9J,EAAEM,OAAOF,UAE/CF,EAAAA,EAAAA,KAAA,UAAQU,QArGfkE,UACjB,IACI,MAAMC,QAAiBC,EAAAA,EAAcC,IAAI,2BAA2B3C,KACpE2O,EAAiBlM,EAASM,KAC9B,CAAE,MAAOK,GACLd,QAAQc,MAAM,8EAAmBA,EACrC,GA+FsD5F,SAAC,kBAC/BI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,iBAAgBC,SAC1BkR,EAAcvQ,KAAKgB,IAChB7B,EAAAA,EAAAA,MAAA,OAAmBC,UAAU,qBAAoBC,SAAA,EAC7CF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACII,EAAAA,EAAAA,KAAA,UAAAJ,SAAQ,QAAY,IAAE2B,EAAKX,OAE/BlB,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACII,EAAAA,EAAAA,KAAA,UAAAJ,SAAQ,wBAAa,IAAE2B,EAAKuQ,UAEhCpS,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACII,EAAAA,EAAAA,KAAA,UAAAJ,SAAQ,wBAAa,IAAE2B,EAAKC,aAEhCxB,EAAAA,EAAAA,KAAA,UACIU,QAASA,IA1G7BkE,WACpB,UACUE,EAAAA,EAAc7D,KAAK,eAAgB,CAAE8E,OAAQxB,EAAS3D,GAAIgR,aAChEV,IACAE,GACJ,CAAE,MAAO5L,GACLd,QAAQc,MAAM,wEAAkBA,EACpC,GAmGuDuM,CAAgBxQ,EAAKX,IACpCoF,SAAUqL,EAAoB9P,EAAKX,IAAIhB,SAEtCyR,EAAoB9P,EAAKX,IAAM,qBAAQ,gCAdtCW,EAAKX,WAsBhB,YAAdoQ,IACGtR,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACnCI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,qCACJI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,wBAAuBC,SACN,IAA3B8Q,EAAgBpQ,QACbN,EAAAA,EAAAA,KAAA,KAAAJ,SAAG,oEAEH8Q,EAAgBnQ,KAAKiR,IACjB9M,QAAQC,IAAI6M,IACZxR,EAAAA,EAAAA,KAAA,OAAsBL,UAAU,uBAAsBC,UAClDF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACII,EAAAA,EAAAA,KAAA,UAAAJ,SAAQ,8CAAoB,IAAE4R,EAAQD,OAAO/P,aAF3CgQ,EAAQ5Q,YAWvB,aAAdoQ,IACGtR,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0BAAyBC,SAAA,EACpCI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,4CACJI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,uBAAsBC,SACN,IAA1B4Q,EAAelQ,QACZN,EAAAA,EAAAA,KAAA,KAAAJ,SAAG,8DAGH4Q,EAAejQ,KAAKiR,IAChB9M,QAAQC,IAAI6M,IACZxR,EAAAA,EAAAA,KAAA,OAAsBL,UAAU,sBAAqBC,UAEjDF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACII,EAAAA,EAAAA,KAAA,UAAAJ,SAAQ,2CAAiB,IAAE4R,EAAQjQ,KAAKC,UACxCxB,EAAAA,EAAAA,KAAA,UAAQL,UAAU,gBAAgBe,QAASA,IA7IzDkE,WAC9B,UACUE,EAAAA,EAAc7D,KAAK,kBAAmB,KAAM,CAAE4E,OAAQ,CAAEmM,qBAC9Dd,IACAC,GACJ,CAAE,MAAO3L,GACLd,QAAQc,MAAM,qFAAqBA,EACvC,GAsI6FyM,CAA0BT,EAAQ5Q,IAAIhB,SAAC,eAJtF4R,EAAQ5Q,mBAehD,EC7Md,EAdsB7B,IAAmB,IAAlB,SAAEa,GAAUb,EAC/B,OACIW,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EAClCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACnCI,EAAAA,EAAAA,KAACkS,EAAAA,EAAW,CAAClT,cAAeA,UAC5BgB,EAAAA,EAAAA,KAACqQ,EAAW,QAEhBrQ,EAAAA,EAAAA,KAAA,OAAKL,UAAU,8BAA6BC,SACvCA,MAEH,C,kCCVP,MAAMsF,EAAeE,IAEa,kBAAXA,EAAsB+M,KAAKC,MAAMhN,GAAUA,GAGtCiN,MAAM9R,KAAI+R,IAAI,CACzC1R,GAAI0R,EAAK9R,MAAMI,MACZ0R,EAAK9R,S,oECVT,MCmEP,EAjEuBlB,KACnB,MAAOL,EAASC,IAAcO,EAAAA,EAAAA,UAAS,KAChCN,EAASoT,IAAc9S,EAAAA,EAAAA,UAAS,KAChC+S,EAAaC,IAAkBhT,EAAAA,EAAAA,UAAS,IAAIiT,QAC5CrT,EAAWsT,IAAgBlT,EAAAA,EAAAA,WAAS,IACpCmT,EAAUC,IAAepT,EAAAA,EAAAA,UAAS,OAGzCgF,EAAAA,EAAAA,YAAU,KACqBG,WACvB,IACI,MAAMC,QAAiBC,EAAAA,EAAcC,IAAI,yBACzC4N,EAAuC,YAA1B9N,EAASM,KAAK2N,QAC/B,CAAE,MAAOtN,GACL,GAGRuN,EAAoB,GACrB,KAGHtO,EAAAA,EAAAA,YAAU,KACgBG,WAClB,IACI,MAKMoO,SALiBlO,EAAAA,EAAcC,IAAI,iBAAkB,CACvDoD,QAAS,CACL,cAAiB,UAAUE,aAAaC,QAAQ,iCAG/BnD,KAAK6N,QAC1BA,EAAQ1S,OAAS,IACjBuS,EAAYG,EAAQ,GAAGpS,SDjCXgE,WAC5B,IACI,MAAM8F,EAAM,6CACNuI,EAAAA,EAAMrN,IACR8E,EACA,CACIwI,WAAY,CAACN,GACbO,MAAM,GAEV,CACIhL,QAAS,CACL,cAAiB,UAAUE,aAAaC,QAAQ,+BAIhE,CAAE,MAAO9C,GAEL,MADAd,QAAQc,MAAM,+BAAgCA,GACxCA,CACV,GCiBsB4N,CAAiBJ,EAAQ,GAAGpS,IAE1C,CAAE,MAAO4E,GACLd,QAAQc,MAAM,0BAA2BA,EAC7C,GAEJ6N,EAAe,GAChB,IAeH,MAAO,CACHpU,UACAC,aACAC,UACAC,aAjBiBwF,UACjB,IACI,MACM0O,SADiBxO,EAAAA,EAAcC,IAAI,+BAA+B9F,iBACvCkG,KAAKC,OAAOiN,MAAM/K,QAC9C9G,GAAUA,EAAM+S,cAErBhB,EAAWe,EACf,CAAE,MAAO9N,GACLd,QAAQc,MAAM,yBAA0BA,GACxC+M,EAAW,GACf,GAQAlT,YACAuT,WACH,C,0CClEL,MAAM3K,EAAe,+CAER1C,EAAeD,GACnBA,EAGEA,EAAcqD,WAAW,YAC1B,4BAAmCrD,IACnCA,EAJK2C,EAOFC,EAAkBA,IACpBD,C,iECRX,MASA,EATelJ,IAAgD,IAA/C,KAAEgC,EAAI,KAAEyS,EAAI,MAAExS,EAAK,QAAEN,EAAUA,QAAU3B,EAErD,OACIiB,EAAAA,EAAAA,KAACyT,EAAAA,GAAI,CAACC,GAAIF,EAAO7T,UAAW,WAAUqB,EAAQ,eAAiB,IAAMN,QAASA,EAAQd,SACjFmB,GACE,C,0FCJf,MAyGA,EAzGwBuL,KACpB,MAAOqH,EAAUC,IAAenU,EAAAA,EAAAA,UAAS,KAClCoU,EAAWC,IAAgBrU,EAAAA,EAAAA,UAAS,KACpCsU,EAAmBC,IAAwBvU,EAAAA,EAAAA,UAAS,CAAC,GACtD8E,GAAWC,EAAAA,EAAAA,MAEjBC,EAAAA,EAAAA,YAAU,KACFF,GACA0P,GACJ,GACD,CAAC1P,IAEJ,MAAM0P,EAAiBrP,UACnB,IACI,MAAMC,QAAiBC,EAAAA,EAAcC,IAAI,qCAAqCR,EAAS3D,MACvFkT,EAAajP,EAASM,KAC1B,CAAE,MAAOK,GACLd,QAAQc,MAAM,oHAA2BA,EAC7C,GAoCJ,OACI9F,EAAAA,EAAAA,MAAA,OAAKC,UAAU,6BAA4BC,SAAA,EACvCI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,8BACJF,EAAAA,EAAAA,MAAA,QAAMG,SApCO+E,UACjB9E,EAAEC,iBAEF,IACI,IAAKwE,EAED,YADAgE,MAAM,4DAIV,MAAMpD,EAAO,CACTY,OAAQxB,EAAS3D,GACjB+S,SAAUA,GAGR9O,QAAiBC,EAAAA,EAAc7D,KAAK,2BAA4BkE,GACtET,QAAQC,IAAI,sDAAeE,EAASM,MACpCoD,MAAM,6GACNqL,EAAY,IACZK,GACJ,CAAE,MAAOzO,GACLd,QAAQc,MAAM,sDAAeA,GAC7B+C,MAAM,oFACV,GAckC5I,UAAU,wBAAuBC,SAAA,EAC3DF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACvBI,EAAAA,EAAAA,KAAA,SAAO4M,QAAQ,WAAUhN,SAAC,gCAC1BI,EAAAA,EAAAA,KAAA,YACIY,GAAG,WACHV,MAAOyT,EACPxT,SAAWL,GAAM8T,EAAY9T,EAAEM,OAAOF,OACtCgU,KAAK,IACLC,KAAK,KACL3L,UAAQ,QAGhBxI,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAASN,UAAU,gBAAeC,SAAC,8CAGpDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACnCI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,kDACJI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,eAAcC,SACxBiU,EAAUtT,KAAK6T,IACZ1U,EAAAA,EAAAA,MAAA,OAAsBC,UAAU,eAAcC,SAAA,EAC1CF,EAAAA,EAAAA,MAAA,OACIC,UAAU,uBACVe,QAASA,KAAM2T,OAhCnBC,EAgCkCF,EAAQxT,QA/B9DoT,GAAqBO,IAAI,IAClBA,EACH,CAACD,IAAaC,EAAKD,OAHHA,KAgC8C,EAC1CnF,MAAO,CAAEqF,OAAQ,WAAY5U,SAAA,EAE7BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BC,SAAA,EAACI,EAAAA,EAAAA,KAAA,UAAAJ,SAAQ,+BAAe,IAAEwU,EAAQT,aAC5EjU,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BC,SAAA,EAACI,EAAAA,EAAAA,KAAA,UAAAJ,SAAQ,wBAAa,IAAE,IAAI6B,KAAK2S,EAAQK,WAAWC,oBAC7FN,EAAQvP,UACL7E,EAAAA,EAAAA,KAAA,OAAKL,UAAU,2BAA0BC,SACpCmU,EAAkBK,EAAQxT,IAAM,yCAAa,sCAGlDZ,EAAAA,EAAAA,KAAA,OAAKL,UAAU,2BAA0BC,SAAC,wCAGjDwU,EAAQvP,UAAYkP,EAAkBK,EAAQxT,MAC3CZ,EAAAA,EAAAA,KAAA,OAAKL,UAAU,gCAA+BC,UAC1CF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EAAGI,EAAAA,EAAAA,KAAA,UAAAJ,SAAQ,kBAAY,IAA8B,kBAArBwU,EAAQvP,SAAwBsN,KAAKC,MAAMgC,EAAQvP,UAAUA,SAAWuP,EAAQvP,gBAlBlHuP,EAAQxT,aAyB5B,C","sources":["components/music/MusicSearch.js","components/common/SocialHeader.js","components/post/PostItem.js","components/post/PostList.js","components/post/PostDetail.js","components/post/PostForm.js","components/post/PostBody.js","components/post/NoticeBody.js","pages/PostPage.js","components/music/Music.js","components/social/FriendsList.js","components/common/SidebarLayout.js","utils/trackUtils.js","components/music/spotifyPlayer.js","hooks/useMusicSearch.js","utils/imageUtils.js","components/common/Button.js","components/social/CustomerSupport.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../../styles/MusicSearch.css\";\r\nimport Music from \"./Music\";\r\nimport useMusicSearch from \"../../hooks/useMusicSearch\";\r\n\r\nconst MusicSearch = ({ onSelectTrack }) => {\r\n    const {\r\n        keyword,\r\n        setKeyword,\r\n        results,\r\n        handleSearch,\r\n        isPremium,\r\n    } = useMusicSearch();\r\n\r\n    const [hasSearched, setHasSearched] = useState(false); // 검색 실행 여부 상태 추가\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        handleSearch();\r\n        setHasSearched(true); // 검색 실행 후 상태 업데이트\r\n    };\r\n\r\n    return (\r\n        <div className=\"music-search\">\r\n            {isPremium}\r\n            <form onSubmit={handleSubmit}> {/* 폼 제출 핸들러 변경 */}\r\n                <input\r\n                    className=\"music-search-input\"\r\n                    type=\"text\"\r\n                    value={keyword}\r\n                    onChange={(e) => setKeyword(e.target.value)}\r\n                    placeholder=\"음악 검색\"\r\n                />\r\n                <button type=\"submit\">🔎</button>\r\n            </form>\r\n            <div className=\"music-search-results\">\r\n                {!hasSearched && results.length === 0 ? ( // 검색 실행 여부와 결과 유무에 따라 조건부 렌더링\r\n                    <div className=\"music-search-placeholder\">검색어 입력...</div>\r\n                ) : (\r\n                    results.map((track, index) => (\r\n                        <div key={track.id} onClick={() => onSelectTrack(track)}>\r\n                            <Music \r\n                                track={track}\r\n                                isPremium={isPremium} \r\n                            />\r\n                        </div>\r\n                    ))\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MusicSearch;","import React from \"react\";\r\nimport Button from \"./Button\";\r\nimport \"../../styles/SocialHeader.css\";\r\n\r\nconst SocialHeader = ({ onContentChange }) => {\r\n    return (\r\n        <div className=\"social-header\">\r\n            <Button text={\"게시판홈\"} color=\"blue\" onClick={() => onContentChange('post')} />\r\n            <Button text={\"공지사항\"} color=\"blue\" onClick={() => onContentChange('notice')} />\r\n            <Button text={\"문의사항\"} color=\"blue\" onClick={() => onContentChange('customerSupport')} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SocialHeader;","import React from \"react\";\r\nimport \"../../styles/PostItem.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst PostItem = ({ post, onSelectPost }) => {\r\n    const navigate = useNavigate();\r\n\r\n    const handleReportClick = (post) => {\r\n        navigate(\"/userreport\", { state: { reportedPost: post } });\r\n    };\r\n    \r\n    return (\r\n        <div className={`post-item ${post.isNotice ? 'notice' : ''}`} onClick={() => onSelectPost(post)}>\r\n            <div className=\"post-number\">{post.id}</div>\r\n            <div className=\"post-title\">\r\n                {post.isNotice && <span className=\"notice-label\">[공지]</span>}\r\n                {post.title}\r\n            </div>\r\n            <div className=\"post-author\">{post.user.nickname}</div>\r\n            <div className=\"post-date\">{new Date(post.createdDate).toLocaleDateString()}</div>\r\n            <div className=\"post-views\">{post.viewCount}</div>\r\n            <div className=\"post-report\">\r\n                <button className=\"report-button\" onClick={() => handleReportClick(post)}>🚨</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostItem;","import React, { useState } from \"react\";\r\nimport PostItem from \"./PostItem\";\r\nimport \"../../styles/PostList.css\";\r\n\r\nconst PostList = ({ posts, onSelectPost, onSortChange, onSearch, sortOption, searchKeyword, searchType, isNoticeList }) => {\r\n    const [localSearchKeyword, setLocalSearchKeyword] = useState(searchKeyword);\r\n    const [localSearchType, setLocalSearchType] = useState(searchType);\r\n\r\n    const handleSortChange = (e) => {\r\n        const newSortOption = e.target.value;\r\n        onSortChange(newSortOption); // PostBody로 정렬 옵션 전달\r\n    };\r\n\r\n    const handleSearchKeywordChange = (e) => {\r\n        setLocalSearchKeyword(e.target.value);\r\n    };\r\n\r\n    const handleSearchTypeChange = (e) => {\r\n        setLocalSearchType(e.target.value);\r\n    };\r\n\r\n    const handleSearchSubmit = (e) => {\r\n        e.preventDefault();\r\n        onSearch(localSearchType, localSearchKeyword); // PostBody로 검색 조건 전달\r\n    };\r\n\r\n    return (\r\n        <div className=\"post-list\">\r\n                {!isNoticeList && (\r\n                <div className=\"list-options\">\r\n                    <form className=\"search-form\" onSubmit={handleSearchSubmit}>\r\n                        <select value={localSearchType} onChange={handleSearchTypeChange}>\r\n                            <option value=\"title\">제목</option>\r\n                            <option value=\"description\">내용</option>\r\n                            <option value=\"author\">작성자</option>\r\n                        </select>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"검색어를 입력하세요\"\r\n                            value={localSearchKeyword}\r\n                            onChange={handleSearchKeywordChange}\r\n                        />\r\n                        <button type=\"submit\">검색</button>\r\n                    </form>\r\n                    <div className=\"sort-options\">\r\n                        <select value={sortOption} onChange={handleSortChange}>\r\n                            <option value=\"latest\">최신순</option>\r\n                            <option value=\"oldest\">오래된순</option>\r\n                            <option value=\"popular\">조회수순</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                )}\r\n\r\n                            \r\n                <div className=\"post-list-header\">\r\n                    <div className=\"post-number\">번호</div>\r\n                    <div className=\"post-title\">제목</div>\r\n                    <div className=\"post-author\">작성자</div>\r\n                    <div className=\"post-date\">등록일</div>\r\n                    <div className=\"post-views\">조회수</div>\r\n                    <div className=\"post-report\">신고</div>\r\n                </div>\r\n            {posts.map((post) => (\r\n                <PostItem key={post.id} post={post} onSelectPost={onSelectPost} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostList;","import React, { useEffect, useState } from \"react\";\r\nimport \"../../styles/PostDetail.css\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport Music from \"../music/Music\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { parseTracks } from \"../../utils/trackUtils\";\r\nimport useUserInfo from \"../../hooks/useUserInfo\"; // useUserInfo 훅 임포트\r\nimport { getImageUrl } from \"../../utils/imageUtils\";\r\nimport useMusicSearch from \"../../hooks/useMusicSearch\";\r\n\r\nconst PostDetail = ({ post, onBack }) => {\r\n    const [playlist, setPlaylist] = useState(null);\r\n    const [likeCount, setLikeCount] = useState(post.likeCount);\r\n    const [replies, setReplies] = useState([]);\r\n    const [newReply, setNewReply] = useState(\"\");\r\n    const [isSubmitting, setIsSubmitting] = useState(false); // 로딩 상태 추가\r\n    const [isLiking, setIsLiking] = useState(false); // 좋아요 상태 추가\r\n    const [isEditing, setIsEditing] = useState(false); // 수정 상태 추가\r\n    const [isUpdating, setIsUpdating] = useState(false); // 업데이트 상태 추가\r\n    const [editedTitle, setEditedTitle] = useState(post.title); // 수정된 제목 상태\r\n    const [editedDescription, setEditedDescription] = useState(post.description); // 수정된 내용 상태\r\n    const [currentPost, setCurrentPost] = useState(post); // 현재 게시글 상태 추가\r\n    const [spotifyAnnounce, setSpotifyAnnounce] = useState(false);\r\n    const navigate = useNavigate();\r\n    const userInfo = useUserInfo(); \r\n    \r\n    const {\r\n        isPremium,\r\n    } = useMusicSearch();\r\n\r\n    useEffect(() => {\r\n        console.log(\"User info:\", userInfo); // userInfo 로깅 추가\r\n    }, [userInfo]);\r\n    \r\n    useEffect(() => {\r\n        const fetchPlaylist = async () => {\r\n            try {\r\n                const response = await axiosInstance.get(`/playlist/detail/${post.playlist.playlistId}`);\r\n                const trackList = parseTracks(response.data.tracks);\r\n                setPlaylist({\r\n                    ...response.data.playlist,\r\n                    tracksData: trackList,\r\n                    playlistPhoto: getImageUrl(response.data.playlist.playlistPhoto), // 기본 이미지 설정\r\n                });\r\n            } catch (error) {\r\n                //console.error(\"Error fetching playlist detail\", error);\r\n                setSpotifyAnnounce(true);\r\n            }\r\n        };\r\n\r\n        const fetchReplies = async () => {\r\n            try {\r\n                const response = await axiosInstance.get(`/post/replies/${post.id}`);\r\n                setReplies(response.data);\r\n                console.log(\"Fetched replies:\", response.data); // 로깅 추가\r\n            } catch (error) {\r\n                console.error(\"Error fetching replies\", error);\r\n            }\r\n        };\r\n\r\n        const fetchLikeCount = async () => {\r\n            try {\r\n                const response = await axiosInstance.get(`/post/like/${post.id}`);\r\n                setLikeCount(response.data);\r\n            } catch (error) {\r\n                console.error(\"Error fetching like count\", error);\r\n            }\r\n        };\r\n\r\n\r\n        // 조회수 증가 API 호출\r\n        const increaseViewCount = async () => {\r\n            try {\r\n                await axiosInstance.put(`/post/increaseview/${post.id}`, null, {\r\n                    params: {\r\n                        title: post.title,\r\n                        description: post.description,\r\n                    },\r\n                });\r\n            } catch (error) {\r\n                console.error(\"Error increasing view count\", error);\r\n            }\r\n        };\r\n\r\n        if (post.playlist) {\r\n            fetchPlaylist();\r\n        }\r\n        fetchReplies();\r\n        fetchLikeCount();\r\n        increaseViewCount(); // 컴포넌트 마운트 시 조회수 증가\r\n    }, [post.playlist, post.id]);\r\n\r\n    const handleLike = async () => {\r\n        setIsLiking(true); // 좋아요 상태 시작\r\n        try {\r\n            // 프론트엔드에서 먼저 값을 변경\r\n            const newLikeCount = likeCount + (isLiking ? -1 : 1);\r\n            setLikeCount(newLikeCount);\r\n\r\n            await axiosInstance.post(`/post/like/${post.id}`, {}, {\r\n                params: { userId: userInfo.userId },\r\n            });\r\n\r\n            // 백엔드에서 실제 값을 가져와서 업데이트\r\n            const response = await axiosInstance.get(`/post/like/${post.id}`);\r\n            setLikeCount(response.data);\r\n        } catch (error) {\r\n            console.error(\"Error liking post\", error);\r\n        } finally {\r\n            setIsLiking(false); // 좋아요 상태 종료\r\n        }\r\n    };\r\n\r\n    const handleReplySubmit = async () => {\r\n        if (!newReply.trim()) return;\r\n        setIsSubmitting(true); // 로딩 상태 시작\r\n        try {\r\n            await axiosInstance.post(`/post/reply/${post.id}`, null, {\r\n                params: { userId: userInfo.userId, content: newReply },\r\n            });\r\n            setReplies([...replies, { user: userInfo, content: newReply, createdDate: new Date() }]);\r\n            setNewReply(\"\");\r\n        } catch (error) {\r\n            console.error(\"Error adding reply\", error);\r\n        } finally {\r\n            setIsSubmitting(false); // 로딩 상태 종료\r\n        }\r\n    };\r\n    const handleReplyDelete = async (replyId, currentPostId) => {\r\n        try {\r\n            await axiosInstance.delete(`/post/replydelete/${replyId}`, {\r\n                params: { postId: currentPostId },\r\n            });\r\n            setReplies(replies.filter(reply => reply.id !== replyId));\r\n        } catch (error) {\r\n            console.error(\"Error deleting reply\", error);\r\n        }\r\n    };\r\n    const handleEditClick = () => {\r\n        setIsEditing(true); // 수정 모드 활성화\r\n        setEditedTitle(currentPost.title); // 수정 모드 시작 시 제목 초기화\r\n        setEditedDescription(currentPost.description); // 수정 모드 시작 시 내용 초기화\r\n    };\r\n\r\n    const handleUpdate = async () => {\r\n        setIsUpdating(true);\r\n        try {\r\n            await axiosInstance.put(`/post/update/${post.id}`, null, {\r\n                params: {\r\n                    title: editedTitle,\r\n                    description: editedDescription,\r\n                },\r\n            });\r\n\r\n            setCurrentPost(prevState => ({\r\n                ...prevState,\r\n                title: editedTitle,\r\n                description: editedDescription,\r\n            }));\r\n            \r\n        } catch (error) {\r\n            console.error(\"Error updating post\", error);\r\n        } finally {\r\n            setIsUpdating(false); // 로딩 상태 종료\r\n            setIsEditing(false); // 수정 모드 비활성화\r\n        }\r\n    };\r\n\r\n    const handleDelete = async (e) => {\r\n        e.stopPropagation();\r\n        const confirmDelete = window.confirm(\"정말로 이 게시글을 삭제하시겠습니까?\");\r\n        if (!confirmDelete) {\r\n            return;\r\n        }\r\n        try {\r\n            await axiosInstance.delete(`/post/delete/${post.id}`);\r\n            window.location.reload();\r\n            \r\n            navigate(\"/post\"); // 삭제 후 페이지로 이동\r\n        } catch (error) {\r\n            console.error(\"게시글 삭제 실패:\", error);\r\n        }\r\n    };\r\n\r\n    const handleEditCancel = () => {\r\n        setIsEditing(false); // 수정 모드 비활성화\r\n        setEditedTitle(currentPost.title); // 수정 전 제목으로 복원\r\n        setEditedDescription(currentPost.description); // 수정 전 내용으로 복원\r\n    };\r\n\r\n    return (\r\n        <div className=\"post-detail\">\r\n            <div className=\"post-meta\">\r\n                <div className=\"post-meta-top\">\r\n                    <span>조회수: {currentPost.viewCount}</span>\r\n                    <button className=\"back-button\" onClick={onBack}>뒤로가기</button>\r\n                    <button className=\"like-button\" onClick={handleLike} disabled={isLiking}>\r\n                        {isLiking ? \"좋아요 반영 중...\" : `👍 ${likeCount}`}\r\n                    </button>\r\n                </div>\r\n                <div className=\"post-meta-bottom\">\r\n                    {/* 수정 및 삭제 버튼 추가 */}\r\n                    {userInfo && currentPost.user.userId === userInfo.userId && (\r\n                        <>\r\n                            {isEditing ? (\r\n                                <>\r\n                                    <button className=\"post-meta-bottom-button\" onClick={handleUpdate}>저장</button>\r\n                                    <button className=\"post-meta-bottom-button\" onClick={handleEditCancel}>취소</button>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <button className=\"post-meta-bottom-button\" onClick={handleEditClick} disabled={isUpdating}>\r\n                                        {isUpdating ? \"수정 중...\" : \"수정\"}\r\n                                    </button>\r\n                                    <button className=\"post-meta-bottom-button\" onClick={handleDelete}>삭제</button>\r\n                                </>\r\n                            )}\r\n                        </>\r\n                    )}\r\n                </div>\r\n            </div>\r\n            {isEditing ? (\r\n                <>\r\n                <div className=\"post-meta-edit\">\r\n\r\n                    <input\r\n                        type=\"text\"\r\n                        value={editedTitle}\r\n                        onChange={(e) => setEditedTitle(e.target.value)}\r\n                    />\r\n                    <textarea\r\n                        value={editedDescription}\r\n                        onChange={(e) => setEditedDescription(e.target.value)}\r\n                    />\r\n                </div>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <h2>{currentPost.title}</h2>\r\n                    <p>{currentPost.description}</p>\r\n                </>\r\n            )}\r\n            <div className=\"post-meta-writer\">\r\n                <span>작성일: {new Date(currentPost.createdDate).toLocaleDateString()}</span>\r\n                <span>작성자: {currentPost.user.nickname}</span>\r\n            </div>\r\n\r\n            {!currentPost.isNotice && playlist ? (\r\n                <div className=\"post-playlist-detail\">\r\n                    <h3>플레이리스트 정보</h3>\r\n                    <div className=\"post-playlist-meta\">\r\n                        <img className=\"post-playlist-meta-image\" src={ getImageUrl(playlist.playlistPhoto)} alt=\"Playlist\" />\r\n                        <div className=\"post-playlist-meta-text\">\r\n                            <p>제목: {playlist.playlistTitle}</p>\r\n                            <p>설명: {playlist.playlistComment}</p>\r\n                            <p>작성일: {new Date(playlist.playlistDate).toLocaleDateString()}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"post-playlist-tracks\">\r\n                        {playlist.tracksData.map((track) => (\r\n                            <Music track={track} \r\n                            isPremium={isPremium} />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                spotifyAnnounce ? (\r\n                    <p>Spotify 계졍 연동이 필요합니다.</p>\r\n                ) : (\r\n                    <p></p>\r\n                )\r\n            )}\r\n\r\n            {/* 댓글 창 */}\r\n            <div className=\"comments-section\">\r\n                <h3>댓글</h3>\r\n                <div className=\"comment-input\">\r\n                    <textarea \r\n                        value={newReply} \r\n                        onChange={(e) => setNewReply(e.target.value)}\r\n                        placeholder=\"댓글을 입력하세요...\"\r\n                    />\r\n                    <button onClick={handleReplySubmit} disabled={isSubmitting}>\r\n                        {isSubmitting ? \"댓글 작성 중...\" : \"댓글 작성\"}\r\n                    </button>\r\n                </div>\r\n                <div className=\"post-comments-list\">\r\n                    {replies.length > 0 ? (\r\n                        replies.map((reply, index) => (\r\n                            <div key={index} className=\"post-comment-item\">\r\n                                <div className=\"post-comment-text\">\r\n                                    <span className=\"comment-author\">{reply.user.nickname}:</span>\r\n                                    <span className=\"comment-content\">{reply.content}</span>\r\n                                </div>\r\n                                <div className=\"post-comment-button\">\r\n                                    <div>\r\n                                        {new Date(reply.createdDate).toLocaleDateString()}\r\n                                    </div>\r\n                                    {userInfo && reply.user.userId === userInfo.userId && (\r\n                                        <button onClick={() => handleReplyDelete(reply.id, currentPost.id)}>삭제</button>       \r\n                                    )}                          \r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                    ) : (\r\n                        <p>댓글이 없습니다.</p>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostDetail;","import React, { useState, useEffect } from \"react\";\r\nimport \"../../styles/PostForm.css\";\r\nimport useUserInfo from \"../../hooks/useUserInfo\"; // useUserInfo 훅 임포트\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport { getDefaultImage } from \"../../utils/imageUtils\";\r\n\r\nconst PostForm = ({ onSubmit, onCancel, isNoticeForm }) => {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const userInfo = useUserInfo(); // 사용자 정보 가져오기\r\n    const [playlists, setPlaylists] = useState([]); // 플레이리스트 목록 상태 추가\r\n    const [selectedPlaylist, setSelectedPlaylist] = useState(null); // 플레이리스트 목록 상태 추가\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (!isNoticeForm && !selectedPlaylist) {\r\n            alert(\"플레이리스트를 선택해주세요.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            if (isNoticeForm) {\r\n                const response = await axiosInstance.post(\r\n                    `/post/createnotice?userId=${userInfo.userId}&title=${title}&description=${description}`,\r\n                    {}, // 요청 body는 비워둡니다.\r\n                    {\r\n                        headers: {\r\n                            Authorization: `Bearer ${localStorage.getItem(\"MUSICOVERY_TOKEN\")}`\r\n                        }\r\n                    }\r\n                );\r\n            } else {\r\n                const response = await axiosInstance.post(\r\n                    `/post/create?userId=${userInfo.userId}&title=${title}&description=${description}&playlistId=${selectedPlaylist.playlistId}`,\r\n                    {} // 요청 body는 비워둡니다.\r\n                );\r\n            }\r\n            onSubmit(); // PostBody에서 fetchPosts를 다시 호출하도록 함\r\n        } catch (error) {\r\n            console.error(\"Failed to create post\", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchPlaylists = async () => {\r\n            try {\r\n                const response = await axiosInstance.get(`/playlist/user/${userInfo.userId}`);\r\n                console.log(response);\r\n                setPlaylists(response.data);\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch playlists\", error);\r\n            }\r\n        };\r\n\r\n        if (userInfo && !isNoticeForm) {\r\n            fetchPlaylists();\r\n        }\r\n    }, [userInfo, isNoticeForm]);\r\n\r\n    const onSelectPlaylist = (playlist) => {\r\n        if (selectedPlaylist && selectedPlaylist.playlistId === playlist.playlistId) {\r\n            setSelectedPlaylist(null); // 이미 선택된 아이템을 다시 클릭하면 선택 해제\r\n        } else {\r\n            setSelectedPlaylist(playlist); // 선택된 아이템으로 업데이트\r\n        }\r\n    };\r\n\r\n    const defaultImage = getDefaultImage();\r\n\r\n    return (\r\n        <div className=\"post-form\">\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                    <label>제목</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={title}\r\n                        onChange={(e) => setTitle(e.target.value)}\r\n                        required\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>내용</label>\r\n                    <textarea\r\n                        value={description}\r\n                        onChange={(e) => setDescription(e.target.value)}\r\n                        required\r\n                    ></textarea>\r\n                </div>\r\n                {!isNoticeForm && (\r\n                    <div className=\"form-group\">\r\n                        <label>플레이리스트 선택</label>\r\n                        <div className=\"postform-playlist-list-container\">\r\n                            <div className=\"postform-playlist-list\">\r\n                                {playlists.map((it) => {\r\n                                    // 플레이리스트 이미지가 없을 경우 기본 이미지 사용\r\n                                    const imageUrl = it.playlistPhoto\r\n                                        ? (it.playlistPhoto.startsWith(\"/images/\")\r\n                                            ? `${process.env.REACT_APP_API_URL}${it.playlistPhoto}`\r\n                                            : it.playlistPhoto)\r\n                                        : defaultImage;\r\n\r\n                                    return (\r\n                                        <div\r\n                                            key={it.playlistId}\r\n                                            onClick={() => onSelectPlaylist(it)}\r\n                                            className={`postform-playlist-item ${selectedPlaylist && selectedPlaylist.playlistId === it.playlistId ? 'selected' : ''}`}\r\n                                        >\r\n                                            <img src={imageUrl} alt={it.playlistTitle} />\r\n                                            <div className=\"postform-playlist-info\">\r\n                                                <div>{it.playlistTitle}</div>\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className=\"form-actions\">\r\n                    <button type=\"button\" className=\"postform-cancel-button\" onClick={onCancel}>취소</button>\r\n                    <button type=\"submit\" className=\"postform-submit-button\">작성</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostForm;","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport PostList from \"./PostList\";\r\nimport PostDetail from \"./PostDetail\";\r\nimport PostForm from \"./PostForm\";\r\nimport \"../../styles/PostBody.css\";\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\n\r\nconst PostBody = () => {\r\n    const [posts, setPosts] = useState([]);\r\n    const [noticePosts, setNoticePosts] = useState([]);\r\n    const [selectedPost, setSelectedPost] = useState(null);\r\n    const [isCreating, setIsCreating] = useState(false);\r\n    const [page, setPage] = useState(0);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [sortOption, setSortOption] = useState('latest');\r\n    const [searchKeyword, setSearchKeyword] = useState('');\r\n    const [searchType, setSearchType] = useState('title');\r\n\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        const params = new URLSearchParams(location.search);\r\n        const currentPage = parseInt(params.get('page') || '0', 10);\r\n        const currentSortOption = params.get('sort') || 'latest';\r\n        const currentSearchType = params.get('searchType') || 'title';\r\n        const currentSearchKeyword = params.get('keyword') || '';\r\n\r\n        setPage(currentPage);\r\n        setSortOption(currentSortOption);\r\n        setSearchType(currentSearchType);\r\n        setSearchKeyword(currentSearchKeyword);\r\n\r\n        fetchPosts(currentPage, currentSortOption, currentSearchType, currentSearchKeyword);\r\n    }, [location.search]);\r\n\r\n    const fetchPosts = useCallback(async (currentPage, sort, searchType, keyword) => {\r\n        try {\r\n            setIsLoading(true);\r\n            let url = `/post/list?page=${currentPage}&size=15`;\r\n            if (sort) url += `&sort=${sort}`;\r\n            if (searchType && keyword) url += `&searchType=${searchType}&keyword=${keyword}`;\r\n\r\n            const response = await axiosInstance.get(url);\r\n            setPosts(response.data._embedded?.playlistPostDTOList || []);\r\n            setTotalPages(response.data.page.totalPages);\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch posts\", error);\r\n            setPosts([]);\r\n            setTotalPages(0);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    const updateURL = useCallback(() => {\r\n        const params = new URLSearchParams();\r\n        params.set('page', page.toString());\r\n        params.set('sort', sortOption);\r\n        params.set('searchType', searchType);\r\n        params.set('keyword', searchKeyword);\r\n        navigate(`?${params.toString()}`, { replace: true });\r\n    }, [page, sortOption, searchType, searchKeyword, navigate]);\r\n\r\n    useEffect(() => {\r\n        updateURL();\r\n    }, [page, sortOption, searchType, searchKeyword, updateURL]);\r\n\r\n    const handlePreviousPage = () => {\r\n        if (page > 0) {\r\n            setPage(page - 1);\r\n            scrollToTop();\r\n        }\r\n    };\r\n\r\n    const handleNextPage = () => {\r\n        if (page < totalPages - 1) {\r\n            setPage(page + 1);\r\n            scrollToTop();\r\n        }\r\n    };\r\n\r\n    const handleSelectPost = (post) => {\r\n        setSelectedPost(post);\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setSelectedPost(null);\r\n        setIsCreating(false);\r\n    };\r\n\r\n    const handleSortChange = (newSortOption) => {\r\n        setSortOption(newSortOption);\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSearch = (newSearchType, newSearchKeyword) => {\r\n        setSearchType(newSearchType);\r\n        setSearchKeyword(newSearchKeyword);\r\n        setPage(0);\r\n        fetchPosts(0, sortOption, newSearchType, newSearchKeyword);\r\n    };\r\n\r\n    const scrollToTop = () => {\r\n        window.scrollTo({\r\n            top: 0,\r\n            behavior: 'smooth'\r\n        });\r\n    };\r\n\r\n    if (isCreating) {\r\n        return (\r\n            <PostForm\r\n                onSubmit={() => {\r\n                    setIsCreating(false);\r\n                    fetchPosts(page, sortOption, searchType, searchKeyword);\r\n                }}\r\n                onCancel={handleBack}\r\n                isNoticeForm={false}\r\n            />\r\n        );\r\n    }\r\n\r\n    if (selectedPost) {\r\n        return <PostDetail post={selectedPost} onBack={handleBack} />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"post-body\">\r\n            {isLoading ? (\r\n                <div className=\"loading-spinner\">로딩 중...</div>\r\n            ) : (\r\n                <>\r\n                    <PostList\r\n                        posts={posts}\r\n                        onSelectPost={handleSelectPost}\r\n                        onSortChange={handleSortChange}\r\n                        onSearch={handleSearch}\r\n                        sortOption={sortOption}\r\n                        searchKeyword={searchKeyword}\r\n                        searchType={searchType}\r\n                        isNoticeList={false}\r\n                    />\r\n                    <div className=\"pagination\">\r\n                        <button\r\n                            className=\"page-button\"\r\n                            onClick={handlePreviousPage}\r\n                            disabled={page === 0}\r\n                        >\r\n                            이전\r\n                        </button>\r\n                        <span className=\"page-number\">{page + 1}</span>\r\n                        <button\r\n                            className=\"page-button\"\r\n                            onClick={handleNextPage}\r\n                            disabled={page === totalPages - 1}\r\n                        >\r\n                            다음\r\n                        </button>\r\n                        <button\r\n                            className=\"write-button\"\r\n                            onClick={() => setIsCreating(true)}\r\n                        >\r\n                            작성\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostBody;","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport PostList from \"./PostList\";\r\nimport PostDetail from \"./PostDetail\";\r\nimport PostForm from \"./PostForm\";\r\nimport \"../../styles/PostBody.css\";\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport useUserInfo from \"../../hooks/useUserInfo\"; // useUserInfo 훅 임포트\r\n\r\nconst NoticeBody = () => {\r\n    const [noticePosts, setNoticePosts] = useState([]);\r\n    const [selectedPost, setSelectedPost] = useState(null);\r\n    const [isCreating, setIsCreating] = useState(false);\r\n    const [page, setPage] = useState(0);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [sortOption, setSortOption] = useState('latest');\r\n    const [searchKeyword, setSearchKeyword] = useState('');\r\n    const [searchType, setSearchType] = useState('title');\r\n    const userInfo = useUserInfo(); // 사용자 정보 가져오기\r\n\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        const params = new URLSearchParams(location.search);\r\n        setPage(parseInt(params.get('page') || '0', 10));\r\n        setSortOption(params.get('sort') || 'latest');\r\n        setSearchType(params.get('searchType') || 'title');\r\n        setSearchKeyword(params.get('keyword') || '');\r\n    }, [location.search]);\r\n\r\n    const fetchNoticePosts = useCallback(async () => {\r\n        try {\r\n            setIsLoading(true);\r\n            const response = await axiosInstance.get('/post/notices?page=0&size=15');\r\n            setNoticePosts(response.data._embedded?.playlistPostDTOList || []);\r\n            setTotalPages(response.data.page.totalPages);\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch notice posts\", error);\r\n            setNoticePosts([]);\r\n            setTotalPages(0);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n        console.log(userInfo);\r\n    }, [userInfo]);\r\n\r\n    useEffect(() => {\r\n        fetchNoticePosts();\r\n    }, [page, sortOption, fetchNoticePosts]);\r\n\r\n    const updateURL = useCallback(() => {\r\n        const params = new URLSearchParams();\r\n        params.set('page', page.toString());\r\n        params.set('sort', sortOption);\r\n        params.set('searchType', searchType);\r\n        params.set('keyword', searchKeyword);\r\n        navigate(`?${params.toString()}`, { replace: true });\r\n    }, [page, sortOption, searchType, searchKeyword, navigate]);\r\n\r\n    useEffect(() => {\r\n        updateURL();\r\n    }, [page, sortOption, searchType, searchKeyword, updateURL]);\r\n\r\n    const handlePreviousPage = () => {\r\n        if (page > 0) {\r\n            setPage(page - 1);\r\n            scrollToTop();\r\n        }\r\n    };\r\n\r\n    const handleNextPage = () => {\r\n        if (page < totalPages - 1) {\r\n            setPage(page + 1);\r\n            scrollToTop();\r\n        }\r\n    };\r\n\r\n    const handleSelectPost = (post) => {\r\n        setSelectedPost(post);\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setSelectedPost(null);\r\n        setIsCreating(false);\r\n    };\r\n\r\n    const handleSortChange = (newSortOption) => {\r\n        setSortOption(newSortOption);\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSearch = (newSearchType, newSearchKeyword) => {\r\n        setSearchType(newSearchType);\r\n        setSearchKeyword(newSearchKeyword);\r\n        setPage(0);\r\n    };\r\n\r\n    const scrollToTop = () => {\r\n        window.scrollTo({\r\n            top: 0,\r\n            behavior: 'smooth'\r\n        });\r\n    };\r\n\r\n    if (isCreating) {\r\n        return (\r\n            <PostForm\r\n                onSubmit={() => {\r\n                    setIsCreating(false);\r\n                    fetchNoticePosts();\r\n                }}\r\n                onCancel={handleBack}\r\n                isNoticeForm={true} // 공지 작성 폼임을 나타내는 prop 추가\r\n            />\r\n        );\r\n    }\r\n\r\n    if (selectedPost) {\r\n        return <PostDetail post={selectedPost} onBack={handleBack} />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"post-body\">\r\n            {isLoading ? (\r\n                <div className=\"loading-spinner\">로딩 중...</div>\r\n            ) : (\r\n                <>\r\n                    <PostList\r\n                        posts={noticePosts}\r\n                        onSelectPost={handleSelectPost}\r\n                        onSortChange={handleSortChange}\r\n                        onSearch={handleSearch}\r\n                        sortOption={sortOption}\r\n                        searchKeyword={searchKeyword}\r\n                        searchType={searchType}\r\n                        isNoticeList={true}\r\n                    />\r\n                    <div className=\"pagination\">\r\n                        <button\r\n                            className=\"page-button\"\r\n                            onClick={handlePreviousPage}\r\n                            disabled={page === 0}\r\n                        >\r\n                            이전\r\n                        </button>\r\n                        <span className=\"page-number\">{page + 1}</span>\r\n                        <button\r\n                            className=\"page-button\"\r\n                            onClick={handleNextPage}\r\n                            disabled={page === totalPages - 1}\r\n                        >\r\n                            다음\r\n                        </button>\r\n                        {userInfo && userInfo.admin && (\r\n                            <button\r\n                                className=\"write-button\"\r\n                                onClick={() => setIsCreating(true)}\r\n                            >\r\n                                작성\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NoticeBody;","import React, { useState } from \"react\";\r\nimport Header from \"../components/common/Header\";\r\nimport SocialHeader from \"../components/common/SocialHeader\";\r\nimport PostBody from \"../components/post/PostBody\";\r\nimport NoticeBody from \"../components/post/NoticeBody\";\r\nimport CustomerSupport from \"../components/social/CustomerSupport\";\r\nimport SidebarLayout from \"../components/common/SidebarLayout\";\r\nimport \"../styles/PostPage.css\";\r\n\r\nconst PostPage = () => {\r\n    const [content, setContent] = useState('post');\r\n\r\n    const handleContentChange = (contentType) => {\r\n        setContent(contentType);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"post-page\">\r\n                <Header />\r\n                <SidebarLayout>\r\n                    <SocialHeader onContentChange={handleContentChange} />\r\n                    <div className=\"post-list-container\">\r\n                        {content === 'post' && <PostBody />}\r\n                        {content === 'notice' && <NoticeBody />}\r\n                        {content === 'customerSupport' && <CustomerSupport />}\r\n                    </div>\r\n                </SidebarLayout>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostPage;","import React, { useState, useRef, useCallback, useContext } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport \"../../styles/Music.css\";\r\nimport useUserInfo from \"../../hooks/useUserInfo\";\r\nimport { getImageUrl } from \"../../utils/imageUtils\";\r\nimport { TrackContext } from '../../context/TrackContext';\r\n\r\n// PlaylistItem 컴포넌트 분리 및 메모이제이션\r\nconst PlaylistItem = React.memo(({ playlist, isChecked, onCheck }) => (\r\n    <div className=\"playlist-modal-item\">\r\n        <input\r\n            type=\"checkbox\"\r\n            id={`playlist-${playlist.playlistId}`}\r\n            checked={isChecked}\r\n            onChange={() => onCheck(playlist.playlistId)}\r\n        />\r\n        <label htmlFor={`playlist-${playlist.playlistId}`} className=\"playlist-modal-label\">\r\n            <div className=\"playlist-modal-image-container\">\r\n                <img \r\n                    src={getImageUrl(playlist.playlistPhoto)} \r\n                    alt={playlist.playlistTitle} \r\n                    className=\"playlist-modal-image\" \r\n                />\r\n            </div>\r\n            <span className=\"playlist-modal-name\">{playlist.playlistTitle}</span>\r\n        </label>\r\n    </div>\r\n));\r\n\r\n// PlaylistModal 컴포넌트 분리 및 메모이제이션\r\nconst PlaylistModal = React.memo(({ playlists, selectedPlaylists, loading, onCheck, onClose, onAdd }) => (\r\n    <div className=\"playlist-modal-overlay\" onClick={onClose}>\r\n        <div className=\"playlist-modal\" onClick={(e) => e.stopPropagation()}>\r\n            <div className=\"playlist-modal-header\">\r\n                <h3>플레이리스트에 추가</h3>\r\n                <button className=\"playlist-modal-close\" onClick={onClose}>&times;</button>\r\n            </div>\r\n            <div className=\"playlist-modal-body\">\r\n                {loading ? (\r\n                    <p>플레이리스트를 불러오는 중...</p>\r\n                ) : playlists.length === 0 ? (\r\n                    <p>사용 가능한 플레이리스트가 없습니다.</p>\r\n                ) : (\r\n                    <div className=\"playlist-modal-list\">\r\n                        {playlists.map(playlist => (\r\n                            <PlaylistItem\r\n                                key={playlist.playlistId}\r\n                                playlist={playlist}\r\n                                isChecked={selectedPlaylists.includes(playlist.playlistId)}\r\n                                onCheck={onCheck}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <div className=\"playlist-modal-footer\">\r\n                <button \r\n                    className=\"add-to-playlist-button\" \r\n                    onClick={onAdd}\r\n                    disabled={selectedPlaylists.length === 0 || loading}\r\n                >\r\n                    플레이리스트에 추가\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n));\r\n\r\nconst Music = ({ track, isPremium }) => {\r\n    const [tooltipStyle, setTooltipStyle] = useState({});\r\n    const [showPlaylistModal, setShowPlaylistModal] = useState(false);\r\n    const [playlists, setPlaylists] = useState([]);\r\n    const [selectedPlaylists, setSelectedPlaylists] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const { addTrackToList, setIsPlaying, deviceReady } = useContext(TrackContext);\r\n    \r\n    const playlistsLoadedRef = useRef(false);\r\n    const userInfo = useUserInfo();\r\n    \r\n    const handleMouseEnter = (e) => {\r\n        const rect = e.currentTarget.getBoundingClientRect();\r\n        setTooltipStyle({\r\n            top: `${rect.top - 10}px`,\r\n            left: `${rect.left + rect.width / 2}px`,\r\n        });\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setTooltipStyle({});\r\n    };\r\n\r\n    const fetchPlaylists = async (userId) => {\r\n        if (!userId || playlistsLoadedRef.current) return;\r\n        \r\n        setLoading(true);\r\n        try {\r\n            const response = await axiosInstance.get(`/playlist/user/${userId}`);\r\n            setPlaylists(response.data || []);\r\n            playlistsLoadedRef.current = true;\r\n        } catch (error) {\r\n            console.error(\"플레이리스트를 불러오는 데 실패했습니다:\", error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleAddToPlaylist = () => {\r\n        setShowPlaylistModal(true);\r\n        if (userInfo && !playlistsLoadedRef.current) {\r\n            fetchPlaylists(userInfo.userId);\r\n        }\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setShowPlaylistModal(false);\r\n        setSelectedPlaylists([]);\r\n    };\r\n\r\n    const handlePlaylistCheck = useCallback((playlistId) => {\r\n        setSelectedPlaylists(prevSelected => {\r\n            if (prevSelected.includes(playlistId)) {\r\n                return prevSelected.filter(id => id !== playlistId);\r\n            } else {\r\n                return [...prevSelected, playlistId];\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const handleAddTracksToPlaylists = async () => {\r\n        if (selectedPlaylists.length === 0) {\r\n            alert(\"플레이리스트를 선택해주세요.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const promises = selectedPlaylists.map(playlistId => \r\n                axiosInstance.post(`/api/spotify/playlist/${playlistId}/track`, null, {\r\n                    params: { trackId: track.id }\r\n                })\r\n            );\r\n            \r\n            await Promise.all(promises);\r\n            alert(\"선택한 플레이리스트에 트랙이 추가되었습니다.\");\r\n            handleCloseModal();\r\n        } catch (error) {\r\n            console.error(\"플레이리스트에 트랙 추가 실패:\", error);\r\n            alert(\"플레이리스트에 트랙 추가 중 오류가 발생했습니다.\");\r\n        }\r\n    };\r\n\r\n    const handlePlayClick = async (track) => {\r\n        if (isPremium) {\r\n            try {\r\n                addTrackToList(track); // 트랙을 리스트에 추가\r\n                if (deviceReady) {\r\n                    setIsPlaying(true);\r\n                } else {\r\n                    if(!deviceReady){\r\n                        setTimeout(() => {\r\n                            setIsPlaying(true);\r\n                        }, 1000);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error(\"트랙 재생 중 오류:\", error);\r\n                if (error.response?.status === 403) {\r\n                    // 403 오류 발생 시 링크로 이동\r\n                    window.open(track.external_urls.spotify, '_blank');\r\n                    return;\r\n                } else if (error.response?.status === 404) {\r\n                    alert('Spotify 플레이어를 초기화 중입니다. 잠시 후에 다시 시도해주세요.');\r\n                } else {\r\n                    alert('트랙을 재생할 수 없습니다. 다시 시도해주세요.');\r\n                }\r\n            }\r\n        } else {\r\n            window.open(track.external_urls.spotify, '_blank');\r\n        }\r\n    };\r\n\r\n    return (\r\n        // 렌더링 부분은 동일하게 유지\r\n        track && track.album && track.album.images && track.album.images[0] ? (\r\n            <div key={track.id} className=\"track-item\" onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\r\n                <img className=\"track-album-image-music\" src={track.album.images[0].url} alt={track.name} />\r\n                <div className=\"track-info\">\r\n                    <h4>{track.name}</h4>\r\n                    <p>{track.artists.map((artist) => artist.name).join(\", \")}</p>\r\n                    <div className=\"tooltip\" style={tooltipStyle}>\r\n                        <h4>{track.name}</h4>\r\n                        <p>{track.artists.map((artist) => artist.name).join(\", \")}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"track-play-button-container\">\r\n                    <button\r\n                        onClick={() => handlePlayClick(track)}\r\n                        className={isPremium ? \"premium-play\" : \"spotify-link\"}\r\n                    >\r\n                        {isPremium ? \"▶\" : \"LINK\"}\r\n                    </button>\r\n                    <button className=\"add-track-to-playlist-button\" onClick={handleAddToPlaylist}>\r\n                        ➕\r\n                    </button>\r\n                </div>\r\n\r\n                {showPlaylistModal && ReactDOM.createPortal(\r\n                    <PlaylistModal \r\n                        playlists={playlists}\r\n                        selectedPlaylists={selectedPlaylists}\r\n                        loading={loading}\r\n                        onCheck={handlePlaylistCheck}\r\n                        onClose={handleCloseModal}\r\n                        onAdd={handleAddTracksToPlaylists}\r\n                    />,\r\n                    document.body\r\n                )}\r\n            </div>\r\n        ) : null\r\n    );\r\n};\r\n\r\nexport default Music;","import React, { useState, useEffect } from \"react\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport useUserInfo from \"../../hooks/useUserInfo\";\r\nimport \"../../styles/FriendsList.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst FriendsList = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const [friends, setFriends] = useState([]);\r\n    const [friendRequests, setFriendRequests] = useState([]);\r\n    const [pendingRequests, setPendingRequests] = useState([]);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [searchKeyword, setSearchKeyword] = useState(\"\");\r\n    const [searchResults, setSearchResults] = useState([]);\r\n    const [activeTab, setActiveTab] = useState(\"search\"); // 'search', 'pending', 'requests'\r\n    const userInfo = useUserInfo();\r\n\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n            fetchFriends();\r\n            fetchFriendRequests();\r\n            fetchPendingRequests();\r\n        }\r\n    }, [userInfo]);\r\n\r\n    const fetchFriends = async () => {\r\n        try {\r\n            const response = await axiosInstance.get(`/friends/list?userId=${userInfo.id}`);\r\n            setFriends(response.data);\r\n        } catch (error) {\r\n            console.error(\"친구 목록을 가져오는 데 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const fetchFriendRequests = async () => {\r\n        try {\r\n            const response = await axiosInstance.get(`/friends/friendRequests?friendId=${userInfo.id}`);\r\n            setFriendRequests(response.data);\r\n        } catch (error) {\r\n            console.error(\"친구 요청 목록을 가져오는 데 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const fetchPendingRequests = async () => {\r\n        try {\r\n            const response = await axiosInstance.get(`/friends/pendingRequests?userId=${userInfo.id}`);\r\n            setPendingRequests(response.data);\r\n        } catch (error) {\r\n            console.error(\"내가 요청한 친구 목록을 가져오는 데 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const handleSearch = async () => {\r\n        try {\r\n            const response = await axiosInstance.get(`/friends/search?keyword=${searchKeyword}`);\r\n            setSearchResults(response.data);\r\n        } catch (error) {\r\n            console.error(\"사용자 검색에 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const handleAddFriend = async (friendId) => {\r\n        try {\r\n            await axiosInstance.post(\"/friends/add\", { userId: userInfo.id, friendId });\r\n            fetchFriends();\r\n            fetchPendingRequests();\r\n        } catch (error) {\r\n            console.error(\"친구 추가에 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const handleAcceptFriendRequest = async (friendRequestId) => {\r\n        try {\r\n            await axiosInstance.post(\"/friends/accept\", null, { params: { friendRequestId } });\r\n            fetchFriends();\r\n            fetchFriendRequests();\r\n        } catch (error) {\r\n            console.error(\"친구 요청 수락에 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const handleDeleteFriend = async (friendId, event) => {\r\n        event.stopPropagation(); // 이벤트 버블링 막기\r\n        try {\r\n            await axiosInstance.delete(\"/friends/delete\", { params: { userId: userInfo.id, friendId } });\r\n            fetchFriends();\r\n        } catch (error) {\r\n            console.error(\"친구 삭제에 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const isFriendOrRequested = (userId) => {\r\n        return friends.some(friend => friend.friend.id === userId) || \r\n               friendRequests.some(request => request.user.id === userId) ||\r\n               pendingRequests.some(request => request.friend.id === userId);\r\n    };\r\n\r\n    const handleFriendClick = (friend) => {\r\n        navigate(\"/playlistPage\", { state: { friendInfo: friend } });\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"friends-list-container\">\r\n                <h2>친구 목록</h2>\r\n                <button onClick={() => setShowModal(true)} className=\"add-friend-button\">친구 추가</button>\r\n                <div className=\"friends-list\">\r\n                    {friends.map((friend) => (\r\n                        <div key={friend.id} className=\"friend-item\" onClick={() => handleFriendClick(friend.friend.id === userInfo.id ? friend.user : friend.friend)}>\r\n                            <p>\r\n                                <strong>친구 별명 :</strong> {friend.friend.id === userInfo.id ? friend.user.nickname : friend.friend.nickname}\r\n                            </p>\r\n                            <button className=\"friend-delete-button\" onClick={(event) => handleDeleteFriend(friend.friend.id, event)}>❌</button>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {showModal && (\r\n                <div className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        <span className=\"close\" onClick={() => setShowModal(false)}>&times;</span>\r\n                        <div className=\"modal-tabs\">\r\n                            <button \r\n                                className={`modal-tab-button ${activeTab === \"search\" ? \"active\" : \"\"}`}\r\n                                onClick={() => setActiveTab(\"search\")}\r\n                            >\r\n                                친구 검색\r\n                            </button>\r\n                            <button \r\n                                className={`modal-tab-button ${activeTab === \"pending\" ? \"active\" : \"\"}`}\r\n                                onClick={() => setActiveTab(\"pending\")}\r\n                            >\r\n                                요청한 목록\r\n                            </button>\r\n                            <button \r\n                                className={`modal-tab-button ${activeTab === \"requests\" ? \"active\" : \"\"}`}\r\n                                onClick={() => setActiveTab(\"requests\")}\r\n                            >\r\n                                받은 친구 요청\r\n                            </button>\r\n                        </div>\r\n\r\n                        {activeTab === \"search\" && (\r\n                            <div className=\"friendlist-search-tab\">\r\n                                <h2>친구 추가</h2>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"검색 (ID, 이메일, 닉네임)\"\r\n                                    value={searchKeyword}\r\n                                    onChange={(e) => setSearchKeyword(e.target.value)}\r\n                                />\r\n                                <button onClick={handleSearch}>검색</button>\r\n                                <div className=\"search-results\">\r\n                                    {searchResults.map((user) => (\r\n                                        <div key={user.id} className=\"search-result-item\">\r\n                                            <p>\r\n                                                <strong>ID:</strong> {user.id}\r\n                                            </p>\r\n                                            <p>\r\n                                                <strong>이메일:</strong> {user.email}\r\n                                            </p>\r\n                                            <p>\r\n                                                <strong>닉네임:</strong> {user.nickname}\r\n                                            </p>\r\n                                            <button \r\n                                                onClick={() => handleAddFriend(user.id)} \r\n                                                disabled={isFriendOrRequested(user.id)}\r\n                                            >\r\n                                                {isFriendOrRequested(user.id) ? \"요청됨\" : \"친구 추가\"}\r\n                                            </button>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {activeTab === \"pending\" && (\r\n                            <div className=\"friendlist-pending-tab\">\r\n                                <h2>요청한 목록</h2>\r\n                                <div className=\"pending-requests-list\">\r\n                                    {pendingRequests.length === 0 ? (\r\n                                        <p>요청한 목록이 없습니다.</p>\r\n                                    ) : (\r\n                                        pendingRequests.map((request) => (\r\n                                            console.log(request),\r\n                                            <div key={request.id} className=\"pending-request-item\">\r\n                                                <p>\r\n                                                    <strong>요청한 사용자 ID:</strong> {request.friend.nickname}\r\n                                                </p>\r\n                                            </div>\r\n                                        ))\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {activeTab === \"requests\" && (\r\n                            <div className=\"friendlist-requests-tab\">\r\n                                <h2>받은 친구 요청</h2>\r\n                                <div className=\"friend-requests-list\">\r\n                                    {friendRequests.length === 0 ? (\r\n                                        <p>받은 요청이 없습니다.</p>\r\n                                    ) : (\r\n                                        \r\n                                        friendRequests.map((request) => (\r\n                                            console.log(request),\r\n                                            <div key={request.id} className=\"friend-request-item\">\r\n                                                \r\n                                                <p>\r\n                                                    <strong>요청한 사용자:</strong> {request.user.nickname}\r\n                                                    <button className=\"accept-button\" onClick={() => handleAcceptFriendRequest(request.id)}>✅</button>\r\n                                                </p>\r\n                                            </div>\r\n                                        ))\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FriendsList;","import React from \"react\";\r\nimport MusicSearch from \"../music/MusicSearch\";\r\nimport \"../../styles/SidebarLayout.css\";\r\nimport FriendsList from \"../social/FriendsList\";\r\n\r\nconst SidebarLayout = ({ children }) => {\r\n    return (\r\n        <div className=\"sidebar-layout-layout\">\r\n            <div className=\"sidebar-layout-sidebar\">\r\n                <MusicSearch onSelectTrack={()=>{}}/>\r\n                <FriendsList />\r\n            </div>\r\n            <div className=\"sidebar-layout-main-content\">\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SidebarLayout;","/**\r\n * tracks 데이터를 파싱하고 변환하는 함수\r\n * @param {string|object} tracks - tracks 데이터 (문자열 또는 객체)\r\n * @returns {Array} - 변환된 track 리스트\r\n */\r\nexport const parseTracks = (tracks) => {\r\n    // tracks가 문자열이면 JSON으로 파싱\r\n    let parsedTracks = typeof tracks === \"string\" ? JSON.parse(tracks) : tracks;\r\n\r\n    // tracks.items에서 track 정보만 추출\r\n    const trackList = parsedTracks.items.map(item => ({\r\n        id: item.track.id, // track.id 추가\r\n        ...item.track, // track 객체 전체 추가\r\n    }));\r\n\r\n    return trackList;\r\n};","import axios from 'axios';\r\n\r\nexport const transferPlayback = async (deviceId) => {\r\n    try {\r\n        const url = 'https://api.spotify.com/v1/me/player';\r\n        await axios.put(\r\n            url,\r\n            {\r\n                device_ids: [deviceId],\r\n                play: true\r\n            },\r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n                }\r\n            }\r\n        );\r\n    } catch (error) {\r\n        console.error('Failed to transfer playback:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const play = async ({ spotify_uri, deviceId, position = 0 }) => {\r\n    try {\r\n        const url = `https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`;\r\n        \r\n        await axios.put(\r\n            url,\r\n            {\r\n                uris: [spotify_uri],\r\n                position_ms: position\r\n            },\r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n                }\r\n            }\r\n        );\r\n    } catch (error) {\r\n        console.error('Failed to play track:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const pause = async () => {\r\n    try {\r\n        await axios.put('https://api.spotify.com/v1/me/player/pause', null, {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error('Failed to pause track:', error);\r\n        throw error;\r\n    }\r\n};","import { useState, useEffect } from \"react\";\r\nimport axiosInstance from \"../api/axiosInstance\";\r\nimport { transferPlayback } from \"../components/music/spotifyPlayer\";\r\n\r\nconst useMusicSearch = () => {\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [results, setResults] = useState([]);\r\n    const [audioPlayer, setAudioPlayer] = useState(new Audio());\r\n    const [isPremium, setIsPremium] = useState(false);\r\n    const [deviceId, setDeviceId] = useState(null);\r\n\r\n    // Premium 상태 확인\r\n    useEffect(() => {\r\n        const checkPremiumStatus = async () => {\r\n            try {\r\n                const response = await axiosInstance.get('/api/spotify/userInfo');\r\n                setIsPremium(response.data.product === 'premium');\r\n            } catch (error) {\r\n                //console.error(\"Failed to check premium status\", error);\r\n            }\r\n        };\r\n        checkPremiumStatus();\r\n    }, []);\r\n\r\n    // 디바이스 ID 설정\r\n    useEffect(() => {\r\n        const fetchDeviceId = async () => {\r\n            try {\r\n                const response = await axiosInstance.get('/music/devices', {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n                    }\r\n                });\r\n                const devices = response.data.devices;\r\n                if (devices.length > 0) {\r\n                    setDeviceId(devices[0].id);\r\n                    // 브라우저를 활성 디바이스로 설정\r\n                    await transferPlayback(devices[0].id);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch devices\", error);\r\n            }\r\n        };\r\n        fetchDeviceId();\r\n    }, []);\r\n\r\n    const handleSearch = async (e) => {\r\n        try {\r\n            const response = await axiosInstance.get(`/api/spotify/search?keyword=${keyword}&type=track`);\r\n            const filteredResults = response.data.tracks.items.filter(\r\n                (track) => track.is_playable\r\n            );\r\n            setResults(filteredResults);\r\n        } catch (error) {\r\n            console.error(\"Failed to search music\", error);\r\n            setResults([]);\r\n        }\r\n    };\r\n\r\n    return {\r\n        keyword,\r\n        setKeyword,\r\n        results,\r\n        handleSearch,\r\n        isPremium,\r\n        deviceId,\r\n    };\r\n};\r\n\r\nexport default useMusicSearch;","const defaultImage = `${process.env.REACT_APP_API_URL}/images/default.png`;\r\n\r\nexport const getImageUrl = (playlistPhoto) => {\r\n    if (!playlistPhoto) {\r\n        return defaultImage;\r\n    }\r\n    return playlistPhoto.startsWith(\"/images/\") \r\n        ? `${process.env.REACT_APP_API_URL}${playlistPhoto}` \r\n        : playlistPhoto;\r\n};\r\n\r\nexport const getDefaultImage = () => {\r\n    return defaultImage;\r\n};","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../../styles/Button.css\";\r\n\r\nconst Button = ({ text, link, color, onClick = () => {} }) => {\r\n\r\n    return (\r\n        <Link to={link}  className={`button ${color ? 'custom-color' : ''}`} onClick={onClick}>\r\n            {text}\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default Button;","import React, { useState, useEffect } from \"react\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport useUserInfo from \"../../hooks/useUserInfo\";\r\nimport \"../../styles/CustomerSupport.css\";\r\n\r\nconst CustomerSupport = () => {\r\n    const [question, setQuestion] = useState(\"\");\r\n    const [inquiries, setInquiries] = useState([]);\r\n    const [expandedInquiries, setExpandedInquiries] = useState({}); // 답변 표시 상태 관리\r\n    const userInfo = useUserInfo();\r\n\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n            fetchInquiries();\r\n        }\r\n    }, [userInfo]);\r\n\r\n    const fetchInquiries = async () => {\r\n        try {\r\n            const response = await axiosInstance.get(`/customersupport/inquiries?userId=${userInfo.id}`);\r\n            setInquiries(response.data);\r\n        } catch (error) {\r\n            console.error(\"문의사항 목록을 가져오는 데 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            if (!userInfo) {\r\n                alert(\"로그인이 필요합니다.\");\r\n                return;\r\n            }\r\n\r\n            const data = {\r\n                userId: userInfo.id,\r\n                question: question,\r\n            };\r\n\r\n            const response = await axiosInstance.post(\"/customersupport/inquiry\", data);\r\n            console.log(\"문의사항 제출 성공:\", response.data);\r\n            alert(\"문의사항이 정상적으로 제출되었습니다.\");\r\n            setQuestion(\"\");\r\n            fetchInquiries(); // 문의사항 제출 후 목록 갱신\r\n        } catch (error) {\r\n            console.error(\"문의사항 제출 실패:\", error);\r\n            alert(\"문의사항 제출에 실패했습니다.\");\r\n        }\r\n    };\r\n\r\n    // 문의사항 클릭 이벤트 처리\r\n    const toggleResponse = (inquiryId) => {\r\n        setExpandedInquiries(prev => ({\r\n            ...prev,\r\n            [inquiryId]: !prev[inquiryId]\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <div className=\"customer-support-container\">\r\n            <h1>문의사항</h1>\r\n            <form onSubmit={handleSubmit} className=\"customer-support-form\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"question\">문의 내용:</label>\r\n                    <textarea\r\n                        id=\"question\"\r\n                        value={question}\r\n                        onChange={(e) => setQuestion(e.target.value)}\r\n                        rows=\"5\"\r\n                        cols=\"50\"\r\n                        required\r\n                    />\r\n                </div>\r\n                <button type=\"submit\" className=\"submit-button\">문의사항 제출</button>\r\n            </form>\r\n\r\n            <div className=\"inquiry-list-container\">\r\n                <h2>내 문의사항 목록</h2>\r\n                <div className=\"inquiry-list\">\r\n                    {inquiries.map((inquiry) => (\r\n                        <div key={inquiry.id} className=\"inquiry-item\">\r\n                            <div \r\n                                className=\"inquiry-item-content\"\r\n                                onClick={() => toggleResponse(inquiry.id)}\r\n                                style={{ cursor: 'pointer' }}\r\n                            >\r\n                                <div className=\"inquiry-item-content-item\"><strong>문의 내용:</strong> {inquiry.question}</div>\r\n                                <div className=\"inquiry-item-content-item\"><strong>작성일:</strong> {new Date(inquiry.createdAt).toLocaleString()}</div>\r\n                                {inquiry.response ? (\r\n                                    <div className=\"inquiry-item-toggle-hint\">\r\n                                        {expandedInquiries[inquiry.id] ? '▲ 답변 숨기기' : '▼ 답변 보기'}\r\n                                    </div>\r\n                                ) : (\r\n                                    <div className=\"inquiry-item-toggle-hint\">답변 대기 중</div>\r\n                                )}\r\n                            </div>\r\n                            {inquiry.response && expandedInquiries[inquiry.id] && (\r\n                                <div className=\"inquiry-item-content-response\">\r\n                                    <p><strong>답변:</strong> {typeof inquiry.response === \"string\" ? JSON.parse(inquiry.response).response : inquiry.response}</p>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CustomerSupport;"],"names":["_ref","onSelectTrack","keyword","setKeyword","results","handleSearch","isPremium","useMusicSearch","hasSearched","setHasSearched","useState","_jsxs","className","children","onSubmit","e","preventDefault","_jsx","type","value","onChange","target","placeholder","length","map","track","index","onClick","Music","id","onContentChange","Button","text","color","post","onSelectPost","navigate","useNavigate","isNotice","title","user","nickname","Date","createdDate","toLocaleDateString","viewCount","state","reportedPost","handleReportClick","posts","onSortChange","onSearch","sortOption","searchKeyword","searchType","isNoticeList","localSearchKeyword","setLocalSearchKeyword","localSearchType","setLocalSearchType","newSortOption","PostItem","onBack","playlist","setPlaylist","likeCount","setLikeCount","replies","setReplies","newReply","setNewReply","isSubmitting","setIsSubmitting","isLiking","setIsLiking","isEditing","setIsEditing","isUpdating","setIsUpdating","editedTitle","setEditedTitle","editedDescription","setEditedDescription","description","currentPost","setCurrentPost","spotifyAnnounce","setSpotifyAnnounce","userInfo","useUserInfo","useEffect","console","log","async","response","axiosInstance","get","playlistId","trackList","parseTracks","data","tracks","tracksData","playlistPhoto","getImageUrl","error","fetchPlaylist","fetchReplies","fetchLikeCount","put","params","increaseViewCount","userId","disabled","_Fragment","prevState","handleEditCancel","handleEditClick","stopPropagation","window","confirm","delete","location","reload","src","alt","playlistTitle","playlistComment","playlistDate","trim","content","reply","replyId","currentPostId","postId","filter","handleReplyDelete","onCancel","isNoticeForm","setTitle","setDescription","playlists","setPlaylists","selectedPlaylist","setSelectedPlaylist","fetchPlaylists","defaultImage","getDefaultImage","headers","Authorization","localStorage","getItem","alert","required","it","imageUrl","startsWith","onSelectPlaylist","PostBody","setPosts","noticePosts","setNoticePosts","selectedPost","setSelectedPost","isCreating","setIsCreating","page","setPage","totalPages","setTotalPages","isLoading","setIsLoading","setSortOption","setSearchKeyword","setSearchType","useLocation","URLSearchParams","search","currentPage","parseInt","currentSortOption","currentSearchType","currentSearchKeyword","fetchPosts","useCallback","sort","_response$data$_embed","url","_embedded","playlistPostDTOList","updateURL","set","toString","replace","handleBack","scrollToTop","scrollTo","top","behavior","PostForm","PostDetail","PostList","newSearchType","newSearchKeyword","handlePreviousPage","handleNextPage","NoticeBody","fetchNoticePosts","admin","PostPage","setContent","Header","SidebarLayout","SocialHeader","contentType","CustomerSupport","PlaylistItem","React","isChecked","onCheck","checked","htmlFor","PlaylistModal","_ref2","selectedPlaylists","loading","onClose","onAdd","includes","_ref3","tooltipStyle","setTooltipStyle","showPlaylistModal","setShowPlaylistModal","setSelectedPlaylists","setLoading","addTrackToList","setIsPlaying","deviceReady","useContext","TrackContext","playlistsLoadedRef","useRef","handleCloseModal","handlePlaylistCheck","prevSelected","album","images","onMouseEnter","rect","currentTarget","getBoundingClientRect","left","width","onMouseLeave","handleMouseLeave","name","artists","artist","join","style","setTimeout","_error$response","_error$response2","status","open","external_urls","spotify","handlePlayClick","handleAddToPlaylist","current","ReactDOM","promises","trackId","Promise","all","document","body","FriendsList","friends","setFriends","friendRequests","setFriendRequests","pendingRequests","setPendingRequests","showModal","setShowModal","searchResults","setSearchResults","activeTab","setActiveTab","fetchFriends","fetchFriendRequests","fetchPendingRequests","isFriendOrRequested","some","friend","request","friendInfo","handleFriendClick","event","friendId","handleDeleteFriend","email","handleAddFriend","friendRequestId","handleAcceptFriendRequest","MusicSearch","JSON","parse","items","item","setResults","audioPlayer","setAudioPlayer","Audio","setIsPremium","deviceId","setDeviceId","product","checkPremiumStatus","devices","axios","device_ids","play","transferPlayback","fetchDeviceId","filteredResults","is_playable","link","Link","to","question","setQuestion","inquiries","setInquiries","expandedInquiries","setExpandedInquiries","fetchInquiries","rows","cols","inquiry","toggleResponse","inquiryId","prev","cursor","createdAt","toLocaleString"],"sourceRoot":""}