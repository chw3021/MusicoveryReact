{"version":3,"file":"static/js/864.c2364517.chunk.js","mappings":"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","sources":["components/music/MusicSearch.js","components/music/Music.js","utils/trackUtils.js","components/music/spotifyPlayer.js","hooks/useMusicSearch.js","utils/imageUtils.js","components/common/Button.js","components/playlist/PlaylistDetail.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../../styles/MusicSearch.css\";\r\nimport Music from \"./Music\";\r\nimport useMusicSearch from \"../../hooks/useMusicSearch\";\r\n\r\nconst MusicSearch = ({ onSelectTrack }) => {\r\n    const {\r\n        keyword,\r\n        setKeyword,\r\n        results,\r\n        handleSearch,\r\n        isPremium,\r\n    } = useMusicSearch();\r\n\r\n    const [hasSearched, setHasSearched] = useState(false); // 검색 실행 여부 상태 추가\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        handleSearch();\r\n        setHasSearched(true); // 검색 실행 후 상태 업데이트\r\n    };\r\n\r\n    return (\r\n        <div className=\"music-search\">\r\n            {isPremium}\r\n            <form onSubmit={handleSubmit}> {/* 폼 제출 핸들러 변경 */}\r\n                <input\r\n                    className=\"music-search-input\"\r\n                    type=\"text\"\r\n                    value={keyword}\r\n                    onChange={(e) => setKeyword(e.target.value)}\r\n                    placeholder=\"음악 검색\"\r\n                />\r\n                <button type=\"submit\">🔎</button>\r\n            </form>\r\n            <div className=\"music-search-results\">\r\n                {!hasSearched && results.length === 0 ? ( // 검색 실행 여부와 결과 유무에 따라 조건부 렌더링\r\n                    <div className=\"music-search-placeholder\">검색어 입력...</div>\r\n                ) : (\r\n                    results.map((track, index) => (\r\n                        <div key={track.id} onClick={() => onSelectTrack(track)}>\r\n                            <Music \r\n                                track={track}\r\n                                isPremium={isPremium} \r\n                            />\r\n                        </div>\r\n                    ))\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MusicSearch;","import React, { useState, useRef, useCallback, useContext } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport \"../../styles/Music.css\";\r\nimport useUserInfo from \"../../hooks/useUserInfo\";\r\nimport { getImageUrl } from \"../../utils/imageUtils\";\r\nimport { TrackContext } from '../../context/TrackContext';\r\n\r\n// PlaylistItem 컴포넌트 분리 및 메모이제이션\r\nconst PlaylistItem = React.memo(({ playlist, isChecked, onCheck }) => (\r\n    <div className=\"playlist-modal-item\">\r\n        <input\r\n            type=\"checkbox\"\r\n            id={`playlist-${playlist.playlistId}`}\r\n            checked={isChecked}\r\n            onChange={() => onCheck(playlist.playlistId)}\r\n        />\r\n        <label htmlFor={`playlist-${playlist.playlistId}`} className=\"playlist-modal-label\">\r\n            <div className=\"playlist-modal-image-container\">\r\n                <img \r\n                    src={getImageUrl(playlist.playlistPhoto)} \r\n                    alt={playlist.playlistTitle} \r\n                    className=\"playlist-modal-image\" \r\n                />\r\n            </div>\r\n            <span className=\"playlist-modal-name\">{playlist.playlistTitle}</span>\r\n        </label>\r\n    </div>\r\n));\r\n\r\n// PlaylistModal 컴포넌트 분리 및 메모이제이션\r\nconst PlaylistModal = React.memo(({ playlists, selectedPlaylists, loading, onCheck, onClose, onAdd }) => (\r\n    <div className=\"playlist-modal-overlay\" onClick={onClose}>\r\n        <div className=\"playlist-modal\" onClick={(e) => e.stopPropagation()}>\r\n            <div className=\"playlist-modal-header\">\r\n                <h3>플레이리스트에 추가</h3>\r\n                <button className=\"playlist-modal-close\" onClick={onClose}>&times;</button>\r\n            </div>\r\n            <div className=\"playlist-modal-body\">\r\n                {loading ? (\r\n                    <p>플레이리스트를 불러오는 중...</p>\r\n                ) : playlists.length === 0 ? (\r\n                    <p>사용 가능한 플레이리스트가 없습니다.</p>\r\n                ) : (\r\n                    <div className=\"playlist-modal-list\">\r\n                        {playlists.map(playlist => (\r\n                            <PlaylistItem\r\n                                key={playlist.playlistId}\r\n                                playlist={playlist}\r\n                                isChecked={selectedPlaylists.includes(playlist.playlistId)}\r\n                                onCheck={onCheck}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <div className=\"playlist-modal-footer\">\r\n                <button \r\n                    className=\"add-to-playlist-button\" \r\n                    onClick={onAdd}\r\n                    disabled={selectedPlaylists.length === 0 || loading}\r\n                >\r\n                    플레이리스트에 추가\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n));\r\n\r\nconst Music = ({ track, isPremium }) => {\r\n    const [tooltipStyle, setTooltipStyle] = useState({});\r\n    const [showPlaylistModal, setShowPlaylistModal] = useState(false);\r\n    const [playlists, setPlaylists] = useState([]);\r\n    const [selectedPlaylists, setSelectedPlaylists] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const { addTrackToList, setIsPlaying, deviceReady } = useContext(TrackContext);\r\n    \r\n    const playlistsLoadedRef = useRef(false);\r\n    const userInfo = useUserInfo();\r\n    \r\n    const handleMouseEnter = (e) => {\r\n        const rect = e.currentTarget.getBoundingClientRect();\r\n        setTooltipStyle({\r\n            top: `${rect.top - 10}px`,\r\n            left: `${rect.left + rect.width / 2}px`,\r\n        });\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setTooltipStyle({});\r\n    };\r\n\r\n    const fetchPlaylists = async (userId) => {\r\n        if (!userId || playlistsLoadedRef.current) return;\r\n        \r\n        setLoading(true);\r\n        try {\r\n            const response = await axiosInstance.get(`/playlist/user/${userId}`);\r\n            setPlaylists(response.data || []);\r\n            playlistsLoadedRef.current = true;\r\n        } catch (error) {\r\n            console.error(\"플레이리스트를 불러오는 데 실패했습니다:\", error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleAddToPlaylist = () => {\r\n        setShowPlaylistModal(true);\r\n        if (userInfo && !playlistsLoadedRef.current) {\r\n            fetchPlaylists(userInfo.userId);\r\n        }\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setShowPlaylistModal(false);\r\n        setSelectedPlaylists([]);\r\n    };\r\n\r\n    const handlePlaylistCheck = useCallback((playlistId) => {\r\n        setSelectedPlaylists(prevSelected => {\r\n            if (prevSelected.includes(playlistId)) {\r\n                return prevSelected.filter(id => id !== playlistId);\r\n            } else {\r\n                return [...prevSelected, playlistId];\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const handleAddTracksToPlaylists = async () => {\r\n        if (selectedPlaylists.length === 0) {\r\n            alert(\"플레이리스트를 선택해주세요.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const promises = selectedPlaylists.map(playlistId => \r\n                axiosInstance.post(`/api/spotify/playlist/${playlistId}/track`, null, {\r\n                    params: { trackId: track.id }\r\n                })\r\n            );\r\n            \r\n            await Promise.all(promises);\r\n            alert(\"선택한 플레이리스트에 트랙이 추가되었습니다.\");\r\n            handleCloseModal();\r\n        } catch (error) {\r\n            console.error(\"플레이리스트에 트랙 추가 실패:\", error);\r\n            alert(\"플레이리스트에 트랙 추가 중 오류가 발생했습니다.\");\r\n        }\r\n    };\r\n\r\n    const handlePlayClick = async (track) => {\r\n        if (isPremium) {\r\n            try {\r\n                addTrackToList(track); // 트랙을 리스트에 추가\r\n                if (deviceReady) {\r\n                    setIsPlaying(true);\r\n                } else {\r\n                    if(!deviceReady){\r\n                        setTimeout(() => {\r\n                            setIsPlaying(true);\r\n                        }, 1000);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error(\"트랙 재생 중 오류:\", error);\r\n                if (error.response?.status === 403) {\r\n                    // 403 오류 발생 시 링크로 이동\r\n                    window.open(track.external_urls.spotify, '_blank');\r\n                    return;\r\n                } else if (error.response?.status === 404) {\r\n                    alert('Spotify 플레이어를 초기화 중입니다. 잠시 후에 다시 시도해주세요.');\r\n                } else {\r\n                    alert('트랙을 재생할 수 없습니다. 다시 시도해주세요.');\r\n                }\r\n            }\r\n        } else {\r\n            window.open(track.external_urls.spotify, '_blank');\r\n        }\r\n    };\r\n\r\n    return (\r\n        // 렌더링 부분은 동일하게 유지\r\n        track && track.album && track.album.images && track.album.images[0] ? (\r\n            <div key={track.id} className=\"track-item\" onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\r\n                <img className=\"track-album-image-music\" src={track.album.images[0].url} alt={track.name} />\r\n                <div className=\"track-info\">\r\n                    <h4>{track.name}</h4>\r\n                    <p>{track.artists.map((artist) => artist.name).join(\", \")}</p>\r\n                    <div className=\"tooltip\" style={tooltipStyle}>\r\n                        <h4>{track.name}</h4>\r\n                        <p>{track.artists.map((artist) => artist.name).join(\", \")}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"track-play-button-container\">\r\n                    <button\r\n                        onClick={() => handlePlayClick(track)}\r\n                        className={isPremium ? \"premium-play\" : \"spotify-link\"}\r\n                    >\r\n                        {isPremium ? \"▶\" : \"LINK\"}\r\n                    </button>\r\n                    <button className=\"add-track-to-playlist-button\" onClick={handleAddToPlaylist}>\r\n                        ➕\r\n                    </button>\r\n                </div>\r\n\r\n                {showPlaylistModal && ReactDOM.createPortal(\r\n                    <PlaylistModal \r\n                        playlists={playlists}\r\n                        selectedPlaylists={selectedPlaylists}\r\n                        loading={loading}\r\n                        onCheck={handlePlaylistCheck}\r\n                        onClose={handleCloseModal}\r\n                        onAdd={handleAddTracksToPlaylists}\r\n                    />,\r\n                    document.body\r\n                )}\r\n            </div>\r\n        ) : null\r\n    );\r\n};\r\n\r\nexport default Music;","/**\r\n * tracks 데이터를 파싱하고 변환하는 함수\r\n * @param {string|object} tracks - tracks 데이터 (문자열 또는 객체)\r\n * @returns {Array} - 변환된 track 리스트\r\n */\r\nexport const parseTracks = (tracks) => {\r\n    // tracks가 문자열이면 JSON으로 파싱\r\n    let parsedTracks = typeof tracks === \"string\" ? JSON.parse(tracks) : tracks;\r\n\r\n    // tracks.items에서 track 정보만 추출\r\n    const trackList = parsedTracks.items.map(item => ({\r\n        id: item.track.id, // track.id 추가\r\n        ...item.track, // track 객체 전체 추가\r\n    }));\r\n\r\n    return trackList;\r\n};","import axios from 'axios';\r\n\r\nexport const transferPlayback = async (deviceId) => {\r\n    try {\r\n        const url = 'https://api.spotify.com/v1/me/player';\r\n        await axios.put(\r\n            url,\r\n            {\r\n                device_ids: [deviceId],\r\n                play: true\r\n            },\r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n                }\r\n            }\r\n        );\r\n    } catch (error) {\r\n        console.error('Failed to transfer playback:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const play = async ({ spotify_uri, deviceId, position = 0 }) => {\r\n    try {\r\n        const url = `https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`;\r\n        \r\n        await axios.put(\r\n            url,\r\n            {\r\n                uris: [spotify_uri],\r\n                position_ms: position\r\n            },\r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n                }\r\n            }\r\n        );\r\n    } catch (error) {\r\n        console.error('Failed to play track:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const pause = async () => {\r\n    try {\r\n        await axios.put('https://api.spotify.com/v1/me/player/pause', null, {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error('Failed to pause track:', error);\r\n        throw error;\r\n    }\r\n};","import { useState, useEffect } from \"react\";\r\nimport axiosInstance from \"../api/axiosInstance\";\r\nimport { transferPlayback } from \"../components/music/spotifyPlayer\";\r\n\r\nconst useMusicSearch = () => {\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [results, setResults] = useState([]);\r\n    const [audioPlayer, setAudioPlayer] = useState(new Audio());\r\n    const [isPremium, setIsPremium] = useState(false);\r\n    const [deviceId, setDeviceId] = useState(null);\r\n\r\n    // Premium 상태 확인\r\n    useEffect(() => {\r\n        const checkPremiumStatus = async () => {\r\n            try {\r\n                const response = await axiosInstance.get('/api/spotify/userInfo');\r\n                setIsPremium(response.data.product === 'premium');\r\n            } catch (error) {\r\n                //console.error(\"Failed to check premium status\", error);\r\n            }\r\n        };\r\n        checkPremiumStatus();\r\n    }, []);\r\n\r\n    // 디바이스 ID 설정\r\n    useEffect(() => {\r\n        const fetchDeviceId = async () => {\r\n            try {\r\n                const response = await axiosInstance.get('/music/devices', {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n                    }\r\n                });\r\n                const devices = response.data.devices;\r\n                if (devices.length > 0) {\r\n                    setDeviceId(devices[0].id);\r\n                    // 브라우저를 활성 디바이스로 설정\r\n                    await transferPlayback(devices[0].id);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch devices\", error);\r\n            }\r\n        };\r\n        fetchDeviceId();\r\n    }, []);\r\n\r\n    const handleSearch = async (e) => {\r\n        try {\r\n            const response = await axiosInstance.get(`/api/spotify/search?keyword=${keyword}&type=track`);\r\n            const filteredResults = response.data.tracks.items.filter(\r\n                (track) => track.is_playable\r\n            );\r\n            setResults(filteredResults);\r\n        } catch (error) {\r\n            console.error(\"Failed to search music\", error);\r\n            setResults([]);\r\n        }\r\n    };\r\n\r\n    return {\r\n        keyword,\r\n        setKeyword,\r\n        results,\r\n        handleSearch,\r\n        isPremium,\r\n        deviceId,\r\n    };\r\n};\r\n\r\nexport default useMusicSearch;","const defaultImage = `${process.env.REACT_APP_API_URL}/images/default.png`;\r\n\r\nexport const getImageUrl = (playlistPhoto) => {\r\n    if (!playlistPhoto) {\r\n        return defaultImage;\r\n    }\r\n    return playlistPhoto.startsWith(\"/images/\") \r\n        ? `${process.env.REACT_APP_API_URL}${playlistPhoto}` \r\n        : playlistPhoto;\r\n};\r\n\r\nexport const getDefaultImage = () => {\r\n    return defaultImage;\r\n};","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../../styles/Button.css\";\r\n\r\nconst Button = ({ text, link, color, onClick = () => {} }) => {\r\n\r\n    return (\r\n        <Link to={link}  className={`button ${color ? 'custom-color' : ''}`} onClick={onClick}>\r\n            {text}\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default Button;","import { useEffect, useState, useContext } from \"react\";\r\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport Music from \"../music/Music\"; // Music 컴포넌트 임포트\r\nimport MusicSearch from \"../music/MusicSearch\";\r\nimport useMusicSearch from \"../../hooks/useMusicSearch\"; // useMusicSearch 훅 임포트\r\nimport useUserInfo from \"../../hooks/useUserInfo\"; // useUserInfo 훅 임포트\r\nimport Button from \"../common/Button\"; // Button 컴포넌트 임포트\r\nimport { parseTracks } from \"../../utils/trackUtils\"; // parseTracks 유틸 함수 임포트\r\nimport { getImageUrl } from \"../../utils/imageUtils\"; \r\nimport { TrackContext } from '../../context/TrackContext';\r\nimport \"./PlaylistDetail.css\"; // 스타일 파일 임포트\r\nimport Header from \"../common/Header\";\r\n\r\nconst PlaylistDetail = () => {\r\n    const { playlistId } = useParams();\r\n    const navigate = useNavigate();\r\n    const userInfo = useUserInfo(); // 사용자 정보 가져오기\r\n    const { handlePlay, isPremium } = useMusicSearch(); // useMusicSearch 훅 사용\r\n    const location = useLocation();\r\n    const friendInfo = location.state?.friendInfo;\r\n    const isFriendPlaylist = !!friendInfo;\r\n\r\n    const { addTracksToList, setIsPlaying, deviceReady } = useContext(TrackContext);\r\n\r\n    const [state, setState] = useState({\r\n        playlistTitle: '',\r\n        playlistComment: '',\r\n        playlistPhoto: null,\r\n        playlistDate: '',\r\n        tracksData: [],\r\n        isEditing: false,\r\n        user: userInfo,\r\n    });\r\n\r\n    useEffect(() => {\r\n        const fetchPlaylist = async () => {\r\n            try {\r\n                const response = await axiosInstance.get(`/playlist/detail/${playlistId}`);\r\n    \r\n                // tracks 데이터를 파싱하고 변환\r\n                const trackList = parseTracks(response.data.tracks);\r\n                \r\n                setState(prevState => ({\r\n                    ...prevState,\r\n                    playlistTitle: response.data.playlist.playlistTitle,\r\n                    playlistComment: response.data.playlist.playlistComment,\r\n                    playlistPhoto: getImageUrl(response.data.playlist.playlistPhoto), // 이미지 URL 설정\r\n                    playlistDate: response.data.playlist.playlistDate.substring(0, 10),\r\n                    isPublic: response.data.playlist.isPublic,\r\n                    tracksData: trackList,\r\n                }));\r\n                \r\n    \r\n            } catch (error) {\r\n                console.error(\"Error fetching playlist detail\", error);\r\n            }\r\n        };\r\n    \r\n        fetchPlaylist();\r\n    }, [playlistId]);\r\n\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n            setState(prevState => ({\r\n                ...prevState,\r\n                user: userInfo,\r\n            }));\r\n        }\r\n    }, [userInfo]);\r\n\r\n    const handleEdit = () => {\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            isEditing: true,\r\n        }));\r\n    };\r\n\r\n    const handleSave = async () => {\r\n        const formData = new FormData();\r\n        formData.append(\"playlistId\", playlistId);\r\n        formData.append(\"playlistTitle\", state.playlistTitle);\r\n        formData.append(\"playlistComment\", state.playlistComment);\r\n        formData.append(\"playlistDate\", state.playlistDate);\r\n        formData.append(\"isPublic\", state.isPublic);\r\n        formData.append(\"userId\", state.user.userId); // 예시로 userId 값 사용\r\n    \r\n        if (state.playlistPhoto && typeof state.playlistPhoto !== \"string\") {\r\n            formData.append(\"playlistPhoto\", state.playlistPhoto);\r\n        } else {\r\n            formData.append(\"existingPlaylistPhoto\", state.playlistPhoto || \"\"); // 기존 이미지를 그대로 사용\r\n        }\r\n    \r\n        formData.append(\"tracks\", state.tracksData.map(track => track.uri));\r\n    \r\n        try {\r\n            await axiosInstance.post(\"/playlist/update\", formData, {\r\n                headers: {\r\n                    \"Content-Type\": \"multipart/form-data\",\r\n                },\r\n            });\r\n            setState(prevState => ({\r\n                ...prevState,\r\n                isEditing: false,\r\n            }));\r\n            navigate(\"/PlaylistPage\");\r\n        } catch (error) {\r\n            console.error(\"Error updating playlist\", error);\r\n        }\r\n    };\r\n\r\n    const handleFileChange = (e) => {\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            playlistPhoto: e.target.files[0],\r\n        }));\r\n    };\r\n\r\n    const handleRemoveTrack = (trackId) => {\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            tracksData: prevState.tracksData.filter(track => track.id !== trackId),\r\n        }));\r\n    };\r\n\r\n    const handleTrackSelect = (track) => {\r\n        setState((prev) => ({\r\n            ...prev,\r\n            tracksData: [...prev.tracksData, track],\r\n        }));\r\n    };\r\n    \r\n    const goBack = () => {\r\n        navigate(-1); // 이전 페이지로 이동\r\n    };\r\n    \r\n    const handlePlayAll = () => {\r\n        if (state.tracksData.length === 0) {\r\n            alert('재생할 트랙이 없습니다.');\r\n            return;\r\n        }\r\n\r\n        // 모든 트랙을 재생 목록에 추가\r\n        addTracksToList(state.tracksData);\r\n        \r\n        // 디바이스가 준비되면 재생 시작\r\n        if (deviceReady) {\r\n            setIsPlaying(true);\r\n        } else {\r\n            setTimeout(() => {\r\n                setIsPlaying(true);\r\n            }, 1000);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container1\">\r\n            <Header />\r\n                \r\n            <div className=\"playlist-detail-container\">\r\n                <div className=\"playlist-detail-header\">\r\n                    \r\n                {state.isEditing ? (\r\n                        <>\r\n                            <input\r\n                                className=\"playlist-detail-title-input\"\r\n                                value={state.playlistTitle}\r\n                                onChange={(e) => setState(prevState => ({\r\n                                    ...prevState,\r\n                                    playlistTitle: e.target.value,\r\n                                }))} \r\n                            />\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <h2 className=\"playlist-detail-title\">{state.playlistTitle}</h2>\r\n                        </>\r\n                    )\r\n                }\r\n                </div>\r\n                <div className=\"playlist-detail-body\">\r\n                    <div className=\"playlist-detail-left\">\r\n                        <img src={state.playlistPhoto} alt=\"Playlist\" className=\"playlist-detail-photo\" />\r\n                        {state.isEditing && (\r\n                            <input type=\"file\" onChange={handleFileChange} accept=\"image/*\" />\r\n                        )}\r\n                                \r\n                        <div className=\"playlist-tracks-container\">\r\n                            {state.isEditing && (\r\n                                <div className=\"music-search-container\">\r\n                                    <MusicSearch onSelectTrack={handleTrackSelect} />\r\n                                </div>\r\n                            )}\r\n                            <div className={`playlist-tracks ${state.isEditing ? 'playlist-tracks-editing' : ''}`}>\r\n                                {state.tracksData.length > 0 ? (\r\n                                    state.tracksData.map((track, index) => {\r\n                                        const key = `${playlistId}-${index}`;\r\n                                        return (\r\n                                            <div key={key} className=\"list-track-item\">\r\n                                                <Music track={track} handlePlay={handlePlay} isPremium={isPremium} />\r\n                                                {state.isEditing && (\r\n                                                    <button className=\"playlist-update-track-remove-button\" onClick={() => handleRemoveTrack(track.id)}>❌</button>\r\n                                                )}\r\n                                            </div>\r\n                                        );\r\n                                    })\r\n                                ) : (\r\n                                    <p>노래가 없습니다.</p>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"playlist-detail-right\">\r\n                        {isPremium && (\r\n                            <div className=\"playlist-play-controls\">\r\n                                <button \r\n                                    className=\"playlist-play-all-button\"\r\n                                    onClick={handlePlayAll}\r\n                                    disabled={state.tracksData.length === 0}\r\n                                >\r\n                                    ▶\r\n                                </button>\r\n                            </div>\r\n                        )}\r\n                        {state.isEditing ? (\r\n                            <>\r\n                                <textarea \r\n                                    className=\"playlist-detail-playlistComment-input\"\r\n                                    value={state.playlistComment} \r\n                                    onChange={(e) => setState(prevState => ({\r\n                                        ...prevState,\r\n                                        playlistComment: e.target.value,\r\n                                    }))} \r\n                                />\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <p className=\"playlist-detail-playlistComment\">\r\n                                    {state.playlistComment}\r\n                                </p>\r\n                            </>\r\n                        )}\r\n                        <p>{state.playlistDate}</p>\r\n                        <div className=\"editing-button-area\">\r\n                            {!isFriendPlaylist ? (\r\n                                <>\r\n                                    {state.isEditing ? (\r\n                                        <Button text=\"저장\" onClick={handleSave} />\r\n                                    ) : (\r\n                                        <Button text=\"수정\" onClick={handleEdit} />\r\n                                    )}\r\n                                </>\r\n                            ) : null}\r\n                            <Button text=\"뒤로가기\" onClick={goBack} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PlaylistDetail;"],"names":["_ref","onSelectTrack","keyword","setKeyword","results","handleSearch","isPremium","useMusicSearch","hasSearched","setHasSearched","useState","_jsxs","className","children","onSubmit","e","preventDefault","_jsx","type","value","onChange","target","placeholder","length","map","track","index","onClick","Music","id","PlaylistItem","React","playlist","isChecked","onCheck","playlistId","checked","htmlFor","src","getImageUrl","playlistPhoto","alt","playlistTitle","PlaylistModal","_ref2","playlists","selectedPlaylists","loading","onClose","onAdd","stopPropagation","includes","disabled","_ref3","tooltipStyle","setTooltipStyle","showPlaylistModal","setShowPlaylistModal","setPlaylists","setSelectedPlaylists","setLoading","addTrackToList","setIsPlaying","deviceReady","useContext","TrackContext","playlistsLoadedRef","useRef","userInfo","useUserInfo","handleCloseModal","handlePlaylistCheck","useCallback","prevSelected","filter","album","images","onMouseEnter","rect","currentTarget","getBoundingClientRect","top","left","width","onMouseLeave","handleMouseLeave","url","name","artists","artist","join","style","async","setTimeout","error","_error$response","_error$response2","console","response","status","window","open","external_urls","spotify","alert","handlePlayClick","handleAddToPlaylist","current","userId","axiosInstance","get","data","fetchPlaylists","ReactDOM","promises","post","params","trackId","Promise","all","document","body","parseTracks","tracks","JSON","parse","items","item","setResults","audioPlayer","setAudioPlayer","Audio","setIsPremium","deviceId","setDeviceId","useEffect","product","checkPremiumStatus","devices","headers","localStorage","getItem","axios","put","device_ids","play","transferPlayback","fetchDeviceId","filteredResults","is_playable","defaultImage","startsWith","getDefaultImage","text","link","color","Link","to","PlaylistDetail","_location$state","useParams","navigate","useNavigate","handlePlay","isFriendPlaylist","useLocation","state","friendInfo","addTracksToList","setState","playlistComment","playlistDate","tracksData","isEditing","user","trackList","prevState","substring","isPublic","fetchPlaylist","Header","_Fragment","files","accept","MusicSearch","prev","key","handleRemoveTrack","handlePlayAll","Button","formData","FormData","append","uri","handleEdit","goBack"],"sourceRoot":""}