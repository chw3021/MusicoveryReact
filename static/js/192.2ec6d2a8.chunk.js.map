{"version":3,"file":"static/js/192.2ec6d2a8.chunk.js","mappings":"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","sources":["components/admin/AdminDashboard.js","components/admin/UserManagement.js","components/admin/ReportManagement.js","components/admin/AdminSupport.js","pages/AdminPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { FaUser, FaMusic, FaBell } from \"react-icons/fa\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Chart, registerables } from \"chart.js\";\r\nimport ChartDataLabels from \"chartjs-plugin-datalabels\";\r\nimport \"../../styles/AdminDashboard.css\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\n\r\nChart.register(...registerables, ChartDataLabels);\r\n\r\n// 최근 7일간 날짜 생성 함수\r\nconst getLast7Days = () =>\r\n    Array.from({ length: 7 }, (_, i) => {\r\n        const date = new Date();\r\n        date.setDate(date.getDate() - (6 - i));\r\n        return `${date.getMonth() + 1}/${date.getDate()}`;\r\n    });\r\n\r\nconst AdminDashboard = ({ setActiveSection }) => {\r\n    const labels = getLast7Days(); // X축 날짜\r\n\r\n    // 상태 값\r\n    const [weeklyNewUsers, setWeeklyNewUsers] = useState(new Array(7).fill(0));\r\n    const [totalUsers, setTotalUsers] = useState(0);\r\n    const [recentUsers, setRecentUsers] = useState([]);\r\n\r\n    const [weeklyPlaylists, setWeeklyPlaylists] = useState(new Array(7).fill(0));\r\n    const [totalPlaylists, setTotalPlaylists] = useState(0);\r\n    const [recentPlaylists, setRecentPlaylists] = useState([]);\r\n\r\n    const [reportCount, setReportCount] = useState(0);\r\n    const [inquiryCount, setInquiryCount] = useState(0);\r\n\r\n    // 백엔드 데이터 불러오기\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const [\r\n                    usersRes,\r\n                    totalUsersRes,\r\n                    recentUsersRes,\r\n                    playlistsRes,\r\n                    totalPlaylistsRes,\r\n                    recentPlaylistsRes,\r\n                    reportCountRes,\r\n                    inquiriesRes\r\n                ] = await Promise.all([\r\n                    axiosInstance.get(\"/auth/weekly-users\"),\r\n                    axiosInstance.get(\"/auth/count\"),\r\n                    axiosInstance.get(\"/auth/recent-users\"),\r\n                    axiosInstance.get(\"/playlist/weekly-playlists\"),\r\n                    axiosInstance.get(\"/playlist/count\"),\r\n                    axiosInstance.get(\"/playlist/recent-playlists\"),\r\n                    axiosInstance.get(\"/api/userreport/count\"),\r\n                    axiosInstance.get(\"/customersupport/count\"),\r\n                ]);\r\n\r\n                setWeeklyNewUsers(usersRes.data.length === 7 ? usersRes.data : new Array(7).fill(0));\r\n                setTotalUsers(totalUsersRes.data || 0);\r\n                setRecentUsers(recentUsersRes.data || []);\r\n\r\n                setWeeklyPlaylists(playlistsRes.data.length === 7 ? playlistsRes.data : new Array(7).fill(0));\r\n                setTotalPlaylists(totalPlaylistsRes.data || 0);\r\n                setRecentPlaylists(recentPlaylistsRes.data || []);\r\n\r\n                setReportCount(reportCountRes.data || 0);\r\n                setInquiryCount(inquiriesRes.data || 0);\r\n            } catch (error) {\r\n                console.error(\"데이터 불러오기 실패:\", error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    // 오늘 날짜의 데이터 반영\r\n    const todayNewUsers = weeklyNewUsers[6] || 0;\r\n    const todayNewPlaylists = weeklyPlaylists[6] || 0;\r\n\r\n    // 통계 카드 데이터\r\n    const stats = [\r\n        {\r\n            id: 1,\r\n            label: \"총 유저 수\",\r\n            value: `${totalUsers}명`,\r\n            icon: <FaUser />,\r\n            chartData: weeklyNewUsers,\r\n            todayCount: todayNewUsers,\r\n            color: \"#4CAF50\",\r\n        },\r\n        {\r\n            id: 2,\r\n            label: \"총 플레이리스트 수\",\r\n            value: `${totalPlaylists}개`,\r\n            icon: <FaMusic />,\r\n            chartData: weeklyPlaylists,\r\n            todayCount: todayNewPlaylists,\r\n            color: \"#FF9800\",\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <div className=\"admin-dashboard\">\r\n            <h2>📊 대시보드</h2>\r\n\r\n            {/* 통계 카드 + 개별 차트 */}\r\n            <div className=\"dashboard-grid\">\r\n                {stats.map(({ id, label, value, icon, chartData, todayCount, color }, index) => (\r\n                    <div key={id} className=\"dashboard-box\">\r\n                        {/* 카드 */}\r\n                        <div className=\"dashboard-card\" style={{ borderLeft: `5px solid ${color}` }}>\r\n                            <div className=\"dashboard-icon\" style={{ color }}>\r\n                                {icon}\r\n                            </div>\r\n                            <div>\r\n                                <h3>{label}</h3>\r\n                                <p>{value}</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* 차트 */}\r\n                        <div className=\"dashboard-chart\">\r\n                            <Line\r\n                                data={{\r\n                                    labels,\r\n                                    datasets: [{\r\n                                        label: index === 0\r\n                                            ? `📊 오늘의 가입자 수: ${todayCount}명`\r\n                                            : `📊 오늘 생성된 플레이리스트 수: ${todayCount}개`,\r\n                                        data: chartData,\r\n                                        borderColor: color,\r\n                                        backgroundColor: `${color}33`,\r\n                                        tension: 0.3,\r\n                                        fill: true\r\n                                    }]\r\n                                }}\r\n                                options={{\r\n                                    layout: { padding: { top: 20 } },\r\n                                    plugins: {\r\n                                        title: {\r\n                                            display: true,\r\n                                            text: index === 0\r\n                                                ? `📊 오늘의 가입자 수: ${todayCount}명`\r\n                                                : `📊 오늘 생성된 플레이리스트 수: ${todayCount}개`,\r\n                                            color: \"#ffffff\",\r\n                                            font: { size: 16 },\r\n                                            padding: { bottom: 50 }\r\n                                        },\r\n                                        legend: { display: false },\r\n                                        tooltip: { enabled: true },\r\n                                        datalabels: {\r\n                                            display: true,\r\n                                            color: \"white\",\r\n                                            font: { size: 12, weight: \"bold\" },\r\n                                            anchor: \"end\",\r\n                                            align: \"top\",\r\n                                            offset: 12\r\n                                        }\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {/* 추가 콘텐츠 */}\r\n            <div className=\"dashboard-extra\">\r\n                <DashboardSection title=\"최근 가입한 유저\" icon={<FaUser />} items={recentUsers} type=\"user\" />\r\n                <DashboardSection title=\"최근 생성된 플레이리스트\" icon={<FaMusic />} items={recentPlaylists} type=\"playlist\" />\r\n                <DashboardAlerts setActiveSection={setActiveSection} reportCount={reportCount} inquiryCount={inquiryCount} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// 대시보드 섹션 컴포넌트\r\nconst DashboardSection = ({ title, icon, items, type }) => (\r\n    <div className=\"dashboard-section\">\r\n        <h3>{icon} {title}</h3>\r\n        <ul>\r\n            {items.length > 0 ? (\r\n                items.map(({ id, playlistId, nickname, regdate, playlistTitle, playlistDate }) => (\r\n                    <li key={id || playlistId}>\r\n                        {type === \"user\"\r\n                            ? `🟢 ${nickname} (가입일: ${formatDate(regdate)})`\r\n                            : `🎵 ${playlistTitle} (생성일: ${formatDate(playlistDate)})`}\r\n                    </li>\r\n                ))\r\n            ) : (\r\n                <li>데이터 없음</li>\r\n            )}\r\n        </ul>\r\n    </div>\r\n);\r\n\r\n// 관리자 알림 섹션\r\nconst DashboardAlerts = ({ setActiveSection, reportCount, inquiryCount }) => (\r\n    <div className=\"dashboard-section\">\r\n        <h3><FaBell /> 관리자 알림</h3>\r\n        <ul>\r\n            <li>\r\n                <button onClick={() => setActiveSection(\"report\")} className=\"link-button\">\r\n                    🚨 신고된 게시물 {reportCount}개\r\n                </button>\r\n            </li>\r\n            <li>\r\n                <button onClick={() => setActiveSection(\"support\")} className=\"link-button\">\r\n                    📞 문의사항 {inquiryCount}개\r\n                </button>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n);\r\n\r\n// 날짜 포맷 변환\r\nconst formatDate = date => new Date(date).toISOString().split(\"T\")[0];\r\n\r\nexport default AdminDashboard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../../styles/UserManagement.css\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\n\r\nconst UserManagement = () => {\r\n    const [users, setUsers] = useState([]);\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [sortBy, setSortBy] = useState(\"regdate\");\r\n    const [selectedUser, setSelectedUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const usersPerPage = 5; // 한 페이지당 최대 5명\r\n\r\n    useEffect(() => {\r\n        fetchUsers();\r\n    }, [searchTerm, sortBy]);\r\n\r\n    // 유저 목록 불러오기\r\n    const fetchUsers = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const { data } = await axiosInstance.get(\"/admin/users\", {\r\n                params: { search: searchTerm, sort: sortBy }\r\n            });\r\n            setUsers(data || []);\r\n            setCurrentPage(1);\r\n        } catch (error) {\r\n            console.error(\"유저 목록 가져오기 실패:\", error);\r\n        }\r\n        setLoading(false);\r\n    };\r\n    \r\n\r\n    // 유저 상태 변경 (정지 <-> 활성화)\r\n    const handleToggleUserStatus = async (userId) => {\r\n        if (!window.confirm(\"해당 유저의 상태를 변경하시겠습니까?\")) return;\r\n    \r\n        try {\r\n            await axiosInstance.put(`/admin/users/${userId}/status`);\r\n            alert(\"유저 상태가 변경되었습니다.\");\r\n            fetchUsers();\r\n        } catch (error) {\r\n            console.error(\"유저 상태 변경 실패:\", error);\r\n            alert(\"유저 상태 변경에 실패했습니다.\");\r\n        }\r\n    };\r\n    \r\n    // 유저 삭제\r\n    const handleDeleteUser = async (userId) => {\r\n        if (!window.confirm(\"해당 유저를 삭제하시겠습니까?\")) return;\r\n        try {\r\n            await axiosInstance.delete(`/admin/users/${userId}`);\r\n            alert(\"유저가 삭제되었습니다.\");\r\n            fetchUsers();\r\n        } catch (error) {\r\n            console.error(\"유저 삭제 실패:\", error);\r\n            alert(\"유저 삭제에 실패했습니다.\");\r\n        }\r\n    };\r\n\r\n    // 현재 페이지의 유저 목록\r\n    const indexOfLastUser = currentPage * usersPerPage;\r\n    const currentUsers = users.slice(indexOfLastUser - usersPerPage, indexOfLastUser);\r\n    const totalPages = Math.ceil(users.length / usersPerPage);\r\n\r\n    return (\r\n        <div className=\"user-management\">\r\n            <h2>👤 사용자 관리</h2>\r\n\r\n            {/* 검색 & 정렬 */}\r\n            <div className=\"user-controls\">\r\n                <input \r\n                    type=\"text\" \r\n                    placeholder=\"유저 검색 (닉네임)\" \r\n                    value={searchTerm} \r\n                    onChange={(e) => setSearchTerm(e.target.value)} \r\n                />\r\n                <select value={sortBy} onChange={(e) => setSortBy(e.target.value)}>\r\n                    <option value=\"regdate\">가입일순</option>\r\n                    <option value=\"nickname\">이름순</option>\r\n                </select>\r\n            </div>\r\n\r\n            {/* 유저 테이블 */}\r\n            <table className=\"user-table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>이메일</th>\r\n                        <th>닉네임</th>\r\n                        <th>가입일</th>\r\n                        <th>상태</th>\r\n                        <th>액션</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {loading ? (\r\n                        <tr><td colSpan=\"5\" className=\"loading-text\">유저를 불러오는 중입니다...</td></tr>\r\n                    ) : currentUsers.length > 0 ? (\r\n                        currentUsers.map((user) => {\r\n                            const isActive = user.active === true; // true면 활성화, false면 정지됨\r\n                            return (\r\n                                <tr key={user.id}>\r\n                                    <td>{user.email}</td>\r\n                                    <td>{user.nickname}</td>\r\n                                    <td>{new Date(user.regdate).toISOString().split(\"T\")[0]}</td>\r\n                                    <td className={isActive ? \"status-active\" : \"status-inactive\"}>\r\n                                        {isActive ? \"정상\" : \"정지됨\"}\r\n                                    </td>\r\n                                    <td>\r\n                                        <button className=\"action-button view-button\" onClick={() => setSelectedUser(user)}>\r\n                                            보기\r\n                                        </button>\r\n                                        <button\r\n                                            className={`action-button ${isActive ? \"deactivate-button\" : \"activate-button\"}`}\r\n                                            onClick={() => handleToggleUserStatus(user.id)}\r\n                                        >\r\n                                            {isActive ? \"정지\" : \"활성화\"}\r\n                                        </button>\r\n                                        <button className=\"action-button important delete-button\" onClick={() => handleDeleteUser(user.id)}>\r\n                                            삭제\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <tr><td colSpan=\"5\">유저 정보가 없습니다.</td></tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n\r\n            {/* 페이지네이션 */}\r\n            <div className=\"pagination\">\r\n                <button onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))} disabled={currentPage === 1}>◀</button>\r\n                {Array.from({ length: totalPages }, (_, i) => (\r\n                    <button \r\n                        key={i} \r\n                        onClick={() => setCurrentPage(i + 1)} \r\n                        className={currentPage === i + 1 ? \"active\" : \"\"}\r\n                    >\r\n                        {i + 1}\r\n                    </button>\r\n                ))}\r\n                <button onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))} disabled={currentPage === totalPages}>▶</button>\r\n            </div>\r\n\r\n            {/* 유저 상세 모달 */}\r\n            {selectedUser && (\r\n                <div className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        <h3>유저 상세 정보</h3>\r\n                        <p><b>아이디:</b> {selectedUser.id}</p>\r\n                        <p><b>닉네임:</b> {selectedUser.nickname}</p>\r\n                        <p><b>이메일:</b> {selectedUser.email}</p>\r\n                        <p><b>가입일:</b> {new Date(selectedUser.regdate).toISOString().split(\"T\")[0]}</p>\r\n                        <button onClick={() => setSelectedUser(null)}>닫기</button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserManagement;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport \"../../styles/ReportManagement.css\";\r\n\r\nconst ReportManagement = () => {\r\n    const [userReports, setUserReports] = useState([]);\r\n    const [selectedReport, setSelectedReport] = useState(null);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const reportsPerPage = 5;\r\n\r\n    // ✅ 신고 목록 불러오기\r\n    useEffect(() => {\r\n        fetchReports();\r\n    }, [currentPage]);\r\n\r\n    const fetchReports = () => {\r\n        axiosInstance.get(`http://localhost:8080/api/userreport/reportsAll?page=${currentPage}&size=${reportsPerPage}`)\r\n        axiosInstance.get(\"/api/userreport/reportsAll\")\r\n            .then(response => {\r\n                console.log(\"🚀 신고 목록 데이터:\", response.data);\r\n                setUserReports(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error fetching user reports:\", error);\r\n            });\r\n    };\r\n\r\n    const selectReport = (reportId) => {\r\n        const report = userReports.find(r => r.id === reportId);\r\n        if (!report) {\r\n            console.error(\"🚨 오류: 선택된 신고 데이터가 없습니다!\");\r\n            return;\r\n        }\r\n        setSelectedReport(report);\r\n    };\r\n\r\n    // ✅ 신고 상태 변경 (DB 반영 후 상태 업데이트)\r\n    const handleUpdateStatus = async (newStatus) => {\r\n        if (!selectedReport) {\r\n            alert(\"🚨 신고된 사용자를 선택해주세요.\");\r\n            return;\r\n        }\r\n\r\n        if (!window.confirm(`🚨 해당 유저의 상태를 '${newStatus}'로 변경하시겠습니까?`)) return;\r\n\r\n        try {\r\n            const response = await axiosInstance.put(\r\n                `http://localhost:8080/api/userreport/status/${selectedReport.id}`,\r\n                { status: newStatus },\r\n                { headers: { \"Content-Type\": \"application/json\" } }\r\n            );\r\n\r\n            if (response.status === 200) {\r\n                alert(`🚨 유저 상태가 '${newStatus}'로 변경되었습니다.`);\r\n\r\n                // ✅ 선택된 신고 데이터 상태 업데이트\r\n                setSelectedReport(prev => ({\r\n                    ...prev,\r\n                    status: newStatus\r\n                }));\r\n\r\n                // ✅ 전체 신고 목록에서도 상태 업데이트\r\n                setUserReports(prevReports =>\r\n                    prevReports.map(report =>\r\n                        report.id === selectedReport.id ? { ...report, status: newStatus } : report\r\n                    )\r\n                );\r\n            } else {\r\n                alert(\"🚨 유저 상태 변경 실패\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"🚨 유저 상태 변경 실패:\", error);\r\n            alert(\"🚨 유저 상태 변경에 실패했습니다.\");\r\n        }\r\n    };\r\n\r\n    // ✅ 상태 색상 적용\r\n    const getStatusClass = (status) => {\r\n        if (status === \"BANNED\") return \"banned-report\";\r\n        if (status === \"UNBANNED\" || status === \"사유 불충분\") return \"resolved-report\";\r\n        return \"pending-report\";\r\n    };\r\n\r\n    // ✅ 현재 페이지의 신고 목록만 필터링\r\n    const indexOfLastReport = currentPage * reportsPerPage;\r\n    const currentReports = userReports.slice(indexOfLastReport - reportsPerPage, indexOfLastReport);\r\n    const totalPages = Math.ceil(userReports.length / reportsPerPage);\r\n\r\n    return (\r\n        <div className=\"report-management\">\r\n            <h2>🚨 신고 관리</h2>\r\n\r\n            <div className=\"report-container\">\r\n                <div className=\"report-list\">\r\n                    <h3>📋 신고된 사용자 목록</h3>\r\n                    <ul>\r\n                        {currentReports.map((report) => (\r\n                            <li key={report.id}\r\n                                className={`report-item ${getStatusClass(report.status)} \r\n                                    ${selectedReport?.id === report.id ? \"selected\" : \"\"}`}\r\n                                onClick={() => selectReport(report.id)}\r\n                            >\r\n                                <span className=\"report-user\">\r\n                                    {report.reportedUserNickname || \"알 수 없음\"} \r\n                                    (신고자: {report.reporterNickname || \"알 수 없음\"})\r\n                                </span> \r\n                                <span className=\"report-date\">\r\n                                    (신고일: {new Date(report.reportedAt).toLocaleDateString()} )\r\n                                </span>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n\r\n                    {/* ✅ 페이지네이션 */}\r\n                    <div className=\"pagination\">\r\n                        <button onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))} disabled={currentPage === 1}>◀</button>\r\n                        {[...Array(totalPages)].map((_, i) => (\r\n                            <button \r\n                                key={i} \r\n                                onClick={() => setCurrentPage(i + 1)} \r\n                                className={currentPage === i + 1 ? \"active\" : \"\"}\r\n                            >\r\n                                {i + 1}\r\n                            </button>\r\n                        ))}\r\n                        <button onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))} disabled={currentPage === totalPages}>▶</button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"report-detail\">\r\n                    {selectedReport ? (\r\n                        <>\r\n                            <div className=\"report-details\">\r\n                                <h2>🚨 신고 내용</h2>\r\n                                <p><strong>신고자:</strong> {selectedReport.reporterNickname}</p>\r\n                                <p><strong>신고 대상:</strong> {selectedReport.reportedUserNickname}</p>\r\n                                <p><strong>사유:</strong> {selectedReport.reason}</p>\r\n                                <p><strong>신고 날짜:</strong> {new Date(selectedReport.reportedAt).toLocaleString()}</p>\r\n                                <p><strong>상태:</strong> {selectedReport.status}</p>\r\n                            </div>\r\n\r\n                            {selectedReport.postTitle ? (\r\n                                <div className=\"post-info\">\r\n                                    <h3>📌 신고된 게시글</h3>\r\n                                    <p><strong>제목:</strong> {selectedReport.postTitle || \"제목 없음\"}</p>\r\n                                    <p><strong>내용:</strong> {selectedReport.postDescription || \"내용 없음\"}</p>\r\n                                </div>\r\n                            ) : (\r\n                                <p>🚨 신고된 게시글 정보가 없습니다.</p>\r\n                            )}\r\n\r\n                            <div className=\"report-actions\">\r\n                                <button className=\"ban-button\" onClick={() => handleUpdateStatus(\"BANNED\")}>🚫 유저 정지</button>\r\n                                <button className=\"unban-button\" onClick={() => handleUpdateStatus(\"UNBANNED\")}>✅ 정지 해제</button>\r\n                                <button className=\"insufficient-reason-button\" onClick={() => handleUpdateStatus(\"사유 불충분\")}>❌ 사유 불충분</button>\r\n                            </div>\r\n                        </>\r\n                    ) : (\r\n                        <p>신고된 사용자를 선택해주세요.</p>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ReportManagement;\r\n","import React, { useEffect, useState, Fragment } from \"react\";\r\nimport { Dialog, Transition } from \"@headlessui/react\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport \"../../styles/AdminSupport.css\";\r\n\r\nexport default function AdminSupport() {\r\n  const [inquiries, setInquiries] = useState([]);\r\n  const [selectedInquiry, setSelectedInquiry] = useState(null);\r\n  const [responseText, setResponseText] = useState(\"\");\r\n  const [filter, setFilter] = useState(null);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  // ✅ 문의 목록 불러오기 함수 (외부에서 사용 가능하게 설정)\r\n  const fetchInquiries = async () => {\r\n    try {\r\n      const res = await axiosInstance.get(\"/customersupport/inquiriesAll\", {\r\n        params: { page: 0, size: 10, responded: filter },\r\n      });\r\n      setInquiries(res.data.content);\r\n    } catch (error) {\r\n      console.error(\"문의 목록 불러오기 실패:\", error);\r\n    }\r\n  };\r\n\r\n  // ✅ 처음 마운트될 때 & 필터 변경될 때 실행\r\n  useEffect(() => {\r\n    fetchInquiries();\r\n  }, [filter]);\r\n\r\n  // ✅ 답변 등록\r\n  const handleRespond = async (inquiryId) => {\r\n    try {\r\n      await axiosInstance.post(\r\n        `/customersupport/respond/${inquiryId}`,\r\n        { response: responseText },\r\n        { headers: { \"Content-Type\": \"application/json\" } }\r\n      );\r\n\r\n      setResponseText(\"\");\r\n      setIsOpen(false);\r\n      setSelectedInquiry(null);\r\n      fetchInquiries(); // ✅ 문의 목록 새로고침\r\n    } catch (error) {\r\n      console.error(\"응답 등록 실패:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-support\">\r\n      <h1 className=\"title\">📞 고객 지원 관리</h1>\r\n\r\n      {/* ✅ 필터 버튼 */}\r\n      <div className=\"support-controls\">\r\n        {[\"전체\", \"미답변\", \"답변 완료\"].map((label, idx) => (\r\n          <button \r\n            key={idx} \r\n            onClick={() => setFilter(idx === 0 ? null : idx === 1 ? false : true)} \r\n            className={idx === 0 ? \"all-btn\" : idx === 1 ? \"pending-btn\" : \"resolved-btn\"}\r\n          >\r\n            {label}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      {/* ✅ 문의 리스트 테이블 */}\r\n      <div className=\"support-table-wrapper\">\r\n        <table className=\"support-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>문의 내용</th>\r\n              <th>상태</th>\r\n              <th>응답</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {inquiries.length > 0 ? (\r\n              inquiries.map((inquiry) => (\r\n                <tr key={inquiry.id}>\r\n                  <td className=\"question-cell\">{inquiry.question}</td>\r\n                  <td className={inquiry.respondedAt ? \"status-answered\" : \"status-pending\"}>\r\n                    {inquiry.respondedAt ? \"✅ 답변 완료\" : \"❌ 미답변\"}\r\n                  </td>\r\n                  <td>\r\n                    <button\r\n                      onClick={() => {\r\n                        setSelectedInquiry(inquiry);\r\n                        setIsOpen(true);\r\n                      }}\r\n                      className=\"view-btn\"\r\n                    >\r\n                      답변 등록\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))\r\n            ) : (\r\n              <tr>\r\n                <td colSpan=\"3\" className=\"loading-text\">문의 내역이 없습니다.</td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      {/* ✅ 모달 */}\r\n      <Transition appear show={isOpen} as={Fragment}>\r\n        <Dialog as=\"div\" className=\"modal\" onClose={() => setIsOpen(false)}>\r\n          <div className=\"modal-content\">\r\n            <Dialog.Title className=\"modal-title\">문의 상세</Dialog.Title>\r\n            <p className=\"modal-text\">{selectedInquiry?.question || \"데이터 로딩 중...\"}</p>\r\n            {selectedInquiry?.respondedAt ? (\r\n              <p className=\"text-green-500\">✅ 이미 답변 완료</p>\r\n            ) : (\r\n              <>\r\n                <textarea\r\n                  name=\"responseText\"\r\n                  className=\"response-textarea\"\r\n                  value={responseText}\r\n                  onChange={(e) => setResponseText(e.target.value)}\r\n                  placeholder=\"답변을 입력하세요\"\r\n                />\r\n                <button onClick={() => handleRespond(selectedInquiry.id)} className=\"submit-btn\">\r\n                  답변 등록\r\n                </button>\r\n              </>\r\n            )}\r\n            <button onClick={() => setIsOpen(false)} className=\"close-btn\">닫기</button>\r\n          </div>\r\n        </Dialog>\r\n      </Transition>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Header from \"../components/common/Header\";\r\nimport \"../styles/AdminPage.css\";\r\nimport AdminDashboard from \"../components/admin/AdminDashboard\";\r\nimport UserManagement from \"../components/admin/UserManagement\";\r\nimport ReportManagement from \"../components/admin/ReportManagement\";\r\nimport AdminSupport from \"../components/admin/AdminSupport\";\r\n\r\nconst AdminPage = () => {\r\n    const [activeSection, setActiveSection] = useState(\"dashboard\");\r\n\r\n    const menuItems = [\r\n        { id: \"dashboard\", label: \"📊 대시보드\" },\r\n        { id: \"users\", label: \"👤 사용자 관리\" },\r\n        { id: \"report\", label: \"🚨 신고 관리\" },\r\n        { id: \"support\", label: \"📞 고객 지원\" }\r\n    ];\r\n\r\n    const sections = {\r\n        dashboard: <AdminDashboard setActiveSection={setActiveSection} />,\r\n        users: <UserManagement />,\r\n        report: <ReportManagement />,\r\n        support: <AdminSupport />,\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <div className=\"admin-container\">\r\n                <aside className=\"sidebar\">\r\n                    <h2>관리자 메뉴</h2>\r\n                    <ul>\r\n                        {menuItems.map(({ id, label }) => (\r\n                            <li\r\n                                key={id}\r\n                                className={activeSection === id ? \"active\" : \"\"}\r\n                                onClick={() => setActiveSection(id)}\r\n                            >\r\n                                {label}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </aside>\r\n                <main className=\"content\">{sections[activeSection] || sections.dashboard}</main>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminPage;\r\n"],"names":["Chart","register","registerables","ChartDataLabels","DashboardSection","_ref3","title","icon","items","type","_jsxs","className","children","_jsx","length","map","_ref4","id","playlistId","nickname","regdate","playlistTitle","playlistDate","formatDate","DashboardAlerts","_ref5","setActiveSection","reportCount","inquiryCount","FaBell","onClick","date","Date","toISOString","split","_ref","labels","Array","from","_","i","setDate","getDate","getMonth","weeklyNewUsers","setWeeklyNewUsers","useState","fill","totalUsers","setTotalUsers","recentUsers","setRecentUsers","weeklyPlaylists","setWeeklyPlaylists","totalPlaylists","setTotalPlaylists","recentPlaylists","setRecentPlaylists","setReportCount","setInquiryCount","useEffect","async","usersRes","totalUsersRes","recentUsersRes","playlistsRes","totalPlaylistsRes","recentPlaylistsRes","reportCountRes","inquiriesRes","Promise","all","axiosInstance","get","data","error","console","fetchData","todayNewUsers","todayNewPlaylists","stats","label","value","FaUser","chartData","todayCount","color","FaMusic","_ref2","index","style","borderLeft","Line","datasets","borderColor","backgroundColor","tension","options","layout","padding","top","plugins","display","text","font","size","bottom","legend","tooltip","enabled","datalabels","weight","anchor","align","offset","UserManagement","users","setUsers","searchTerm","setSearchTerm","sortBy","setSortBy","selectedUser","setSelectedUser","loading","setLoading","currentPage","setCurrentPage","fetchUsers","params","search","sort","indexOfLastUser","currentUsers","slice","totalPages","Math","ceil","placeholder","onChange","e","target","colSpan","user","isActive","active","email","window","confirm","put","userId","alert","handleToggleUserStatus","delete","handleDeleteUser","prev","max","disabled","min","ReportManagement","userReports","setUserReports","selectedReport","setSelectedReport","fetchReports","then","response","log","catch","handleUpdateStatus","newStatus","status","headers","prevReports","report","indexOfLastReport","currentReports","reportId","find","r","selectReport","reportedUserNickname","reporterNickname","reportedAt","toLocaleDateString","_Fragment","reason","toLocaleString","postTitle","postDescription","AdminSupport","inquiries","setInquiries","selectedInquiry","setSelectedInquiry","responseText","setResponseText","filter","setFilter","isOpen","setIsOpen","fetchInquiries","res","page","responded","content","idx","inquiry","question","respondedAt","Transition","appear","show","as","Fragment","Dialog","onClose","Title","name","post","inquiryId","handleRespond","AdminPage","activeSection","sections","dashboard","AdminDashboard","support","Header"],"sourceRoot":""}