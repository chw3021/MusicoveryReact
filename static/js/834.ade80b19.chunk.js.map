{"version":3,"file":"static/js/834.ade80b19.chunk.js","mappings":"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","sources":["components/music/MusicSearch.js","components/music/Music.js","components/music/spotifyPlayer.js","hooks/useMusicSearch.js","utils/util.js","components/playlist/Create.js","components/recommendations/KeywordRecommendation.js","components/recommendations/AIRecommendations.js","components/recommendations/SurpriseRecommendation.js","pages/PlaylistCreatePage.js","utils/imageUtils.js","components/common/Button.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../../styles/MusicSearch.css\";\r\nimport Music from \"./Music\";\r\nimport useMusicSearch from \"../../hooks/useMusicSearch\";\r\n\r\nconst MusicSearch = ({ onSelectTrack }) => {\r\n    const {\r\n        keyword,\r\n        setKeyword,\r\n        results,\r\n        handleSearch,\r\n        isPremium,\r\n    } = useMusicSearch();\r\n\r\n    const [hasSearched, setHasSearched] = useState(false); // 검색 실행 여부 상태 추가\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        handleSearch();\r\n        setHasSearched(true); // 검색 실행 후 상태 업데이트\r\n    };\r\n\r\n    return (\r\n        <div className=\"music-search\">\r\n            {isPremium}\r\n            <form onSubmit={handleSubmit}> {/* 폼 제출 핸들러 변경 */}\r\n                <input\r\n                    className=\"music-search-input\"\r\n                    type=\"text\"\r\n                    value={keyword}\r\n                    onChange={(e) => setKeyword(e.target.value)}\r\n                    placeholder=\"음악 검색\"\r\n                />\r\n                <button type=\"submit\">🔎</button>\r\n            </form>\r\n            <div className=\"music-search-results\">\r\n                {!hasSearched && results.length === 0 ? ( // 검색 실행 여부와 결과 유무에 따라 조건부 렌더링\r\n                    <div className=\"music-search-placeholder\">검색어 입력...</div>\r\n                ) : (\r\n                    results.map((track, index) => (\r\n                        <div key={track.id} onClick={() => onSelectTrack(track)}>\r\n                            <Music \r\n                                track={track}\r\n                                isPremium={isPremium} \r\n                            />\r\n                        </div>\r\n                    ))\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MusicSearch;","import React, { useState, useRef, useCallback, useContext } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport \"../../styles/Music.css\";\r\nimport useUserInfo from \"../../hooks/useUserInfo\";\r\nimport { getImageUrl } from \"../../utils/imageUtils\";\r\nimport { TrackContext } from '../../context/TrackContext';\r\n\r\n// PlaylistItem 컴포넌트 분리 및 메모이제이션\r\nconst PlaylistItem = React.memo(({ playlist, isChecked, onCheck }) => (\r\n    <div className=\"playlist-modal-item\">\r\n        <input\r\n            type=\"checkbox\"\r\n            id={`playlist-${playlist.playlistId}`}\r\n            checked={isChecked}\r\n            onChange={() => onCheck(playlist.playlistId)}\r\n        />\r\n        <label htmlFor={`playlist-${playlist.playlistId}`} className=\"playlist-modal-label\">\r\n            <div className=\"playlist-modal-image-container\">\r\n                <img \r\n                    src={getImageUrl(playlist.playlistPhoto)} \r\n                    alt={playlist.playlistTitle} \r\n                    className=\"playlist-modal-image\" \r\n                />\r\n            </div>\r\n            <span className=\"playlist-modal-name\">{playlist.playlistTitle}</span>\r\n        </label>\r\n    </div>\r\n));\r\n\r\n// PlaylistModal 컴포넌트 분리 및 메모이제이션\r\nconst PlaylistModal = React.memo(({ playlists, selectedPlaylists, loading, onCheck, onClose, onAdd }) => (\r\n    <div className=\"playlist-modal-overlay\" onClick={onClose}>\r\n        <div className=\"playlist-modal\" onClick={(e) => e.stopPropagation()}>\r\n            <div className=\"playlist-modal-header\">\r\n                <h3>플레이리스트에 추가</h3>\r\n                <button className=\"playlist-modal-close\" onClick={onClose}>&times;</button>\r\n            </div>\r\n            <div className=\"playlist-modal-body\">\r\n                {loading ? (\r\n                    <p>플레이리스트를 불러오는 중...</p>\r\n                ) : playlists.length === 0 ? (\r\n                    <p>사용 가능한 플레이리스트가 없습니다.</p>\r\n                ) : (\r\n                    <div className=\"playlist-modal-list\">\r\n                        {playlists.map(playlist => (\r\n                            <PlaylistItem\r\n                                key={playlist.playlistId}\r\n                                playlist={playlist}\r\n                                isChecked={selectedPlaylists.includes(playlist.playlistId)}\r\n                                onCheck={onCheck}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <div className=\"playlist-modal-footer\">\r\n                <button \r\n                    className=\"add-to-playlist-button\" \r\n                    onClick={onAdd}\r\n                    disabled={selectedPlaylists.length === 0 || loading}\r\n                >\r\n                    플레이리스트에 추가\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n));\r\n\r\nconst Music = ({ track, isPremium }) => {\r\n    const [tooltipStyle, setTooltipStyle] = useState({});\r\n    const [showPlaylistModal, setShowPlaylistModal] = useState(false);\r\n    const [playlists, setPlaylists] = useState([]);\r\n    const [selectedPlaylists, setSelectedPlaylists] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const { addTrackToList, setIsPlaying, deviceReady } = useContext(TrackContext);\r\n    \r\n    const playlistsLoadedRef = useRef(false);\r\n    const userInfo = useUserInfo();\r\n    \r\n    const handleMouseEnter = (e) => {\r\n        const rect = e.currentTarget.getBoundingClientRect();\r\n        setTooltipStyle({\r\n            top: `${rect.top - 10}px`,\r\n            left: `${rect.left + rect.width / 2}px`,\r\n        });\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setTooltipStyle({});\r\n    };\r\n\r\n    const fetchPlaylists = async (userId) => {\r\n        if (!userId || playlistsLoadedRef.current) return;\r\n        \r\n        setLoading(true);\r\n        try {\r\n            const response = await axiosInstance.get(`/playlist/user/${userId}`);\r\n            setPlaylists(response.data || []);\r\n            playlistsLoadedRef.current = true;\r\n        } catch (error) {\r\n            console.error(\"플레이리스트를 불러오는 데 실패했습니다:\", error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleAddToPlaylist = () => {\r\n        setShowPlaylistModal(true);\r\n        if (userInfo && !playlistsLoadedRef.current) {\r\n            fetchPlaylists(userInfo.userId);\r\n        }\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setShowPlaylistModal(false);\r\n        setSelectedPlaylists([]);\r\n    };\r\n\r\n    const handlePlaylistCheck = useCallback((playlistId) => {\r\n        setSelectedPlaylists(prevSelected => {\r\n            if (prevSelected.includes(playlistId)) {\r\n                return prevSelected.filter(id => id !== playlistId);\r\n            } else {\r\n                return [...prevSelected, playlistId];\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const handleAddTracksToPlaylists = async () => {\r\n        if (selectedPlaylists.length === 0) {\r\n            alert(\"플레이리스트를 선택해주세요.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const promises = selectedPlaylists.map(playlistId => \r\n                axiosInstance.post(`/api/spotify/playlist/${playlistId}/track`, null, {\r\n                    params: { trackId: track.id }\r\n                })\r\n            );\r\n            \r\n            await Promise.all(promises);\r\n            alert(\"선택한 플레이리스트에 트랙이 추가되었습니다.\");\r\n            handleCloseModal();\r\n        } catch (error) {\r\n            console.error(\"플레이리스트에 트랙 추가 실패:\", error);\r\n            alert(\"플레이리스트에 트랙 추가 중 오류가 발생했습니다.\");\r\n        }\r\n    };\r\n\r\n    const handlePlayClick = async (track) => {\r\n        if (isPremium) {\r\n            try {\r\n                addTrackToList(track); // 트랙을 리스트에 추가\r\n                if (deviceReady) {\r\n                    setIsPlaying(true);\r\n                } else {\r\n                    if(!deviceReady){\r\n                        setTimeout(() => {\r\n                            setIsPlaying(true);\r\n                        }, 1000);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error(\"트랙 재생 중 오류:\", error);\r\n                if (error.response?.status === 403) {\r\n                    // 403 오류 발생 시 링크로 이동\r\n                    window.open(track.external_urls.spotify, '_blank');\r\n                    return;\r\n                } else if (error.response?.status === 404) {\r\n                    alert('Spotify 플레이어를 초기화 중입니다. 잠시 후에 다시 시도해주세요.');\r\n                } else {\r\n                    alert('트랙을 재생할 수 없습니다. 다시 시도해주세요.');\r\n                }\r\n            }\r\n        } else {\r\n            window.open(track.external_urls.spotify, '_blank');\r\n        }\r\n    };\r\n\r\n    return (\r\n        // 렌더링 부분은 동일하게 유지\r\n        track && track.album && track.album.images && track.album.images[0] ? (\r\n            <div key={track.id} className=\"track-item\" onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\r\n                <img className=\"track-album-image-music\" src={track.album.images[0].url} alt={track.name} />\r\n                <div className=\"track-info\">\r\n                    <h4>{track.name}</h4>\r\n                    <p>{track.artists.map((artist) => artist.name).join(\", \")}</p>\r\n                    <div className=\"tooltip\" style={tooltipStyle}>\r\n                        <h4>{track.name}</h4>\r\n                        <p>{track.artists.map((artist) => artist.name).join(\", \")}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"track-play-button-container\">\r\n                    <button\r\n                        onClick={() => handlePlayClick(track)}\r\n                        className={isPremium ? \"premium-play\" : \"spotify-link\"}\r\n                    >\r\n                        {isPremium ? \"▶\" : \"LINK\"}\r\n                    </button>\r\n                    <button className=\"add-track-to-playlist-button\" onClick={handleAddToPlaylist}>\r\n                        ➕\r\n                    </button>\r\n                </div>\r\n\r\n                {showPlaylistModal && ReactDOM.createPortal(\r\n                    <PlaylistModal \r\n                        playlists={playlists}\r\n                        selectedPlaylists={selectedPlaylists}\r\n                        loading={loading}\r\n                        onCheck={handlePlaylistCheck}\r\n                        onClose={handleCloseModal}\r\n                        onAdd={handleAddTracksToPlaylists}\r\n                    />,\r\n                    document.body\r\n                )}\r\n            </div>\r\n        ) : null\r\n    );\r\n};\r\n\r\nexport default Music;","import axios from 'axios';\r\n\r\nexport const transferPlayback = async (deviceId) => {\r\n    try {\r\n        const url = 'https://api.spotify.com/v1/me/player';\r\n        await axios.put(\r\n            url,\r\n            {\r\n                device_ids: [deviceId],\r\n                play: true\r\n            },\r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n                }\r\n            }\r\n        );\r\n    } catch (error) {\r\n        console.error('Failed to transfer playback:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const play = async ({ spotify_uri, deviceId, position = 0 }) => {\r\n    try {\r\n        const url = `https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`;\r\n        \r\n        await axios.put(\r\n            url,\r\n            {\r\n                uris: [spotify_uri],\r\n                position_ms: position\r\n            },\r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n                }\r\n            }\r\n        );\r\n    } catch (error) {\r\n        console.error('Failed to play track:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const pause = async () => {\r\n    try {\r\n        await axios.put('https://api.spotify.com/v1/me/player/pause', null, {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error('Failed to pause track:', error);\r\n        throw error;\r\n    }\r\n};","import { useState, useEffect } from \"react\";\r\nimport axiosInstance from \"../api/axiosInstance\";\r\nimport { transferPlayback } from \"../components/music/spotifyPlayer\";\r\n\r\nconst useMusicSearch = () => {\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [results, setResults] = useState([]);\r\n    const [audioPlayer, setAudioPlayer] = useState(new Audio());\r\n    const [isPremium, setIsPremium] = useState(false);\r\n    const [deviceId, setDeviceId] = useState(null);\r\n\r\n    // Premium 상태 확인\r\n    useEffect(() => {\r\n        const checkPremiumStatus = async () => {\r\n            try {\r\n                const response = await axiosInstance.get('/api/spotify/userInfo');\r\n                setIsPremium(response.data.product === 'premium');\r\n            } catch (error) {\r\n                //console.error(\"Failed to check premium status\", error);\r\n            }\r\n        };\r\n        checkPremiumStatus();\r\n    }, []);\r\n\r\n    // 디바이스 ID 설정\r\n    useEffect(() => {\r\n        const fetchDeviceId = async () => {\r\n            try {\r\n                const response = await axiosInstance.get('/music/devices', {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n                    }\r\n                });\r\n                const devices = response.data.devices;\r\n                if (devices.length > 0) {\r\n                    setDeviceId(devices[0].id);\r\n                    // 브라우저를 활성 디바이스로 설정\r\n                    await transferPlayback(devices[0].id);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch devices\", error);\r\n            }\r\n        };\r\n        fetchDeviceId();\r\n    }, []);\r\n\r\n    const handleSearch = async (e) => {\r\n        try {\r\n            const response = await axiosInstance.get(`/api/spotify/search?keyword=${keyword}&type=track`);\r\n            const filteredResults = response.data.tracks.items.filter(\r\n                (track) => track.is_playable\r\n            );\r\n            setResults(filteredResults);\r\n        } catch (error) {\r\n            console.error(\"Failed to search music\", error);\r\n            setResults([]);\r\n        }\r\n    };\r\n\r\n    return {\r\n        keyword,\r\n        setKeyword,\r\n        results,\r\n        handleSearch,\r\n        isPremium,\r\n        deviceId,\r\n    };\r\n};\r\n\r\nexport default useMusicSearch;","\r\nexport const getFormattedDate = (targetDate) =>{\r\n    let year = targetDate.getFullYear();\r\n    let month = targetDate.getMonth()+1;\r\n    let date = targetDate.getDate();\r\n    if(month < 10){\r\n        month = `0${month}`;\r\n    }\r\n    if(date < 10){\r\n        date = `0${date}`;\r\n    }\r\n    return `${year}-${month}-${date}`;\r\n};\r\n\r\n\r\nexport const getMonthRangeByDate = (date) =>{\r\n    const beginTimeStamp = new Date(\r\n        date.getFullYear(),\r\n        date.getMonth(),\r\n        1\r\n    ).getTime();\r\n    const endTimeStamp = new Date(\r\n        date.getFullYear(),\r\n        date.getMonth() +1,\r\n        0,\r\n        23,\r\n        59,\r\n        59\r\n    ).getTime\r\n    return {beginTimeStamp, endTimeStamp};\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getFormattedDate } from \"../../utils/util\";\r\nimport Button from \"../common/Button\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport MusicSearch from \"../music/MusicSearch\"; // MusicSearch 컴포넌트 임포트\r\nimport \"../playlist/Create.css\";\r\nimport Music from \"../music/Music\";\r\nimport axiosInstance from \"../../api/axiosInstance\"; // axiosInstance 임포트\r\nimport useUserInfo from \"../../hooks/useUserInfo\"; // useUserInfo 임포트\r\nimport useMusicSearch from \"../../hooks/useMusicSearch\"; // useMusicSearch 훅 임포트\r\nimport { getDefaultImage } from \"../../utils/imageUtils\";\r\n\r\nconst Create = () => {\r\n    const navigate = useNavigate();\r\n    const userInfo = useUserInfo(); // 사용자 정보 가져오기\r\n    const { handlePlay, isPremium } = useMusicSearch(); // useMusicSearch 훅 사용\r\n    const [state, setState] = useState({\r\n        playlistTitle: '',\r\n        playlistComment: '',\r\n        playlistPhoto: null,\r\n        musicCheckbox: false,\r\n        selectedMusic: '',\r\n        selectedConcept: '',\r\n        playlistDate: getFormattedDate(new Date()),\r\n        selectedTracks: [], // 선택된 트랙 리스트 추가\r\n        user: userInfo, // 사용자 정보 추가\r\n    });\r\n\r\n    // 최대 파일 크기 설정 (예: 5MB)\r\n    const MAX_FILE_SIZE = 5 * 1024 * 1024;\r\n\r\n    // userInfo가 변경될 때마다 상태 업데이트\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n            setState((prevState) => ({\r\n                ...prevState,\r\n                user: userInfo,\r\n            }));\r\n        }\r\n    }, [userInfo]);\r\n\r\n    const handleSubmit = () => {\r\n        if (!state.playlistTitle || !state.playlistComment || !state.playlistDate || state.selectedTracks.length <= 0) {\r\n            alert(\"모든 필드를 입력해주세요.\");\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"playlistTitle\", state.playlistTitle);\r\n        formData.append(\"playlistComment\", state.playlistComment);\r\n        formData.append(\"playlistDate\", state.playlistDate);\r\n        formData.append(\"isPublic\", false);\r\n        formData.append(\"userId\", state.user.userId);\r\n        formData.append(\"tracks\", state.selectedTracks.map(track => track.uri));\r\n        \r\n        if (state.playlistPhoto) {\r\n            formData.append(\"playlistPhoto\", state.playlistPhoto);\r\n        }\r\n        else{\r\n            formData.append(\"playlistPhoto\", getDefaultImage());\r\n        }\r\n\r\n        axiosInstance.post(\"/playlist/create\", formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\",\r\n            },\r\n        })\r\n        .then(response => {\r\n            console.log(\"✅ 플레이리스트 생성 완료:\", response.data);\r\n            navigate(\"/PlaylistPage\");\r\n        })\r\n        .catch(error => {\r\n            console.error(\"❌ 플레이리스트 생성 실패:\", error);\r\n            if (error.response) {\r\n                console.error(\"📌 응답 데이터:\", error.response.data);\r\n                console.error(\"📌 상태 코드:\", error.response.status);\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleChangeDate = (e) => {\r\n        const { name, value, type, checked } = e.target;\r\n        setState((prev) => ({\r\n            ...prev,\r\n            [name]: type === 'checkbox' ? checked : value,\r\n        }));\r\n        setState({\r\n            ...state,\r\n            playlistDate: getFormattedDate(new Date(e.target.value)),\r\n        });\r\n    };\r\n\r\n    const handleChangeContent = (e) => {\r\n        setState({\r\n            ...state,\r\n            playlistComment: e.target.value,\r\n        });\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value, type, checked } = e.target;\r\n        setState((prev) => ({\r\n            ...prev,\r\n            [name]: type === 'checkbox' ? checked : value,\r\n        }));\r\n    };\r\n\r\n    const handleFileChange = (e) => {\r\n        const file = e.target.files[0];\r\n        if (file && file.size > MAX_FILE_SIZE) {\r\n            alert(\"파일 크기가 너무 큽니다. 최대 5MB 이하의 파일을 업로드해주세요.\");\r\n            return;\r\n        }\r\n        setState((prev) => ({\r\n            ...prev,\r\n            playlistPhoto: file,\r\n        }));\r\n    };\r\n\r\n    const handleTrackSelect = (track) => {\r\n        setState((prev) => ({\r\n            ...prev,\r\n            selectedTracks: [...prev.selectedTracks, track],\r\n        }));\r\n    };\r\n\r\n    const removeTrack = (trackId) => {\r\n        setState((prev) => ({\r\n            ...prev,\r\n            selectedTracks: prev.selectedTracks.filter(track => track.id !== trackId),\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <div className=\"create-container\">\r\n            <div className=\"create-layout\">\r\n                <div className=\"create-left\">\r\n                    <MusicSearch onSelectTrack={handleTrackSelect} />\r\n                    <div className=\"playlist-info\">\r\n                        <div className=\"create_section\">\r\n                            <div className=\"grapCreateDate\">\r\n                            <h5 id=\"textCreated\">생성일자 ▶ </h5>\r\n                            <input\r\n                                type=\"date\"\r\n                                value={state.playlistDate}\r\n                                onChange={handleChangeDate}\r\n                                name=\"playlistDate\"\r\n                                id=\"DateClick\"\r\n                            />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"create_title_section\">\r\n                        <h5 id=\"textCreated\">플레이리스트 제목 ▶ </h5>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                name=\"playlistTitle\"\r\n                                value={state.playlistTitle}\r\n                                placeholder=\"제목을 입력하세요...(15자이내)\"\r\n                                onChange={handleChange}\r\n                                maxLength=\"15\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"create_explain_section\">\r\n                        <h5 id=\"textCreated\">플레이리스트 설명 ▶ </h5>\r\n                            <textarea\r\n                                className=\"form-control board-textarea\"\r\n                                rows=\"8\"\r\n                                name=\"playlistComment\"\r\n                                value={state.playlistComment}\r\n                                placeholder=\"플레이리스트 설명을 입력하세요...[300자이내]\"\r\n                                onChange={handleChangeContent}\r\n                                maxLength=\"300\"\r\n                            ></textarea>\r\n                        </div>\r\n                        <div className=\"create_section2\">\r\n                            <div className=\"fileinputBtn\">\r\n                                <input\r\n                                    type=\"file\"\r\n                                    className=\"form-control\"\r\n                                    name=\"playlistPhoto\"\r\n                                    onChange={handleFileChange}\r\n                                    accept=\"image/*\" // 이미지 파일만 허용\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"create-right\">\r\n                    <h5>선택된 트랙 목록</h5>\r\n                    <ul>\r\n                        {state.selectedTracks.map((track, index) => (\r\n                            <li key={index}>\r\n                                <Music track={track} handlePlay={handlePlay} isPremium={isPremium} />\r\n                                <button id=\"deleteBtnColor\" onClick={() => removeTrack(track.id)}>제거</button>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <div className=\"Edit_Btn\">\r\n                <Button text=\"취소\" link={\"/PlaylistPage\"}/>\r\n                <Button text=\"생성하기\" onClick={handleSubmit} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Create;","import React, { useEffect, useState } from \"react\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport { getFormattedDate } from \"../../utils/util\";\r\nimport \"../../styles/KeywordRecommendation.css\";\r\nimport Button from \"../common/Button\";\r\nimport genreSeeds from \"../../assets/genre-seeds.json\"; // 장르 리스트 파일 임포트\r\nimport Music from \"../music/Music\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport useUserInfo from \"../../hooks/useUserInfo\"; // useUserInfo 임포트\r\nimport useMusicSearch from \"../../hooks/useMusicSearch\"; // useMusicSearch 훅 임포트\r\nimport { getDefaultImage } from \"../../utils/imageUtils\";\r\n\r\nconst KeywordRecommendation = () => {\r\n    const navigate = useNavigate();\r\n    const userInfo = useUserInfo(); // 사용자 정보 가져오기\r\n    const { handlePlay, isPremium } = useMusicSearch(); // useMusicSearch 훅 사용\r\n\r\n    const [state, setState] = useState({\r\n        genre: '',\r\n        bpm: '',\r\n        mood: '',\r\n        selectedGenres: [],\r\n        recommendations: [],\r\n        loading: false,\r\n        playlistTitle: '',\r\n        playlistComment: '',\r\n        playlistPhoto: null, // 사진 필드 추가\r\n        playlistDate: getFormattedDate(new Date()),\r\n        showSaveForm: false,\r\n        user: userInfo, // 사용자 정보 추가\r\n        previewURL: null, // 이미지 미리보기 URL\r\n    });\r\n\r\n    const [showBpmInfo, setShowBpmInfo] = useState(false); // BPM 설명 박스 표시 여부 상태\r\n\r\n    // 최대 파일 크기 설정 (예: 5MB)\r\n    const MAX_FILE_SIZE = 5 * 1024 * 1024;\r\n\r\n    // userInfo가 변경될 때마다 상태 업데이트\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n            setState((prevState) => ({\r\n                ...prevState,\r\n                user: userInfo,\r\n            }));\r\n        }\r\n    }, [userInfo]);\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value, type, checked } = e.target;\r\n        setState((prev) => ({\r\n            ...prev,\r\n            [name]: type === 'checkbox' ? checked : value,\r\n        }));\r\n    };\r\n\r\n    const handleFileChange = (e) => {\r\n        const file = e.target.files[0];\r\n        if (file && file.size > MAX_FILE_SIZE) {\r\n          alert(\"파일 크기가 너무 큽니다. 최대 5MB 이하의 파일을 업로드해주세요.\");\r\n          return;\r\n        }\r\n    \r\n        // 파일리더 API를 사용하여 이미지 미리보기 URL 생성\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n          setState((prev) => ({\r\n            ...prev,\r\n            playlistPhoto: file,\r\n            previewURL: reader.result, // 미리보기 URL 설정\r\n          }));\r\n        };\r\n    \r\n        if (file) {\r\n          reader.readAsDataURL(file); // 파일을 Data URL로 읽기\r\n        } else {\r\n          setState((prev) => ({\r\n            ...prev,\r\n            playlistPhoto: null,\r\n            previewURL: null, // 파일 선택 취소 시 미리보기 URL 초기화\r\n          }));\r\n        }\r\n      };\r\n    const handleChangeDate = (e) => {\r\n        setState((prev) => ({\r\n            ...prev,\r\n            playlistDate: e.target.value,\r\n        }));\r\n    };\r\n\r\n    const handleGenreSelect = (e) => {\r\n        const { value } = e.target;\r\n        if (value && !state.selectedGenres.includes(value)) {\r\n            setState((prev) => ({\r\n                ...prev,\r\n                selectedGenres: [...prev.selectedGenres, value],\r\n                genre: '',\r\n            }));\r\n        }\r\n    };\r\n\r\n    const handleGenreRemove = (genre) => {\r\n        setState((prev) => ({\r\n            ...prev,\r\n            selectedGenres: prev.selectedGenres.filter((g) => g !== genre),\r\n        }));\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        if (state.selectedGenres.length <= 0 || !state.bpm || !state.mood) {\r\n            alert(\"모든 필드를 입력해주세요.\");\r\n            return;\r\n        }\r\n\r\n        setState((prev) => ({ ...prev, loading: true }));\r\n        try {\r\n            const response = await axiosInstance.post('/recommendation/keyword', {\r\n                genre: state.selectedGenres.join(','),\r\n                bpm: state.bpm,\r\n                mood: state.mood,\r\n            });\r\n            const parsedRecommendations = response.data.map(item => JSON.parse(item).tracks.items[0]);\r\n            setState((prev) => ({\r\n                ...prev,\r\n                recommendations: parsedRecommendations,\r\n                loading: false,\r\n                showSaveForm: true,\r\n            }));\r\n        } catch (error) {\r\n            console.error(\"추천 요청 실패:\", error);\r\n            setState((prev) => ({ ...prev, loading: false }));\r\n        }\r\n    };\r\n\r\n    const handleSave = () => {\r\n        if (!state.playlistTitle || !state.playlistComment || !state.playlistDate) {\r\n            alert(\"모든 필드를 입력해주세요.\");\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"playlistTitle\", state.playlistTitle);\r\n        formData.append(\"playlistComment\", state.playlistComment);\r\n        formData.append(\"playlistDate\", state.playlistDate);\r\n        formData.append(\"isPublic\", false);\r\n        formData.append(\"userId\", state.user.userId);\r\n        formData.append(\"tracks\", state.recommendations.map(track => track.uri));\r\n        if (state.playlistPhoto) {\r\n            formData.append(\"playlistPhoto\", state.playlistPhoto);\r\n        } else {\r\n            formData.append(\"playlistPhoto\", getDefaultImage());\r\n        }\r\n\r\n        axiosInstance.post(\"/playlist/create\", formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\",\r\n            },\r\n        })\r\n        .then(response => {\r\n            navigate(\"/PlaylistPage\");\r\n        })\r\n        .catch(error => {\r\n            console.error(\"플레이리스트 생성 실패:\", error);\r\n            if (error.response) {\r\n                console.error(\"응답 데이터:\", error.response.data);\r\n                console.error(\"상태 코드:\", error.response.status);\r\n            }\r\n        });\r\n    };\r\n\r\n    const removeTrack = (trackId) => {\r\n        setState((prev) => ({\r\n            ...prev,\r\n            recommendations: prev.recommendations.filter(track => track.id !== trackId),\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <div className=\"keyword-recommendation\">\r\n            <div className=\"keyword-form-container\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"genre\">장르</label>\r\n                    <select\r\n                        name=\"genre\"\r\n                        value={state.genre}\r\n                        onChange={handleGenreSelect}\r\n                        placeholder=\"장르를 선택하세요...\"\r\n                    >\r\n                        <option value=\"\">장르 선택</option>\r\n                        {genreSeeds.genres.map((genre, index) => (\r\n                            <option key={index} value={genre}>\r\n                                {genre}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div className=\"selected-genres\">\r\n                    {state.selectedGenres.map((genre, index) => (\r\n                        <div key={index} className=\"genre-tag\">\r\n                            {genre}\r\n                            <button onClick={() => handleGenreRemove(genre)}>x</button>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"bpm\">BPM\r\n                        <button onClick={() => setShowBpmInfo(!showBpmInfo)}>?</button> {/* 설명 버튼 추가 */}\r\n                    </label>\r\n                    <input\r\n                        type=\"number\"\r\n                        name=\"bpm\"\r\n                        value={state.bpm}\r\n                        onChange={handleChange}\r\n                        className=\"bpm-form-input\"\r\n                        placeholder=\"BPM을 입력하세요...\"\r\n                        min=\"30\"     // 최소값 30\r\n                        max=\"990\"    // 최대값 990\r\n                        step=\"5\"     //5씩 상승\r\n                    />\r\n                    \r\n                </div>\r\n                <div>\r\n                    {showBpmInfo && <div className=\"bpm-info-box\">\r\n                        BPM이란? Beats per minute의 약자로 1분에 비트가 몇 번 반복되는지를 세는 단위이다.<br />\r\n                [ 고르기 쉽게 알려주는 BPM종류! ]<br />\r\n                붐뱁 : 80(160)~100(200)<br />\r\n                트랩 : 4/4박자 기준: 50~80 , 2/ 2박자 기준: 100~160 <br />\r\n                디스코 : 110~130 <br />\r\n                한국 댄스가요: 125 ~ 290+ ,\r\n                일본 댄스가요: 140~170+<br />\r\n                정통 트로트 : 60~90, 세미 트로트 : 90~120, 댄스 트로트: 120~140, 뽕짝 트로트 : 140+<br />\r\n                라틴 팝: 65~110<br />\r\n                유로비트: 145~165<br />\r\n                하우스 및 이로부터 큰 영향을 받은 차트뮤직: 120~134,\r\n                하드 하우스: 130~140<br />\r\n                디트로이트 테크노 이후의 테크노: 130~150<br />\r\n                하드 테크노 및 슈란츠: 145~170+<br />\r\n                앰비언트 테크노: 100~120+<br />\r\n                빅 비트: 90~140<br />\r\n                트랜스 : 130~145<br />\r\n                프로그레시브 트랜스: 130 초 ,더치/업리프팅 : 130~140<br />\r\n                싸이트랜스같이 매니악한 방계장르 : 140 ~ 160+<br />\r\n                덥스텝: 70~140<br />\r\n                드럼스텝 및 하프타임 드럼 앤 베이스: 80~120+<br />\r\n                퓨처 베이스: 70~120<br />\r\n                드럼 앤 베이스 및 정글계열: 160~180+\r\n                올드스쿨 레이브: 130~150<br />\r\n                데스 메탈: 130~350+<br />\r\n                퓨너럴 둠 메탈: 30~100<br />\r\n                하드코어 테크노: 170~200+<br />\r\n                개버류: 180~300+<br />\r\n                프렌치코어: 200~225<br />\r\n                메인스트림 하드코어: 150 ~ 180+<br />\r\n                스피드코어(스플리터코어, 엑스트라톤 포함): 300~999 <br />\r\n                하드스타일: 150~160</div>} {/* 설명 박스 */}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"mood\">분위기</label>\r\n                    <select\r\n                        name=\"mood\"\r\n                        value={state.mood}\r\n                        onChange={handleChange}\r\n                        placeholder=\"분위기를 선택하세요...\"\r\n                    >\r\n                        <option value=\"\">분위기 선택</option>\r\n                        <option value=\"신나는\">신나는</option>\r\n                        <option value=\"행복한\">행복한</option>\r\n                        <option value=\"잔잔한\">잔잔한</option>\r\n                        <option value=\"우울한\">우울한</option>\r\n                    </select>\r\n                </div>\r\n                {state.recommendations.length > 0 && (\r\n                    <div className=\"keyword-recommendations\">\r\n                        <h5>추천된 트랙 목록</h5>\r\n                        <ul>\r\n                            {state.recommendations.map((track, index) => (\r\n                                <li className=\"keyword-recommendations-list-item\" key={index}>\r\n                                    <Music track={track} handlePlay={handlePlay} isPremium={isPremium} />\r\n                                    <button onClick={() => removeTrack(track.id)}>❌</button>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                )}\r\n                <div className=\"form-group-button\">\r\n                    <Button text=\"생성하기\" onClick={handleSubmit} />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"results-container\">\r\n                {state.loading ? (\r\n                    <div>로딩 중...</div>\r\n                ) : (\r\n                    <div>\r\n                        {state.showSaveForm && (\r\n                            <div className=\"playlist-save-form\">\r\n                                <h5>플레이리스트 생성</h5>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"playlistDate\">생성일자 ▶ </label>\r\n                                    <input\r\n                                        type=\"date\"\r\n                                        name=\"playlistDate\"\r\n                                        value={state.playlistDate}\r\n                                        onChange={handleChangeDate}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"playlistPhoto\">대표 사진 ▶ </label>\r\n                                    <input\r\n                                        type=\"file\"\r\n                                        name=\"playlistPhoto\"\r\n                                        onChange={handleFileChange}\r\n                                        accept=\"image/*\" // 이미지 파일만 허용\r\n                                    />\r\n                                    {/* 이미지 미리보기 */}\r\n                                    {state.previewURL && (\r\n                                      <img src={state.previewURL} alt=\"미리보기\" style={{ width: '100px', height: '100px' }} />\r\n                                    )}\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        name=\"playlistTitle\"\r\n                                        value={state.playlistTitle}\r\n                                        onChange={handleChange}\r\n                                        placeholder=\"플레이리스트 제목을 입력하세요...(25자이내)\"\r\n                                         maxLength=\"25\"\r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <textarea\r\n                                        name=\"playlistComment\"\r\n                                        value={state.playlistComment}\r\n                                        onChange={handleChange}\r\n                                        placeholder=\"플레이리스트 설명을 입력하세요...(300자이내)\"\r\n                                        maxLength=\"300\"\r\n                                    ></textarea>\r\n                                </div>\r\n                                <Button text=\"저장하기\" onClick={handleSave} />\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default KeywordRecommendation;","import React, { useEffect, useState } from \"react\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport { getFormattedDate } from \"../../utils/util\";\r\nimport \"../../styles/KeywordRecommendation.css\";\r\nimport Button from \"../common/Button\";\r\nimport Music from \"../music/Music\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport useUserInfo from \"../../hooks/useUserInfo\"; // useUserInfo 임포트\r\nimport useMusicSearch from \"../../hooks/useMusicSearch\"; // useMusicSearch 훅 임포트\r\nimport { getDefaultImage } from \"../../utils/imageUtils\";\r\n\r\nconst AIRecommendations = () => {\r\n    const navigate = useNavigate();\r\n    const userInfo = useUserInfo(); // 사용자 정보 가져오기\r\n    const { handlePlay, isPremium } = useMusicSearch(); // useMusicSearch 훅 사용\r\n\r\n    const [state, setState] = useState({\r\n        recommendations: [],\r\n        loading: false,\r\n        playlistTitle: '',\r\n        playlistComment: '',\r\n        playlistPhoto: null,\r\n        playlistDate: getFormattedDate(new Date()),\r\n        showSaveForm: false,\r\n        user: userInfo,\r\n        aiFailed: false, // AI 추천 실패 여부\r\n        surpriseLoading: false, // 깜짝 추천 로딩 상태\r\n    });\r\n\r\n    // 최대 파일 크기 설정 (예: 5MB)\r\n    const MAX_FILE_SIZE = 5 * 1024 * 1024;\r\n\r\n    // userInfo가 변경될 때마다 상태 업데이트\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n            setState((prevState) => ({\r\n                ...prevState,\r\n                user: userInfo,\r\n            }));\r\n        }\r\n    }, [userInfo]);\r\n\r\n    const handleFileChange = (e) => {\r\n        const file = e.target.files[0];\r\n        if (file && file.size > MAX_FILE_SIZE) {\r\n            alert(\"파일 크기가 너무 큽니다. 최대 5MB 이하의 파일을 업로드해주세요.\");\r\n            return;\r\n        }\r\n        setState((prev) => ({\r\n            ...prev,\r\n            playlistPhoto: file,\r\n        }));\r\n    };\r\n\r\n    const handleChangeDate = (e) => {\r\n        setState((prev) => ({\r\n            ...prev,\r\n            playlistDate: e.target.value,\r\n        }));\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setState((prev) => ({\r\n            ...prev,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        setState((prev) => ({ ...prev, loading: true }));\r\n        try {\r\n            const response = await axiosInstance.get(`/recommendation/ai?userId=${state.user.userId}`);\r\n            console.log(\"추천된 트랙 목록:\", response);\r\n            if (response.status === 204) {\r\n                // AI 추천 실패\r\n                //console.log(\"AI 추천 실패: 서버에서 빈 응답을 받았습니다.\");\r\n                setState((prev) => ({\r\n                    ...prev,\r\n                    loading: false,\r\n                    showSaveForm: false,\r\n                    aiFailed: true, // AI 추천 실패 설정\r\n                }));\r\n                // AI 모델 학습 호출\r\n                trainModel();\r\n                // 깜짝 추천 가져오기\r\n                getSurpriseRecommendations();\r\n            } else {\r\n                const parsedRecommendations = response.data.tracks;\r\n                setState((prev) => ({\r\n                    ...prev,\r\n                    recommendations: parsedRecommendations,\r\n                    loading: false,\r\n                    showSaveForm: true,\r\n                    aiFailed: false, // AI 추천 성공 설정\r\n                }));\r\n            }\r\n        } catch (error) {\r\n            //console.error(\"추천 요청 실패:\", error);\r\n            setState((prev) => ({ ...prev, loading: false, aiFailed: true })); // AI 추천 실패 설정\r\n            // 깜짝 추천 가져오기\r\n            getSurpriseRecommendations();\r\n        }\r\n    };\r\n    const trainModel = async () => {\r\n        try {\r\n            const response = await axiosInstance.post('/recommendation/train');\r\n            console.log(\"AI 모델 학습 결과:\", response.data);\r\n        } catch (error) {\r\n            console.error(\"AI 모델 학습 중 오류 발생:\", error);\r\n        }\r\n    };\r\n\r\n    const getSurpriseRecommendations = async () => {\r\n        setState((prev) => ({ ...prev, surpriseLoading: true }));\r\n        try {\r\n            const response = await axiosInstance.get('/recommendation/surprise');\r\n            const parsedRecommendations = response.data.map(item => JSON.parse(item).tracks.items[0]);\r\n            setState((prev) => ({\r\n                ...prev,\r\n                recommendations: parsedRecommendations,\r\n                surpriseLoading: false,\r\n                showSaveForm: true,\r\n            }));\r\n            console.log(\"깜짝 추천된 트랙 목록:\", parsedRecommendations);\r\n        } catch (error) {\r\n            console.error('깜짝 추천 목록을 가져오는 중 오류 발생:', error);\r\n            setState((prev) => ({ ...prev, surpriseLoading: false }));\r\n        }\r\n    };\r\n\r\n    const handleSave = () => {\r\n        if (!state.playlistTitle || !state.playlistComment || !state.playlistDate) {\r\n            alert(\"모든 필드를 입력해주세요.\");\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"playlistTitle\", state.playlistTitle);\r\n        formData.append(\"playlistComment\", state.playlistComment);\r\n        formData.append(\"playlistDate\", state.playlistDate);\r\n        formData.append(\"isPublic\", false);\r\n        formData.append(\"userId\", state.user.userId);\r\n        formData.append(\"tracks\", state.recommendations.map(track => track.uri));\r\n        if (state.playlistPhoto) {\r\n            formData.append(\"playlistPhoto\", state.playlistPhoto);\r\n        } else {\r\n            formData.append(\"playlistPhoto\", getDefaultImage());\r\n        }\r\n\r\n        axiosInstance.post(\"/playlist/create\", formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\",\r\n            },\r\n        })\r\n        .then(response => {\r\n            console.log(\"✅ 플레이리스트 생성 완료:\", response.data);\r\n            navigate(\"/PlaylistPage\");\r\n        })\r\n        .catch(error => {\r\n            console.error(\"❌ 플레이리스트 생성 실패:\", error);\r\n            if (error.response) {\r\n                console.error(\"📌 응답 데이터:\", error.response.data);\r\n                console.error(\"📌 상태 코드:\", error.response.status);\r\n            }\r\n        });\r\n    };\r\n\r\n    const removeTrack = (trackId) => {\r\n        setState((prev) => ({\r\n            ...prev,\r\n            recommendations: prev.recommendations.filter(track => track.id !== trackId),\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <div className=\"keyword-recommendation\">\r\n            <div className=\"keyword-form-container\">\r\n                <div className=\"form-group2\">\r\n                    <Button text=\"AI 추천 받기\" onClick={handleSubmit} />\r\n                </div>\r\n                {state.aiFailed && (\r\n                    <div className=\"ai-failed\">\r\n                        <p>AI 추천 데이터가 부족합니다.. 깜짝 추천을 대신 제공합니다.</p>\r\n                        {state.surpriseLoading ? (\r\n                            <div>깜짝 추천 로딩 중...</div>\r\n                        ) : null}\r\n                    </div>\r\n                )}\r\n                {state.recommendations.length > 0 && (\r\n                    <div className=\"keyword-recommendations\">\r\n                        <h5>추천된 트랙 목록</h5>\r\n                        <ul>\r\n                            {state.recommendations.map((track, index) => (\r\n                                <li className=\"keyword-recommendations-list-item\" key={index}>\r\n                                    <Music track={track} handlePlay={handlePlay} isPremium={isPremium} />\r\n                                    <button onClick={() => removeTrack(track.id)}>❌</button>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            \r\n            <div className=\"results-container\">\r\n                {state.loading ? (\r\n                    <div>로딩 중...</div>\r\n                ) : (\r\n                    <div>\r\n                        {state.showSaveForm && (\r\n                            <div className=\"playlist-save-form\">\r\n                                <h5>플레이리스트 생성</h5>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"playlistDate\">생성일자 ▶ </label>\r\n                                    <input\r\n                                        type=\"date\"\r\n                                        name=\"playlistDate\"\r\n                                        value={state.playlistDate}\r\n                                        onChange={handleChangeDate}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"playlistPhoto\">대표사진 ▶ </label>\r\n                                    <input\r\n                                        type=\"file\"\r\n                                        name=\"playlistPhoto\"\r\n                                        onChange={handleFileChange}\r\n                                        accept=\"image/*\" // 이미지 파일만 허용\r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        name=\"playlistTitle\"\r\n                                        value={state.playlistTitle}\r\n                                        onChange={handleChange}\r\n                                        placeholder=\"플레이리스트 제목을 입력하세요...(25자이내)\"\r\n                                         maxLength=\"25\"\r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <textarea\r\n                                        name=\"playlistComment\"\r\n                                        value={state.playlistComment}\r\n                                        onChange={handleChange}\r\n                                        placeholder=\"플레이리스트 설명을 입력하세요...(300자이내)\"\r\n                                        maxLength=\"300\"\r\n                                   ></textarea>\r\n                                </div>\r\n                                <Button text=\"저장하기\" onClick={handleSave} />\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AIRecommendations;","import React, { useState, useEffect } from 'react';\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport { getFormattedDate } from \"../../utils/util\";\r\nimport Button from \"../common/Button\";\r\nimport Music from \"../music/Music\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport useUserInfo from \"../../hooks/useUserInfo\";\r\nimport useMusicSearch from \"../../hooks/useMusicSearch\";\r\nimport \"../../styles/KeywordRecommendation.css\";\r\nimport { getDefaultImage } from '../../utils/imageUtils';\r\n\r\nfunction SurpriseRecommendation() {\r\n  const navigate = useNavigate();\r\n  const userInfo = useUserInfo();\r\n  const { handlePlay, isPremium } = useMusicSearch();\r\n\r\n  const [state, setState] = useState({\r\n    recommendations: [],\r\n    loading: false,\r\n    playlistTitle: '',\r\n    playlistComment: '',\r\n    playlistPhoto: null,\r\n    playlistDate: getFormattedDate(new Date()),\r\n    showSaveForm: false,\r\n    user: userInfo,\r\n    previewURL: null, // 이미지 미리보기 URL\r\n  });\r\n\r\n  // 최대 파일 크기 설정 (예: 5MB)\r\n  const MAX_FILE_SIZE = 5 * 1024 * 1024;\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        user: userInfo,\r\n      }));\r\n    }\r\n  }, [userInfo]);\r\n\r\n  const handleFileChange = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file && file.size > MAX_FILE_SIZE) {\r\n      alert(\"파일 크기가 너무 큽니다. 최대 5MB 이하의 파일을 업로드해주세요.\");\r\n      return;\r\n    }\r\n\r\n    // 파일리더 API를 사용하여 이미지 미리보기 URL 생성\r\n    const reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      setState((prev) => ({\r\n        ...prev,\r\n        playlistPhoto: file,\r\n        previewURL: reader.result, // 미리보기 URL 설정\r\n      }));\r\n    };\r\n\r\n    if (file) {\r\n      reader.readAsDataURL(file); // 파일을 Data URL로 읽기\r\n    } else {\r\n      setState((prev) => ({\r\n        ...prev,\r\n        playlistPhoto: null,\r\n        previewURL: null, // 파일 선택 취소 시 미리보기 URL 초기화\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleChangeDate = (e) => {\r\n    setState((prev) => ({\r\n      ...prev,\r\n      playlistDate: e.target.value,\r\n    }));\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setState((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    setState((prev) => ({ ...prev, loading: true }));\r\n    try {\r\n      const response = await axiosInstance.get('/recommendation/surprise'); // 백엔드 API 엔드포인트 변경\r\n      const parsedRecommendations = response.data.map(item => JSON.parse(item).tracks.items[0]);\r\n      setState((prev) => ({\r\n        ...prev,\r\n        recommendations: parsedRecommendations,\r\n        loading: false,\r\n        showSaveForm: true,\r\n      }));\r\n      //console.log(\"추천된 트랙 목록:\", parsedRecommendations);\r\n    } catch (error) {\r\n      console.error('추천 목록을 가져오는 중 오류 발생:', error);\r\n      setState((prev) => ({ ...prev, loading: false }));\r\n    }\r\n  };\r\n\r\n  const handleSave = () => {\r\n    if (!state.playlistTitle || !state.playlistComment || !state.playlistDate) {\r\n      alert(\"모든 필드를 입력해주세요.\");\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"playlistTitle\", state.playlistTitle);\r\n    formData.append(\"playlistComment\", state.playlistComment);\r\n    formData.append(\"playlistDate\", state.playlistDate);\r\n    formData.append(\"isPublic\", false);\r\n    formData.append(\"userId\", state.user.userId);\r\n    formData.append(\"tracks\", state.recommendations.map(track => track.uri));\r\n    if (state.playlistPhoto) {\r\n      formData.append(\"playlistPhoto\", state.playlistPhoto);\r\n    } else {\r\n      formData.append(\"playlistPhoto\",getDefaultImage());\r\n    }\r\n\r\n    axiosInstance.post(\"/playlist/create\", formData, {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    })\r\n      .then(response => {\r\n        //console.log(\"✅ 플레이리스트 생성 완료:\", response.data);\r\n        navigate(\"/PlaylistPage\");\r\n      })\r\n      .catch(error => {\r\n        console.error(\"❌ 플레이리스트 생성 실패:\", error);\r\n        if (error.response) {\r\n          console.error(\"📌 응답 데이터:\", error.response.data);\r\n          console.error(\"📌 상태 코드:\", error.response.status);\r\n        }\r\n      });\r\n  };\r\n\r\n  const removeTrack = (trackId) => {\r\n    setState((prev) => ({\r\n      ...prev,\r\n      recommendations: prev.recommendations.filter(track => track.id !== trackId),\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"keyword-recommendation\">\r\n      <div className=\"keyword-form-container\">\r\n        <div className=\"form-group2\">\r\n          <Button text=\"Surprise 추천 받기\" onClick={handleSubmit} />\r\n        </div>\r\n        {state.recommendations.length > 0 && (\r\n          <div className=\"keyword-recommendations\">\r\n            <h5>추천된 트랙 목록</h5>\r\n            <ul>\r\n              {state.recommendations.map((track, index) => (\r\n                <li className=\"keyword-recommendations-list-item\" key={index}>\r\n                  <Music track={track} handlePlay={handlePlay} isPremium={isPremium} />\r\n                  <button onClick={() => removeTrack(track.id)}>❌</button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"results-container\">\r\n        {state.loading ? (\r\n          <div>로딩 중...</div>\r\n        ) : (\r\n          <div>\r\n            {state.showSaveForm && (\r\n              <div className=\"playlist-save-form\">\r\n                <h5>플레이리스트 생성</h5>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"playlistDate\">생성일자 ▶ </label>\r\n                  <input\r\n                    type=\"date\"\r\n                    name=\"playlistDate\"\r\n                    value={state.playlistDate}\r\n                    onChange={handleChangeDate}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"playlistPhoto\">대표 사진 ▶ </label>\r\n                  <input\r\n                    type=\"file\"\r\n                    name=\"playlistPhoto\"\r\n                    onChange={handleFileChange}\r\n                    accept=\"image/*\" // 이미지 파일만 허용\r\n                  />\r\n                  {/* 이미지 미리보기 */}\r\n                  {state.previewURL && (\r\n                    <img src={state.previewURL} alt=\"미리보기\" style={{ width: '100px', height: '100px' }} />\r\n                  )}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"playlistTitle\"\r\n                    value={state.playlistTitle}\r\n                    onChange={handleChange}\r\n                    placeholder=\"플레이리스트 제목을 입력하세요...(25자이내)\"\r\n                    maxLength=\"25\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <textarea\r\n                    name=\"playlistComment\"\r\n                    value={state.playlistComment}\r\n                    onChange={handleChange}\r\n                    placeholder=\"플레이리스트 설명을 입력하세요...(300자이내)\"\r\n                    maxLength=\"300\"\r\n                  ></textarea>\r\n                </div>\r\n                <Button text=\"저장하기\" onClick={handleSave} />\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SurpriseRecommendation;","import React, { useState } from \"react\";\r\nimport Create from \"../components/playlist/Create\";\r\nimport KeywordRecommendation from \"../components/recommendations/KeywordRecommendation\";\r\nimport Header from \"../components/common/Header\";\r\nimport Button from \"../components/common/Button\";\r\nimport \"../styles/playlistCreatePage.css\";\r\nimport AIRecommendations from \"../components/recommendations/AIRecommendations\";\r\nimport SurpriseRecommendation from \"../components/recommendations/SurpriseRecommendation\";\r\n\r\nconst PlaylistCreatePage = () => {\r\n    const [activeComponent, setActiveComponent] = useState(\"create\");\r\n\r\n    const handleComponentChange = (component) => {\r\n        setActiveComponent(component);\r\n    };\r\n\r\n    return (\r\n        <div className=\"select_section2\">\r\n            <Header />\r\n            <div className=\"select_section\">\r\n                <div className=\"component_switcher\">\r\n                    <Button text=\"직접 만들기\" onClick={() => handleComponentChange(\"create\")} />\r\n                    <Button text=\"자동 생성\" onClick={() => handleComponentChange(\"keywordRecommendation\")} />\r\n                    <Button text=\"AI 생성\" onClick={() => handleComponentChange(\"aiRecommendation\")} />\r\n                    <Button text=\"깜짝 추천\" onClick={() => handleComponentChange(\"surpriseRecommendation\")} />\r\n                </div>\r\n                <div className=\"component_container\">\r\n                    {activeComponent === \"keywordRecommendation\" && <KeywordRecommendation />}\r\n                    {activeComponent === \"aiRecommendation\" && <AIRecommendations />}\r\n                    {activeComponent === \"surpriseRecommendation\" && <SurpriseRecommendation />}\r\n                   <div className=\"component_style\">\r\n                    {activeComponent === \"create\" && <Create />}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PlaylistCreatePage;","const defaultImage = `${process.env.REACT_APP_API_URL}/images/default.png`;\r\n\r\nexport const getImageUrl = (playlistPhoto) => {\r\n    if (!playlistPhoto) {\r\n        return defaultImage;\r\n    }\r\n    return playlistPhoto.startsWith(\"/images/\") \r\n        ? `${process.env.REACT_APP_API_URL}${playlistPhoto}` \r\n        : playlistPhoto;\r\n};\r\n\r\nexport const getDefaultImage = () => {\r\n    return defaultImage;\r\n};","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../../styles/Button.css\";\r\n\r\nconst Button = ({ text, link, color, onClick = () => {} }) => {\r\n\r\n    return (\r\n        <Link to={link}  className={`button ${color ? 'custom-color' : ''}`} onClick={onClick}>\r\n            {text}\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default Button;"],"names":["_ref","onSelectTrack","keyword","setKeyword","results","handleSearch","isPremium","useMusicSearch","hasSearched","setHasSearched","useState","_jsxs","className","children","onSubmit","e","preventDefault","_jsx","type","value","onChange","target","placeholder","length","map","track","index","onClick","Music","id","PlaylistItem","React","playlist","isChecked","onCheck","playlistId","checked","htmlFor","src","getImageUrl","playlistPhoto","alt","playlistTitle","PlaylistModal","_ref2","playlists","selectedPlaylists","loading","onClose","onAdd","stopPropagation","includes","disabled","_ref3","tooltipStyle","setTooltipStyle","showPlaylistModal","setShowPlaylistModal","setPlaylists","setSelectedPlaylists","setLoading","addTrackToList","setIsPlaying","deviceReady","useContext","TrackContext","playlistsLoadedRef","useRef","userInfo","useUserInfo","handleCloseModal","handlePlaylistCheck","useCallback","prevSelected","filter","album","images","onMouseEnter","rect","currentTarget","getBoundingClientRect","top","left","width","onMouseLeave","handleMouseLeave","url","name","artists","artist","join","style","async","setTimeout","error","_error$response","_error$response2","console","response","status","window","open","external_urls","spotify","alert","handlePlayClick","handleAddToPlaylist","current","userId","axiosInstance","get","data","fetchPlaylists","ReactDOM","promises","post","params","trackId","Promise","all","document","body","setResults","audioPlayer","setAudioPlayer","Audio","setIsPremium","deviceId","setDeviceId","useEffect","product","checkPremiumStatus","devices","headers","localStorage","getItem","axios","put","device_ids","play","transferPlayback","fetchDeviceId","filteredResults","tracks","items","is_playable","getFormattedDate","targetDate","year","getFullYear","month","getMonth","date","getDate","Create","navigate","useNavigate","handlePlay","state","setState","playlistComment","musicCheckbox","selectedMusic","selectedConcept","playlistDate","Date","selectedTracks","user","prevState","MusicSearch","prev","maxLength","rows","file","files","size","accept","removeTrack","Button","text","link","handleSubmit","formData","FormData","append","uri","getDefaultImage","then","log","catch","KeywordRecommendation","genre","bpm","mood","selectedGenres","recommendations","showSaveForm","previewURL","showBpmInfo","setShowBpmInfo","handleChange","genreSeeds","g","handleGenreRemove","min","max","step","parsedRecommendations","item","JSON","parse","reader","FileReader","onloadend","result","readAsDataURL","height","handleSave","AIRecommendations","aiFailed","surpriseLoading","trainModel","getSurpriseRecommendations","PlaylistCreatePage","activeComponent","setActiveComponent","handleComponentChange","component","Header","SurpriseRecommendation","defaultImage","startsWith","color","Link","to"],"sourceRoot":""}