{"version":3,"file":"static/js/505.a13e67bd.chunk.js","mappings":"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","sources":["components/music/MusicSearch.js","components/music/Music.js","components/social/ChatRoom.js","components/social/FriendsList.js","components/common/SidebarLayout.js","utils/trackUtils.js","components/music/spotifyPlayer.js","hooks/useMusicSearch.js","utils/imageUtils.js","components/common/Nav.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../../styles/MusicSearch.css\";\r\nimport Music from \"./Music\";\r\nimport useMusicSearch from \"../../hooks/useMusicSearch\";\r\n\r\nconst MusicSearch = ({ onSelectTrack }) => {\r\n    const {\r\n        keyword,\r\n        setKeyword,\r\n        results,\r\n        handleSearch,\r\n        isPremium,\r\n    } = useMusicSearch();\r\n\r\n    const [hasSearched, setHasSearched] = useState(false); // 검색 실행 여부 상태 추가\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        handleSearch();\r\n        setHasSearched(true); // 검색 실행 후 상태 업데이트\r\n    };\r\n\r\n    return (\r\n        <div className=\"music-search\">\r\n            {isPremium}\r\n            <form onSubmit={handleSubmit}> {/* 폼 제출 핸들러 변경 */}\r\n                <input\r\n                    className=\"music-search-input\"\r\n                    type=\"text\"\r\n                    value={keyword}\r\n                    onChange={(e) => setKeyword(e.target.value)}\r\n                    placeholder=\"음악 검색\"\r\n                />\r\n                <button type=\"submit\">🔎</button>\r\n            </form>\r\n            <div className=\"music-search-results\">\r\n                {!hasSearched && results.length === 0 ? ( // 검색 실행 여부와 결과 유무에 따라 조건부 렌더링\r\n                    <div className=\"music-search-placeholder\">검색어 입력...</div>\r\n                ) : (\r\n                    results.map((track, index) => (\r\n                        <div key={track.id} onClick={() => onSelectTrack(track)}>\r\n                            <Music \r\n                                track={track}\r\n                                isPremium={isPremium} \r\n                            />\r\n                        </div>\r\n                    ))\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MusicSearch;","import React, { useState, useRef, useCallback, useContext } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport \"../../styles/Music.css\";\r\nimport useUserInfo from \"../../hooks/useUserInfo\";\r\nimport { getImageUrl } from \"../../utils/imageUtils\";\r\nimport { TrackContext } from '../../context/TrackContext';\r\n\r\n// PlaylistItem 컴포넌트 분리 및 메모이제이션\r\nconst PlaylistItem = React.memo(({ playlist, isChecked, onCheck }) => (\r\n    <div className=\"playlist-modal-item\">\r\n        <input\r\n            type=\"checkbox\"\r\n            id={`playlist-${playlist.playlistId}`}\r\n            checked={isChecked}\r\n            onChange={() => onCheck(playlist.playlistId)}\r\n        />\r\n        <label htmlFor={`playlist-${playlist.playlistId}`} className=\"playlist-modal-label\">\r\n            <div className=\"playlist-modal-image-container\">\r\n                <img \r\n                    src={getImageUrl(playlist.playlistPhoto)} \r\n                    alt={playlist.playlistTitle} \r\n                    className=\"playlist-modal-image\" \r\n                />\r\n            </div>\r\n            <span className=\"playlist-modal-name\">{playlist.playlistTitle}</span>\r\n        </label>\r\n    </div>\r\n));\r\n\r\n// PlaylistModal 컴포넌트 분리 및 메모이제이션\r\nconst PlaylistModal = React.memo(({ playlists, selectedPlaylists, loading, onCheck, onClose, onAdd }) => (\r\n    <div className=\"playlist-modal-overlay\" onClick={onClose}>\r\n        <div className=\"playlist-modal\" onClick={(e) => e.stopPropagation()}>\r\n            <div className=\"playlist-modal-header\">\r\n                <h3>플레이리스트에 추가</h3>\r\n                <button className=\"playlist-modal-close\" onClick={onClose}>&times;</button>\r\n            </div>\r\n            <div className=\"playlist-modal-body\">\r\n                {loading ? (\r\n                    <p>플레이리스트를 불러오는 중...</p>\r\n                ) : playlists.length === 0 ? (\r\n                    <p>사용 가능한 플레이리스트가 없습니다.</p>\r\n                ) : (\r\n                    <div className=\"playlist-modal-list\">\r\n                        {playlists.map(playlist => (\r\n                            <PlaylistItem\r\n                                key={playlist.playlistId}\r\n                                playlist={playlist}\r\n                                isChecked={selectedPlaylists.includes(playlist.playlistId)}\r\n                                onCheck={onCheck}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <div className=\"playlist-modal-footer\">\r\n                <button \r\n                    className=\"add-to-playlist-button\" \r\n                    onClick={onAdd}\r\n                    disabled={selectedPlaylists.length === 0 || loading}\r\n                >\r\n                    플레이리스트에 추가\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n));\r\n\r\nconst Music = ({ track, isPremium }) => {\r\n    const [tooltipStyle, setTooltipStyle] = useState({});\r\n    const [showPlaylistModal, setShowPlaylistModal] = useState(false);\r\n    const [playlists, setPlaylists] = useState([]);\r\n    const [selectedPlaylists, setSelectedPlaylists] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const { addTrackToList, setIsPlaying, deviceReady } = useContext(TrackContext);\r\n    \r\n    const playlistsLoadedRef = useRef(false);\r\n    const userInfo = useUserInfo();\r\n    \r\n    const handleMouseEnter = (e) => {\r\n        const rect = e.currentTarget.getBoundingClientRect();\r\n        setTooltipStyle({\r\n            top: `${rect.top - 10}px`,\r\n            left: `${rect.left + rect.width / 2}px`,\r\n        });\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setTooltipStyle({});\r\n    };\r\n\r\n    const fetchPlaylists = async (userId) => {\r\n        if (!userId || playlistsLoadedRef.current) return;\r\n        \r\n        setLoading(true);\r\n        try {\r\n            const response = await axiosInstance.get(`/playlist/user/${userId}`);\r\n            setPlaylists(response.data || []);\r\n            playlistsLoadedRef.current = true;\r\n        } catch (error) {\r\n            console.error(\"플레이리스트를 불러오는 데 실패했습니다:\", error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleAddToPlaylist = () => {\r\n        setShowPlaylistModal(true);\r\n        if (userInfo && !playlistsLoadedRef.current) {\r\n            fetchPlaylists(userInfo.userId);\r\n        }\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setShowPlaylistModal(false);\r\n        setSelectedPlaylists([]);\r\n    };\r\n\r\n    const handlePlaylistCheck = useCallback((playlistId) => {\r\n        setSelectedPlaylists(prevSelected => {\r\n            if (prevSelected.includes(playlistId)) {\r\n                return prevSelected.filter(id => id !== playlistId);\r\n            } else {\r\n                return [...prevSelected, playlistId];\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const handleAddTracksToPlaylists = async () => {\r\n        if (selectedPlaylists.length === 0) {\r\n            alert(\"플레이리스트를 선택해주세요.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const promises = selectedPlaylists.map(playlistId => \r\n                axiosInstance.post(`/api/spotify/playlist/${playlistId}/track`, null, {\r\n                    params: { trackId: track.id }\r\n                })\r\n            );\r\n            \r\n            await Promise.all(promises);\r\n            alert(\"선택한 플레이리스트에 트랙이 추가되었습니다.\");\r\n            handleCloseModal();\r\n        } catch (error) {\r\n            console.error(\"플레이리스트에 트랙 추가 실패:\", error);\r\n            alert(\"플레이리스트에 트랙 추가 중 오류가 발생했습니다.\");\r\n        }\r\n    };\r\n\r\n    const handlePlayClick = async (track) => {\r\n        if (isPremium) {\r\n            try {\r\n                addTrackToList(track); // 트랙을 리스트에 추가\r\n                if (deviceReady) {\r\n                    setIsPlaying(true);\r\n                } else {\r\n                    if(!deviceReady){\r\n                        setTimeout(() => {\r\n                            setIsPlaying(true);\r\n                        }, 1000);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error(\"트랙 재생 중 오류:\", error);\r\n                if (error.response?.status === 403) {\r\n                    // 403 오류 발생 시 링크로 이동\r\n                    window.open(track.external_urls.spotify, '_blank');\r\n                    return;\r\n                } else if (error.response?.status === 404) {\r\n                    alert('Spotify 플레이어를 초기화 중입니다. 잠시 후에 다시 시도해주세요.');\r\n                } else {\r\n                    alert('트랙을 재생할 수 없습니다. 다시 시도해주세요.');\r\n                }\r\n            }\r\n        } else {\r\n            window.open(track.external_urls.spotify, '_blank');\r\n        }\r\n    };\r\n\r\n    return (\r\n        // 렌더링 부분은 동일하게 유지\r\n        track && track.album && track.album.images && track.album.images[0] ? (\r\n            <div key={track.id} className=\"track-item\" onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\r\n                <img className=\"track-album-image-music\" src={track.album.images[0].url} alt={track.name} />\r\n                <div className=\"track-info\">\r\n                    <h4>{track.name}</h4>\r\n                    <p>{track.artists.map((artist) => artist.name).join(\", \")}</p>\r\n                    <div className=\"tooltip\" style={tooltipStyle}>\r\n                        <h4>{track.name}</h4>\r\n                        <p>{track.artists.map((artist) => artist.name).join(\", \")}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"track-play-button-container\">\r\n                    <button\r\n                        onClick={() => handlePlayClick(track)}\r\n                        className={isPremium ? \"premium-play\" : \"spotify-link\"}\r\n                    >\r\n                        {isPremium ? \"▶\" : \"LINK\"}\r\n                    </button>\r\n                    <button className=\"add-track-to-playlist-button\" onClick={handleAddToPlaylist}>\r\n                        ➕\r\n                    </button>\r\n                </div>\r\n\r\n                {showPlaylistModal && ReactDOM.createPortal(\r\n                    <PlaylistModal \r\n                        playlists={playlists}\r\n                        selectedPlaylists={selectedPlaylists}\r\n                        loading={loading}\r\n                        onCheck={handlePlaylistCheck}\r\n                        onClose={handleCloseModal}\r\n                        onAdd={handleAddTracksToPlaylists}\r\n                    />,\r\n                    document.body\r\n                )}\r\n            </div>\r\n        ) : null\r\n    );\r\n};\r\n\r\nexport default Music;","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport Header from \"../common/Header\";\r\nimport Nav from \"../common/Nav\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport SockJS from \"sockjs-client\";\r\nimport { Client } from \"@stomp/stompjs\";\r\nimport \"../../styles/ChatRoom.css\";\r\nimport { parseTracks } from \"../../utils/trackUtils\";\r\nimport Music from \"../music/Music\";\r\nimport { getDefaultImage } from \"../../utils/imageUtils\";\r\nimport SidebarLayout from \"../common/SidebarLayout\";\r\n\r\nconst ChatRoom = () => {\r\n    const { streamId } = useParams();\r\n    const [messages, setMessages] = useState([]);\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n    const [user, setUser] = useState(null);\r\n    const [stream, setStream] = useState(null);\r\n    const [client, setClient] = useState(null);\r\n    const messagesEndRef = useRef(null); // 메시지 끝 참조\r\n    const [playlist, setPlaylist] = useState(null); // 플레이리스트 상태 추가\r\n    const [isOpen, setIsOpen] = useState(false); // 상태 추가\r\n\r\n    const toggleStreamingTracks = () => {\r\n        setIsOpen(!isOpen); // 상태 토글\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchStream = async () => {\r\n            try {\r\n                const response = await axiosInstance.get(`/api/streaming/${streamId}`);\r\n                setStream(response.data);\r\n            } catch (error) {\r\n                console.error(\"스트리밍 정보를 가져오는 데 실패:\", error);\r\n            }\r\n        };\r\n\r\n        // 로그인한 유저 정보 가져오기\r\n        const fetchUser = async () => {\r\n            try {\r\n                const response = await axiosInstance.get(\"/api/spotify/userInfo\");\r\n                setUser(response.data);\r\n            } catch (error) {\r\n                console.error(\"유저 정보를 가져오는 데 실패:\", error);\r\n            }\r\n        };\r\n\r\n        fetchStream();\r\n        fetchUser();\r\n        \r\n        // SockJS를 사용하여 WebSocket 설정\r\n        const socket = new SockJS(`${process.env.REACT_APP_API_URL}/chat`);\r\n        const stompClient = new Client({\r\n            webSocketFactory: () => socket,\r\n            connectHeaders: {\r\n                login: \"user\",\r\n                passcode: \"password\",\r\n            },\r\n            onConnect: () => {\r\n                console.log(\"STOMP 연결 성공\");\r\n                stompClient.subscribe(`/topic/chat/${streamId}`, (message) => {\r\n                    const newMessage = JSON.parse(message.body);\r\n                    setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n                });\r\n            },\r\n            onStompError: (frame) => {\r\n                console.error(\"STOMP 오류:\", frame.headers[\"message\"]);\r\n            },\r\n            onWebSocketError: (error) => {\r\n                console.error(\"WebSocket 오류:\", error);\r\n            },\r\n            debug: (str) => {\r\n                console.log(str);\r\n            },\r\n        });\r\n\r\n        setClient(stompClient);\r\n        stompClient.activate();\r\n\r\n        return () => {\r\n            stompClient.deactivate();\r\n        };\r\n    }, [streamId]);\r\n\r\n    useEffect(() => {\r\n        const fetchPlaylist = async () => {\r\n            if (stream && stream.playlist) {\r\n                try {\r\n                    const response = await axiosInstance.get(`/playlist/detail/${stream.playlist.playlistId}`);\r\n                    const trackList = parseTracks(response.data.tracks);\r\n                    setPlaylist({\r\n                        ...response.data.playlist,\r\n                        tracksData: trackList,\r\n                        playlistPhoto: response.data.playlist.playlistPhoto || getDefaultImage(), // 기본 이미지 설정\r\n                    });\r\n                } catch (error) {\r\n                    console.error(\"Error fetching playlist detail\", error);\r\n                }\r\n            }\r\n        };\r\n\r\n        fetchPlaylist();\r\n    }, [stream]); // stream이 변경될 때마다 호출\r\n\r\n    // 메시지가 업데이트될 때마다 스크롤을 아래로 내리는 효과\r\n    useEffect(() => {\r\n        if (messagesEndRef.current) {\r\n            messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n    }, [messages]); // messages 배열이 변경될 때마다 실행\r\n\r\n    const sendMessage = () => {\r\n        if (!newMessage.trim()) return;\r\n\r\n        const messageData = {\r\n            streamId,\r\n            sender: user ? user.display_name : \"Unknown User\",\r\n            content: newMessage,\r\n            receiver: \"receiver_nickname\",\r\n        };\r\n\r\n        if (client && client.connected) {\r\n            client.publish({\r\n                destination: `/app/chat/${streamId}`,\r\n                body: JSON.stringify(messageData),\r\n            });\r\n            setNewMessage(\"\");\r\n\r\n            // 마지막 메시지를 스트리밍의 마지막 채팅으로 업데이트하는 API 호출 (추가)\r\n            axiosInstance.post(`/api/streaming/${streamId}/lastMessage`, {\r\n                lastMessage: messageData.content,\r\n            })\r\n            .catch(error => console.error(\"마지막 메시지를 저장하는 데 실패:\", error));\r\n        } else {\r\n            console.error(\"STOMP 클라이언트가 연결되어 있지 않습니다.\");\r\n        }\r\n    };\r\n\r\n    const handleKeyDown = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            sendMessage();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <Header />\r\n\r\n            <SidebarLayout>\r\n            <div className=\"social-layout\">\r\n\r\n                <div>\r\n                    <div className=\"chat-wrapper\">\r\n                        <div className=\"exit\">\r\n                            <h2 className=\"chat-title\">\r\n                                {stream ? `${stream.hostUser?.nickname}의 스트리밍` : \"로딩 중...\"}\r\n                                <Link to=\"/social\"><button>나가기</button></Link>\r\n                            </h2>\r\n                        </div>\r\n\r\n                        {playlist ? ( // playlist 상태 사용\r\n                            <div className=\"streaming-playlist-info\">\r\n                                <div className=\"playlist-info-place\">\r\n                                    <p id=\"explain\"><strong>설명:</strong> {playlist.playlistComment || \"설명이 없습니다.\"}</p>\r\n                                    <p><strong>트랙 수:</strong> {playlist.tracksData ? playlist.tracksData.length : 0}곡</p>\r\n                                    <button onClick={toggleStreamingTracks}>\r\n                                        {isOpen ? '접기' : '펼쳐보기'} {/* 버튼 텍스트 변경 */}\r\n                                    </button>\r\n                                    </div> \r\n                                        {isOpen && ( // 조건부 렌더링\r\n                                        <div className=\"content-nav2\">\r\n                                            <div className=\"streaming-tracks\">\r\n                                                {playlist.tracksData.map((track, index) => (\r\n                                                    <Music key={index} track={track} />\r\n                                                ))}\r\n                                            </div>\r\n                                            \r\n                                        </div>\r\n                                       \r\n                                    )}\r\n                                </div>\r\n                        ) : (\r\n                            <p className=\"playlist-info-place\">플레이리스트 정보가 없습니다.</p>\r\n                        )}\r\n                        <div className=\"chat-messages-input-wrapper\">\r\n                            <div className=\"chat-messages\">\r\n                                {messages.length > 0 ? (\r\n                                    messages.map((msg, index) => (\r\n                                        <div\r\n                                            key={index}\r\n                                            className={`chat-message ${msg.sender === (user ? user.display_name : \"Unknown User\") ? 'my-message' : 'other-message'}`}\r\n                                        >\r\n                                            <strong>{msg.sender}:</strong> <span>{msg.content}</span>\r\n                                        </div>\r\n                                    ))\r\n                                ) : (\r\n                                    <div className=\"no-messages\">메시지가 없습니다.</div>\r\n                                )}\r\n                                <div ref={messagesEndRef} /> {/* 메시지 끝 참조 */}\r\n                            </div>\r\n                            <div className=\"chat-input\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={newMessage}\r\n                                    onChange={(e) => setNewMessage(e.target.value)}\r\n                                    onKeyDown={handleKeyDown}\r\n                                    placeholder=\"메시지를 입력하세요...\"\r\n                                />\r\n                                <button onClick={sendMessage}>전송</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Nav />\r\n            </div>\r\n            </SidebarLayout>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport useUserInfo from \"../../hooks/useUserInfo\";\r\nimport \"../../styles/FriendsList.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst FriendsList = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const [friends, setFriends] = useState([]);\r\n    const [friendRequests, setFriendRequests] = useState([]);\r\n    const [pendingRequests, setPendingRequests] = useState([]);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [searchKeyword, setSearchKeyword] = useState(\"\");\r\n    const [searchResults, setSearchResults] = useState([]);\r\n    const [activeTab, setActiveTab] = useState(\"search\"); // 'search', 'pending', 'requests'\r\n    const userInfo = useUserInfo();\r\n\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n            fetchFriends();\r\n            fetchFriendRequests();\r\n            fetchPendingRequests();\r\n        }\r\n    }, [userInfo]);\r\n\r\n    const fetchFriends = async () => {\r\n        try {\r\n            const response = await axiosInstance.get(`/friends/list?userId=${userInfo.id}`);\r\n            setFriends(response.data);\r\n        } catch (error) {\r\n            console.error(\"친구 목록을 가져오는 데 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const fetchFriendRequests = async () => {\r\n        try {\r\n            const response = await axiosInstance.get(`/friends/friendRequests?friendId=${userInfo.id}`);\r\n            setFriendRequests(response.data);\r\n        } catch (error) {\r\n            console.error(\"친구 요청 목록을 가져오는 데 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const fetchPendingRequests = async () => {\r\n        try {\r\n            const response = await axiosInstance.get(`/friends/pendingRequests?userId=${userInfo.id}`);\r\n            setPendingRequests(response.data);\r\n        } catch (error) {\r\n            console.error(\"내가 요청한 친구 목록을 가져오는 데 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const handleSearch = async () => {\r\n        try {\r\n            const response = await axiosInstance.get(`/friends/search?keyword=${searchKeyword}`);\r\n            setSearchResults(response.data);\r\n        } catch (error) {\r\n            console.error(\"사용자 검색에 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const handleAddFriend = async (friendId) => {\r\n        try {\r\n            await axiosInstance.post(\"/friends/add\", { userId: userInfo.id, friendId });\r\n            fetchFriends();\r\n            fetchPendingRequests();\r\n        } catch (error) {\r\n            console.error(\"친구 추가에 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const handleAcceptFriendRequest = async (friendRequestId) => {\r\n        try {\r\n            await axiosInstance.post(\"/friends/accept\", null, { params: { friendRequestId } });\r\n            fetchFriends();\r\n            fetchFriendRequests();\r\n        } catch (error) {\r\n            console.error(\"친구 요청 수락에 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const handleDeleteFriend = async (friendId, event) => {\r\n        event.stopPropagation(); // 이벤트 버블링 막기\r\n        try {\r\n            await axiosInstance.delete(\"/friends/delete\", { params: { userId: userInfo.id, friendId } });\r\n            fetchFriends();\r\n        } catch (error) {\r\n            console.error(\"친구 삭제에 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const isFriendOrRequested = (userId) => {\r\n        return friends.some(friend => friend.friend.id === userId) || \r\n               friendRequests.some(request => request.user.id === userId) ||\r\n               pendingRequests.some(request => request.friend.id === userId);\r\n    };\r\n\r\n    const handleFriendClick = (friend) => {\r\n        navigate(\"/playlistPage\", { state: { friendInfo: friend } });\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"friends-list-container\">\r\n                <h2>친구 목록</h2>\r\n                <button onClick={() => setShowModal(true)} className=\"add-friend-button\">친구 추가</button>\r\n                <div className=\"friends-list\">\r\n                    {friends.map((friend) => (\r\n                        <div key={friend.id} className=\"friend-item\" onClick={() => handleFriendClick(friend.friend.id === userInfo.id ? friend.user : friend.friend)}>\r\n                            <p>\r\n                                <strong>친구 별명 :</strong> {friend.friend.id === userInfo.id ? friend.user.nickname : friend.friend.nickname}\r\n                            </p>\r\n                            <button className=\"friend-delete-button\" onClick={(event) => handleDeleteFriend(friend.friend.id, event)}>❌</button>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {showModal && (\r\n                <div className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        <span className=\"close\" onClick={() => setShowModal(false)}>&times;</span>\r\n                        <div className=\"modal-tabs\">\r\n                            <button \r\n                                className={`modal-tab-button ${activeTab === \"search\" ? \"active\" : \"\"}`}\r\n                                onClick={() => setActiveTab(\"search\")}\r\n                            >\r\n                                친구 검색\r\n                            </button>\r\n                            <button \r\n                                className={`modal-tab-button ${activeTab === \"pending\" ? \"active\" : \"\"}`}\r\n                                onClick={() => setActiveTab(\"pending\")}\r\n                            >\r\n                                요청한 목록\r\n                            </button>\r\n                            <button \r\n                                className={`modal-tab-button ${activeTab === \"requests\" ? \"active\" : \"\"}`}\r\n                                onClick={() => setActiveTab(\"requests\")}\r\n                            >\r\n                                받은 친구 요청\r\n                            </button>\r\n                        </div>\r\n\r\n                        {activeTab === \"search\" && (\r\n                            <div className=\"friendlist-search-tab\">\r\n                                <h2>친구 추가</h2>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"검색 (ID, 이메일, 닉네임)\"\r\n                                    value={searchKeyword}\r\n                                    onChange={(e) => setSearchKeyword(e.target.value)}\r\n                                />\r\n                                <button onClick={handleSearch}>검색</button>\r\n                                <div className=\"search-results\">\r\n                                    {searchResults.map((user) => (\r\n                                        <div key={user.id} className=\"search-result-item\">\r\n                                            <p>\r\n                                                <strong>ID:</strong> {user.id}\r\n                                            </p>\r\n                                            <p>\r\n                                                <strong>이메일:</strong> {user.email}\r\n                                            </p>\r\n                                            <p>\r\n                                                <strong>닉네임:</strong> {user.nickname}\r\n                                            </p>\r\n                                            <button \r\n                                                onClick={() => handleAddFriend(user.id)} \r\n                                                disabled={isFriendOrRequested(user.id)}\r\n                                            >\r\n                                                {isFriendOrRequested(user.id) ? \"요청됨\" : \"친구 추가\"}\r\n                                            </button>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {activeTab === \"pending\" && (\r\n                            <div className=\"friendlist-pending-tab\">\r\n                                <h2>요청한 목록</h2>\r\n                                <div className=\"pending-requests-list\">\r\n                                    {pendingRequests.length === 0 ? (\r\n                                        <p>요청한 목록이 없습니다.</p>\r\n                                    ) : (\r\n                                        pendingRequests.map((request) => (\r\n                                            console.log(request),\r\n                                            <div key={request.id} className=\"pending-request-item\">\r\n                                                <p>\r\n                                                    <strong>요청한 사용자 ID:</strong> {request.friend.nickname}\r\n                                                </p>\r\n                                            </div>\r\n                                        ))\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {activeTab === \"requests\" && (\r\n                            <div className=\"friendlist-requests-tab\">\r\n                                <h2>받은 친구 요청</h2>\r\n                                <div className=\"friend-requests-list\">\r\n                                    {friendRequests.length === 0 ? (\r\n                                        <p>받은 요청이 없습니다.</p>\r\n                                    ) : (\r\n                                        \r\n                                        friendRequests.map((request) => (\r\n                                            console.log(request),\r\n                                            <div key={request.id} className=\"friend-request-item\">\r\n                                                \r\n                                                <p>\r\n                                                    <strong>요청한 사용자:</strong> {request.user.nickname}\r\n                                                    <button className=\"accept-button\" onClick={() => handleAcceptFriendRequest(request.id)}>✅</button>\r\n                                                </p>\r\n                                            </div>\r\n                                        ))\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FriendsList;","import React from \"react\";\r\nimport MusicSearch from \"../music/MusicSearch\";\r\nimport \"../../styles/SidebarLayout.css\";\r\nimport FriendsList from \"../social/FriendsList\";\r\n\r\nconst SidebarLayout = ({ children }) => {\r\n    return (\r\n        <div className=\"sidebar-layout-layout\">\r\n            <div className=\"sidebar-layout-sidebar\">\r\n                <MusicSearch onSelectTrack={()=>{}}/>\r\n                <FriendsList />\r\n            </div>\r\n            <div className=\"sidebar-layout-main-content\">\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SidebarLayout;","/**\r\n * tracks 데이터를 파싱하고 변환하는 함수\r\n * @param {string|object} tracks - tracks 데이터 (문자열 또는 객체)\r\n * @returns {Array} - 변환된 track 리스트\r\n */\r\nexport const parseTracks = (tracks) => {\r\n    // tracks가 문자열이면 JSON으로 파싱\r\n    let parsedTracks = typeof tracks === \"string\" ? JSON.parse(tracks) : tracks;\r\n\r\n    // tracks.items에서 track 정보만 추출\r\n    const trackList = parsedTracks.items.map(item => ({\r\n        id: item.track.id, // track.id 추가\r\n        ...item.track, // track 객체 전체 추가\r\n    }));\r\n\r\n    return trackList;\r\n};","import axios from 'axios';\r\n\r\nexport const transferPlayback = async (deviceId) => {\r\n    try {\r\n        const url = 'https://api.spotify.com/v1/me/player';\r\n        await axios.put(\r\n            url,\r\n            {\r\n                device_ids: [deviceId],\r\n                play: true\r\n            },\r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n                }\r\n            }\r\n        );\r\n    } catch (error) {\r\n        console.error('Failed to transfer playback:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const play = async ({ spotify_uri, deviceId, position = 0 }) => {\r\n    try {\r\n        const url = `https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`;\r\n        \r\n        await axios.put(\r\n            url,\r\n            {\r\n                uris: [spotify_uri],\r\n                position_ms: position\r\n            },\r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n                }\r\n            }\r\n        );\r\n    } catch (error) {\r\n        console.error('Failed to play track:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const pause = async () => {\r\n    try {\r\n        await axios.put('https://api.spotify.com/v1/me/player/pause', null, {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error('Failed to pause track:', error);\r\n        throw error;\r\n    }\r\n};","import { useState, useEffect } from \"react\";\r\nimport axiosInstance from \"../api/axiosInstance\";\r\nimport { transferPlayback } from \"../components/music/spotifyPlayer\";\r\n\r\nconst useMusicSearch = () => {\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [results, setResults] = useState([]);\r\n    const [audioPlayer, setAudioPlayer] = useState(new Audio());\r\n    const [isPremium, setIsPremium] = useState(false);\r\n    const [deviceId, setDeviceId] = useState(null);\r\n\r\n    // Premium 상태 확인\r\n    useEffect(() => {\r\n        const checkPremiumStatus = async () => {\r\n            try {\r\n                const response = await axiosInstance.get('/api/spotify/userInfo');\r\n                setIsPremium(response.data.product === 'premium');\r\n            } catch (error) {\r\n                //console.error(\"Failed to check premium status\", error);\r\n            }\r\n        };\r\n        checkPremiumStatus();\r\n    }, []);\r\n\r\n    // 디바이스 ID 설정\r\n    useEffect(() => {\r\n        const fetchDeviceId = async () => {\r\n            try {\r\n                const response = await axiosInstance.get('/music/devices', {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n                    }\r\n                });\r\n                const devices = response.data.devices;\r\n                if (devices.length > 0) {\r\n                    setDeviceId(devices[0].id);\r\n                    // 브라우저를 활성 디바이스로 설정\r\n                    await transferPlayback(devices[0].id);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch devices\", error);\r\n            }\r\n        };\r\n        fetchDeviceId();\r\n    }, []);\r\n\r\n    const handleSearch = async (e) => {\r\n        try {\r\n            const response = await axiosInstance.get(`/api/spotify/search?keyword=${keyword}&type=track`);\r\n            const filteredResults = response.data.tracks.items.filter(\r\n                (track) => track.is_playable\r\n            );\r\n            setResults(filteredResults);\r\n        } catch (error) {\r\n            console.error(\"Failed to search music\", error);\r\n            setResults([]);\r\n        }\r\n    };\r\n\r\n    return {\r\n        keyword,\r\n        setKeyword,\r\n        results,\r\n        handleSearch,\r\n        isPremium,\r\n        deviceId,\r\n    };\r\n};\r\n\r\nexport default useMusicSearch;","const defaultImage = `${process.env.REACT_APP_API_URL}/images/default.png`;\r\n\r\nexport const getImageUrl = (playlistPhoto) => {\r\n    if (!playlistPhoto) {\r\n        return defaultImage;\r\n    }\r\n    return playlistPhoto.startsWith(\"/images/\") \r\n        ? `${process.env.REACT_APP_API_URL}${playlistPhoto}` \r\n        : playlistPhoto;\r\n};\r\n\r\nexport const getDefaultImage = () => {\r\n    return defaultImage;\r\n};","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../../styles/Nav.css\";\r\n\r\nconst Nav = () => {\r\n    return (\r\n            <aside className=\"social-sidebar\">\r\n                <nav className=\"nav-menu\">\r\n                    <ul>\r\n                        <li><Link to=\"/quiz\">AI가사 퀴즈</Link></li>\r\n                        <li><Link to=\"/songquiz\">노래퀴즈</Link></li>\r\n                        <li><Link to=\"/streaming\">스트리밍</Link></li>\r\n                    </ul>\r\n                </nav>\r\n            </aside>\r\n\r\n    );\r\n};\r\n\r\nexport default Nav;\r\n"],"names":["_ref","onSelectTrack","keyword","setKeyword","results","handleSearch","isPremium","useMusicSearch","hasSearched","setHasSearched","useState","_jsxs","className","children","onSubmit","e","preventDefault","_jsx","type","value","onChange","target","placeholder","length","map","track","index","onClick","Music","id","PlaylistItem","React","playlist","isChecked","onCheck","playlistId","checked","htmlFor","src","getImageUrl","playlistPhoto","alt","playlistTitle","PlaylistModal","_ref2","playlists","selectedPlaylists","loading","onClose","onAdd","stopPropagation","includes","disabled","_ref3","tooltipStyle","setTooltipStyle","showPlaylistModal","setShowPlaylistModal","setPlaylists","setSelectedPlaylists","setLoading","addTrackToList","setIsPlaying","deviceReady","useContext","TrackContext","playlistsLoadedRef","useRef","userInfo","useUserInfo","handleCloseModal","handlePlaylistCheck","useCallback","prevSelected","filter","album","images","onMouseEnter","rect","currentTarget","getBoundingClientRect","top","left","width","onMouseLeave","handleMouseLeave","url","name","artists","artist","join","style","async","setTimeout","error","_error$response","_error$response2","console","response","status","window","open","external_urls","spotify","alert","handlePlayClick","handleAddToPlaylist","current","userId","axiosInstance","get","data","fetchPlaylists","ReactDOM","promises","post","params","trackId","Promise","all","document","body","ChatRoom","_stream$hostUser","streamId","useParams","messages","setMessages","newMessage","setNewMessage","user","setUser","stream","setStream","client","setClient","messagesEndRef","setPlaylist","isOpen","setIsOpen","useEffect","fetchStream","fetchUser","socket","SockJS","stompClient","Client","webSocketFactory","connectHeaders","login","passcode","onConnect","log","subscribe","message","JSON","parse","prevMessages","onStompError","frame","headers","onWebSocketError","debug","str","activate","deactivate","trackList","parseTracks","tracks","tracksData","getDefaultImage","fetchPlaylist","scrollIntoView","behavior","sendMessage","trim","messageData","sender","display_name","content","receiver","connected","publish","destination","stringify","lastMessage","catch","Header","SidebarLayout","hostUser","nickname","Link","to","playlistComment","toggleStreamingTracks","msg","ref","onKeyDown","key","Nav","FriendsList","navigate","useNavigate","friends","setFriends","friendRequests","setFriendRequests","pendingRequests","setPendingRequests","showModal","setShowModal","searchKeyword","setSearchKeyword","searchResults","setSearchResults","activeTab","setActiveTab","fetchFriends","fetchFriendRequests","fetchPendingRequests","isFriendOrRequested","some","friend","request","state","friendInfo","handleFriendClick","event","friendId","delete","handleDeleteFriend","email","handleAddFriend","friendRequestId","handleAcceptFriendRequest","MusicSearch","items","item","setResults","audioPlayer","setAudioPlayer","Audio","setIsPremium","deviceId","setDeviceId","product","checkPremiumStatus","devices","localStorage","getItem","axios","put","device_ids","play","transferPlayback","fetchDeviceId","filteredResults","is_playable","defaultImage","startsWith"],"sourceRoot":""}