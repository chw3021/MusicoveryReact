{"version":3,"file":"static/js/553.bb3ab998.chunk.js","mappings":"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","sources":["components/music/MusicSearch.js","components/social/SongQuiz.js","components/music/Music.js","components/social/FriendsList.js","components/common/SidebarLayout.js","components/music/spotifyPlayer.js","hooks/useMusicSearch.js","utils/imageUtils.js","components/common/Nav.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../../styles/MusicSearch.css\";\r\nimport Music from \"./Music\";\r\nimport useMusicSearch from \"../../hooks/useMusicSearch\";\r\n\r\nconst MusicSearch = ({ onSelectTrack }) => {\r\n    const {\r\n        keyword,\r\n        setKeyword,\r\n        results,\r\n        handleSearch,\r\n        isPremium,\r\n    } = useMusicSearch();\r\n\r\n    const [hasSearched, setHasSearched] = useState(false); // 검색 실행 여부 상태 추가\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        handleSearch();\r\n        setHasSearched(true); // 검색 실행 후 상태 업데이트\r\n    };\r\n\r\n    return (\r\n        <div className=\"music-search\">\r\n            {isPremium}\r\n            <form onSubmit={handleSubmit}> {/* 폼 제출 핸들러 변경 */}\r\n                <input\r\n                    className=\"music-search-input\"\r\n                    type=\"text\"\r\n                    value={keyword}\r\n                    onChange={(e) => setKeyword(e.target.value)}\r\n                    placeholder=\"음악 검색\"\r\n                />\r\n                <button type=\"submit\">🔎</button>\r\n            </form>\r\n            <div className=\"music-search-results\">\r\n                {!hasSearched && results.length === 0 ? ( // 검색 실행 여부와 결과 유무에 따라 조건부 렌더링\r\n                    <div className=\"music-search-placeholder\">검색어 입력...</div>\r\n                ) : (\r\n                    results.map((track, index) => (\r\n                        <div key={track.id} onClick={() => onSelectTrack(track)}>\r\n                            <Music \r\n                                track={track}\r\n                                isPremium={isPremium} \r\n                            />\r\n                        </div>\r\n                    ))\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MusicSearch;","import React, { useState, useEffect } from 'react';\r\nimport SpotifyPlayer from 'react-spotify-web-playback';\r\nimport axiosInstance from '../../api/axiosInstance';\r\nimport '../../styles/SongQuiz.css';\r\nimport Header from '../common/Header';\r\nimport SidebarLayout from '../common/SidebarLayout';\r\nimport Nav from '../common/Nav';\r\n\r\nconst SongQuiz = () => {\r\n    const [artist, setArtist] = useState('');\r\n    const [tracks, setTracks] = useState([]);\r\n    const [currentTrack, setCurrentTrack] = useState(null);\r\n    const [play, setPlay] = useState(false);\r\n    const [hintVisible, setHintVisible] = useState(false);\r\n    const [userAnswer, setUserAnswer] = useState('');\r\n    const accessToken = localStorage.getItem('MUSICOVERY_ACCESS_TOKEN');\r\n    \r\n    const [deviceId, setDeviceId] = useState(null);\r\n    const [isTrackPlaying, setIsTrackPlaying] = useState(false);\r\n\r\n    const [matchedSongs, setMatchedSongs] = useState([]);\r\n\r\n\r\n    // ✅ Web Playback SDK 초기화\r\n    useEffect(() => {\r\n        const script = document.createElement(\"script\");\r\n        script.src = \"https://sdk.scdn.co/spotify-player.js\";\r\n        script.async = true;\r\n        document.body.appendChild(script);\r\n\r\n        window.onSpotifyWebPlaybackSDKReady = () => {\r\n            const player = new window.Spotify.Player({\r\n                name: \"SongQuiz Web Player\",\r\n                getOAuthToken: (cb) => { cb(accessToken); },\r\n                volume: 0.5\r\n            });\r\n            \r\n            player.addListener(\"ready\", ({ device_id }) => {\r\n                console.log(\"✅ Web Playback SDK 활성화됨, Device ID:\", device_id);\r\n                setDeviceId(device_id);\r\n                transferPlayback(device_id); // 디바이스 전환\r\n            });\r\n        \r\n            player.addListener(\"not_ready\", ({ device_id }) => {\r\n                console.log(\"❌ 디바이스 준비 안됨:\", device_id);\r\n            });\r\n        \r\n            player.addListener(\"initialization_error\", ({ message }) => {\r\n                console.error(\"초기화 오류:\", message);\r\n            });\r\n        \r\n            player.addListener(\"authentication_error\", ({ message }) => {\r\n                console.error(\"인증 오류:\", message);\r\n            });\r\n        \r\n            player.connect();\r\n        };\r\n    }, [accessToken]);\r\n\r\n    // ✅ 디바이스 활성화 함수\r\n    const transferPlayback = async (device_id) => {\r\n        try {\r\n            const response = await fetch(\"https://api.spotify.com/v1/me/player\", {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    Authorization: `Bearer ${accessToken}`,\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({\r\n                    device_ids: [device_id],\r\n                    play: false,\r\n                }),\r\n            });\r\n            console.log(`🎧 디바이스 활성화 성공: ${device_id}`);\r\n        } catch (error) {\r\n            console.error(\"🔴 디바이스 활성화 실패:\", error);\r\n        }\r\n    };\r\n\r\n    // ✅ 사용 가능한 Spotify 디바이스 가져오기\r\n    const getAvailableDevices = async () => {\r\n        try {\r\n            const response = await fetch('https://api.spotify.com/v1/me/player/devices', {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}`,\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            });\r\n\r\n            const data = await response.json();\r\n            console.log(\"사용 가능한 디바이스:\", data);\r\n\r\n            const localDevice = data.devices.find(device => device.name.includes(\"Web Player\") || device.is_active);\r\n\r\n            if (localDevice) {\r\n                setDeviceId(localDevice.id);\r\n                console.log(`🎵 사용 중인 디바이스: ${localDevice.name}`);\r\n                transferPlayback(localDevice.id); // ✅ 자동 디바이스 전환 추가\r\n            } else {\r\n                console.error(\"❌ Spotify 디바이스가 없습니다. 웹 플레이어나 데스크톱 앱을 실행하세요.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"디바이스 가져오기 실패:\", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAvailableDevices();\r\n    }, []);\r\n\r\n    // ✅ 트랙 재생 기능\r\n    const playTrackAtPosition = async (position, duration) => {\r\n        if (!currentTrack || !deviceId) {\r\n            console.error(\"❌ 트랙 또는 디바이스 ID 없음\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await fetch(`https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}`,\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    uris: [currentTrack.uri],\r\n                    position_ms: position,\r\n                }),\r\n            });\r\n\r\n            console.log(`🎵 ${position / 1000}초부터 재생 시작!`);\r\n\r\n            // duration(1초 or 3초) 후 자동 정지\r\n            setTimeout(async () => {\r\n                await fetch(`https://api.spotify.com/v1/me/player/pause?device_id=${deviceId}`, {\r\n                    method: \"PUT\",\r\n                    headers: {\r\n                        Authorization: `Bearer ${accessToken}`,\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                });\r\n                console.log(`⏸️ ${duration / 1000}초 후 자동 정지됨!`);\r\n            }, duration);\r\n        } catch (error) {\r\n            console.error(\"🔴 재생 중 오류 발생:\", error);\r\n        }\r\n    };\r\n\r\n    // ✅ 1초 동안 재생\r\n    const playTrack = () => {\r\n        if (isTrackPlaying) return;\r\n        setIsTrackPlaying(true);\r\n        playTrackAtPosition(60000, 1000);  // 1초 동안 재생\r\n        setTimeout(() => setIsTrackPlaying(false), 1000);\r\n\r\n        // 20초 후 힌트 버튼 활성화\r\n        setTimeout(() => setHintVisible(true), 20000);\r\n    };\r\n\r\n    // ✅ 힌트 (3초)\r\n    const playHint = () => {\r\n        playTrackAtPosition(60000, 3000); // 3초 동안 재생\r\n    };\r\n\r\n    const handleArtistSearch = async () => {\r\n        try {\r\n            const response = await axiosInstance.get(`/api/spotify/searchArtist?query=${encodeURIComponent(artist)}`);\r\n            console.log(\"검색 결과:\", response.data);\r\n    \r\n            if (response.data?.tracks?.length > 0) {\r\n                setTracks(response.data.tracks);\r\n                setCurrentTrack(response.data.tracks[0]);\r\n            } else {\r\n                console.log(\"트랙이 없습니다.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"아티스트 검색 실패:\", error);\r\n        }\r\n    };\r\n\r\n    const handleAnswerSubmit = async () => {\r\n        const normalizedInput = userAnswer.trim().toLowerCase();\r\n        const normalizedTitle = currentTrack.name.toLowerCase();\r\n    \r\n        try {\r\n            // 대체 제목을 가져오는 API 호출\r\n            console.log(`/api/sometitle 요청: title=${currentTrack.name}`);\r\n            const response = await axiosInstance.get('/api/sometitle', {\r\n                params: { title: currentTrack.name },\r\n            });\r\n            console.log(`/api/sometitle 응답:`, response.data);\r\n    \r\n            const alternativeTitles = response.data || [];\r\n            const normalizedAlternatives = alternativeTitles.map(title => title.trim().toLowerCase());\r\n    \r\n            // 정답 확인\r\n            if (normalizedInput === normalizedTitle || normalizedAlternatives.includes(normalizedInput)) {\r\n                alert(\"정답입니다! 같은 아티스트의 다른 곡을 맞춰보세요.\");\r\n                setUserAnswer(\"\"); // 입력 초기화\r\n    \r\n                // 맞춘 노래를 matchedSongs에 추가\r\n                setMatchedSongs(prev => [...prev, currentTrack.name]);\r\n    \r\n                // 다음 곡으로 이동\r\n                const nextTrackIndex = tracks.findIndex(track => track.id === currentTrack.id) + 1;\r\n                if (nextTrackIndex < tracks.length) {\r\n                    setCurrentTrack(tracks[nextTrackIndex]);\r\n                    setHintVisible(false);\r\n                } else {\r\n                    console.log(\"🎉 퀴즈 종료\");\r\n                }\r\n            } else {\r\n                alert(\"틀렸습니다. 다시 시도해 보세요.\");\r\n                setUserAnswer(\"\"); // 입력 초기화\r\n            }\r\n        } catch (error) {\r\n            console.error(\"대체 제목을 가져오는 중 오류 발생:\", error);\r\n            alert(\"오류가 발생했습니다. 다시 시도해 주세요.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n    <div className=\"song-quiz-container\">\r\n        <Header />\r\n        <SidebarLayout>\r\n        <div className=\"song-quiz-social-layout\">\r\n            <div className=\"song-quiz\">\r\n                <h1 className=\"song-quiz-title\">1초 듣고 노래 맞추기 Quiz !</h1>\r\n                <h2 className='artistTitle'>1초 동안 나오는 노래를 잘 듣고 <br />\r\n                        노래 제목을 맞춰보세요 !\r\n                </h2>\r\n                <div className=\"artistSelect\">   \r\n                    <h4 className='artistTitle'>아티스트 선택하기 ▶</h4>\r\n                <div className='artistSelectIn'>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"아티스트 이름 입력\"\r\n                    value={artist}\r\n                    className='forBorder'\r\n                    onChange={(e) => setArtist(e.target.value)}\r\n                />\r\n                <button className=\"song-quiz-button\" onClick={handleArtistSearch}>검색</button>\r\n                </div>\r\n                </div>\r\n                {currentTrack && (\r\n                    <div className='SendBtn'>\r\n                        <h4 className='artistTitle'>이 곡의 제목은 ? </h4>\r\n                        <div className=\"resultTool\">\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"정답을 입력하세요\"\r\n                            value={userAnswer}\r\n                            className='forBorder'\r\n                            onChange={(e) => setUserAnswer(e.target.value)}\r\n                        />\r\n                        <button className=\"song-quiz-button\" onClick={handleAnswerSubmit}>정답 제출</button>\r\n                        <button className=\"song-quiz-button\" onClick={playTrack}>재생</button>\r\n                        {hintVisible && <button className=\"song-quiz-button\" onClick={playHint}>힌트</button>}\r\n                    </div>\r\n                    </div>\r\n                )}\r\n                \r\n            </div>\r\n        <Nav />\r\n        </div>\r\n        </SidebarLayout>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default SongQuiz;\r\n","import React, { useState, useRef, useCallback, useContext } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport \"../../styles/Music.css\";\r\nimport useUserInfo from \"../../hooks/useUserInfo\";\r\nimport { getImageUrl } from \"../../utils/imageUtils\";\r\nimport { TrackContext } from '../../context/TrackContext';\r\n\r\n// PlaylistItem 컴포넌트 분리 및 메모이제이션\r\nconst PlaylistItem = React.memo(({ playlist, isChecked, onCheck }) => (\r\n    <div className=\"playlist-modal-item\">\r\n        <input\r\n            type=\"checkbox\"\r\n            id={`playlist-${playlist.playlistId}`}\r\n            checked={isChecked}\r\n            onChange={() => onCheck(playlist.playlistId)}\r\n        />\r\n        <label htmlFor={`playlist-${playlist.playlistId}`} className=\"playlist-modal-label\">\r\n            <div className=\"playlist-modal-image-container\">\r\n                <img \r\n                    src={getImageUrl(playlist.playlistPhoto)} \r\n                    alt={playlist.playlistTitle} \r\n                    className=\"playlist-modal-image\" \r\n                />\r\n            </div>\r\n            <span className=\"playlist-modal-name\">{playlist.playlistTitle}</span>\r\n        </label>\r\n    </div>\r\n));\r\n\r\n// PlaylistModal 컴포넌트 분리 및 메모이제이션\r\nconst PlaylistModal = React.memo(({ playlists, selectedPlaylists, loading, onCheck, onClose, onAdd }) => (\r\n    <div className=\"playlist-modal-overlay\" onClick={onClose}>\r\n        <div className=\"playlist-modal\" onClick={(e) => e.stopPropagation()}>\r\n            <div className=\"playlist-modal-header\">\r\n                <h3>플레이리스트에 추가</h3>\r\n                <button className=\"playlist-modal-close\" onClick={onClose}>&times;</button>\r\n            </div>\r\n            <div className=\"playlist-modal-body\">\r\n                {loading ? (\r\n                    <p>플레이리스트를 불러오는 중...</p>\r\n                ) : playlists.length === 0 ? (\r\n                    <p>사용 가능한 플레이리스트가 없습니다.</p>\r\n                ) : (\r\n                    <div className=\"playlist-modal-list\">\r\n                        {playlists.map(playlist => (\r\n                            <PlaylistItem\r\n                                key={playlist.playlistId}\r\n                                playlist={playlist}\r\n                                isChecked={selectedPlaylists.includes(playlist.playlistId)}\r\n                                onCheck={onCheck}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <div className=\"playlist-modal-footer\">\r\n                <button \r\n                    className=\"add-to-playlist-button\" \r\n                    onClick={onAdd}\r\n                    disabled={selectedPlaylists.length === 0 || loading}\r\n                >\r\n                    플레이리스트에 추가\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n));\r\n\r\nconst Music = ({ track, isPremium }) => {\r\n    const [tooltipStyle, setTooltipStyle] = useState({});\r\n    const [showPlaylistModal, setShowPlaylistModal] = useState(false);\r\n    const [playlists, setPlaylists] = useState([]);\r\n    const [selectedPlaylists, setSelectedPlaylists] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const { addTrackToList, setIsPlaying, deviceReady } = useContext(TrackContext);\r\n    \r\n    const playlistsLoadedRef = useRef(false);\r\n    const userInfo = useUserInfo();\r\n    \r\n    const handleMouseEnter = (e) => {\r\n        const rect = e.currentTarget.getBoundingClientRect();\r\n        setTooltipStyle({\r\n            top: `${rect.top - 10}px`,\r\n            left: `${rect.left + rect.width / 2}px`,\r\n        });\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setTooltipStyle({});\r\n    };\r\n\r\n    const fetchPlaylists = async (userId) => {\r\n        if (!userId || playlistsLoadedRef.current) return;\r\n        \r\n        setLoading(true);\r\n        try {\r\n            const response = await axiosInstance.get(`/playlist/user/${userId}`);\r\n            setPlaylists(response.data || []);\r\n            playlistsLoadedRef.current = true;\r\n        } catch (error) {\r\n            console.error(\"플레이리스트를 불러오는 데 실패했습니다:\", error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleAddToPlaylist = () => {\r\n        setShowPlaylistModal(true);\r\n        if (userInfo && !playlistsLoadedRef.current) {\r\n            fetchPlaylists(userInfo.userId);\r\n        }\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setShowPlaylistModal(false);\r\n        setSelectedPlaylists([]);\r\n    };\r\n\r\n    const handlePlaylistCheck = useCallback((playlistId) => {\r\n        setSelectedPlaylists(prevSelected => {\r\n            if (prevSelected.includes(playlistId)) {\r\n                return prevSelected.filter(id => id !== playlistId);\r\n            } else {\r\n                return [...prevSelected, playlistId];\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const handleAddTracksToPlaylists = async () => {\r\n        if (selectedPlaylists.length === 0) {\r\n            alert(\"플레이리스트를 선택해주세요.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const promises = selectedPlaylists.map(playlistId => \r\n                axiosInstance.post(`/api/spotify/playlist/${playlistId}/track`, null, {\r\n                    params: { trackId: track.id }\r\n                })\r\n            );\r\n            \r\n            await Promise.all(promises);\r\n            alert(\"선택한 플레이리스트에 트랙이 추가되었습니다.\");\r\n            handleCloseModal();\r\n        } catch (error) {\r\n            console.error(\"플레이리스트에 트랙 추가 실패:\", error);\r\n            alert(\"플레이리스트에 트랙 추가 중 오류가 발생했습니다.\");\r\n        }\r\n    };\r\n\r\n    const handlePlayClick = async (track) => {\r\n        if (isPremium) {\r\n            try {\r\n                addTrackToList(track); // 트랙을 리스트에 추가\r\n                if (deviceReady) {\r\n                    setIsPlaying(true);\r\n                } else {\r\n                    if(!deviceReady){\r\n                        setTimeout(() => {\r\n                            setIsPlaying(true);\r\n                        }, 1000);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error(\"트랙 재생 중 오류:\", error);\r\n                if (error.response?.status === 403) {\r\n                    // 403 오류 발생 시 링크로 이동\r\n                    window.open(track.external_urls.spotify, '_blank');\r\n                    return;\r\n                } else if (error.response?.status === 404) {\r\n                    alert('Spotify 플레이어를 초기화 중입니다. 잠시 후에 다시 시도해주세요.');\r\n                } else {\r\n                    alert('트랙을 재생할 수 없습니다. 다시 시도해주세요.');\r\n                }\r\n            }\r\n        } else {\r\n            window.open(track.external_urls.spotify, '_blank');\r\n        }\r\n    };\r\n\r\n    return (\r\n        // 렌더링 부분은 동일하게 유지\r\n        track && track.album && track.album.images && track.album.images[0] ? (\r\n            <div key={track.id} className=\"track-item\" onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\r\n                <img className=\"track-album-image-music\" src={track.album.images[0].url} alt={track.name} />\r\n                <div className=\"track-info\">\r\n                    <h4>{track.name}</h4>\r\n                    <p>{track.artists.map((artist) => artist.name).join(\", \")}</p>\r\n                    <div className=\"tooltip\" style={tooltipStyle}>\r\n                        <h4>{track.name}</h4>\r\n                        <p>{track.artists.map((artist) => artist.name).join(\", \")}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"track-play-button-container\">\r\n                    <button\r\n                        onClick={() => handlePlayClick(track)}\r\n                        className={isPremium ? \"premium-play\" : \"spotify-link\"}\r\n                    >\r\n                        {isPremium ? \"▶\" : \"LINK\"}\r\n                    </button>\r\n                    <button className=\"add-track-to-playlist-button\" onClick={handleAddToPlaylist}>\r\n                        ➕\r\n                    </button>\r\n                </div>\r\n\r\n                {showPlaylistModal && ReactDOM.createPortal(\r\n                    <PlaylistModal \r\n                        playlists={playlists}\r\n                        selectedPlaylists={selectedPlaylists}\r\n                        loading={loading}\r\n                        onCheck={handlePlaylistCheck}\r\n                        onClose={handleCloseModal}\r\n                        onAdd={handleAddTracksToPlaylists}\r\n                    />,\r\n                    document.body\r\n                )}\r\n            </div>\r\n        ) : null\r\n    );\r\n};\r\n\r\nexport default Music;","import React, { useState, useEffect } from \"react\";\r\nimport axiosInstance from \"../../api/axiosInstance\";\r\nimport useUserInfo from \"../../hooks/useUserInfo\";\r\nimport \"../../styles/FriendsList.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst FriendsList = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const [friends, setFriends] = useState([]);\r\n    const [friendRequests, setFriendRequests] = useState([]);\r\n    const [pendingRequests, setPendingRequests] = useState([]);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [searchKeyword, setSearchKeyword] = useState(\"\");\r\n    const [searchResults, setSearchResults] = useState([]);\r\n    const [activeTab, setActiveTab] = useState(\"search\"); // 'search', 'pending', 'requests'\r\n    const userInfo = useUserInfo();\r\n\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n            fetchFriends();\r\n            fetchFriendRequests();\r\n            fetchPendingRequests();\r\n        }\r\n    }, [userInfo]);\r\n\r\n    const fetchFriends = async () => {\r\n        try {\r\n            const response = await axiosInstance.get(`/friends/list?userId=${userInfo.id}`);\r\n            setFriends(response.data);\r\n        } catch (error) {\r\n            console.error(\"친구 목록을 가져오는 데 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const fetchFriendRequests = async () => {\r\n        try {\r\n            const response = await axiosInstance.get(`/friends/friendRequests?friendId=${userInfo.id}`);\r\n            setFriendRequests(response.data);\r\n        } catch (error) {\r\n            console.error(\"친구 요청 목록을 가져오는 데 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const fetchPendingRequests = async () => {\r\n        try {\r\n            const response = await axiosInstance.get(`/friends/pendingRequests?userId=${userInfo.id}`);\r\n            setPendingRequests(response.data);\r\n        } catch (error) {\r\n            console.error(\"내가 요청한 친구 목록을 가져오는 데 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const handleSearch = async () => {\r\n        try {\r\n            const response = await axiosInstance.get(`/friends/search?keyword=${searchKeyword}`);\r\n            setSearchResults(response.data);\r\n        } catch (error) {\r\n            console.error(\"사용자 검색에 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const handleAddFriend = async (friendId) => {\r\n        try {\r\n            await axiosInstance.post(\"/friends/add\", { userId: userInfo.id, friendId });\r\n            fetchFriends();\r\n            fetchPendingRequests();\r\n        } catch (error) {\r\n            console.error(\"친구 추가에 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const handleAcceptFriendRequest = async (friendRequestId) => {\r\n        try {\r\n            await axiosInstance.post(\"/friends/accept\", null, { params: { friendRequestId } });\r\n            fetchFriends();\r\n            fetchFriendRequests();\r\n        } catch (error) {\r\n            console.error(\"친구 요청 수락에 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const handleDeleteFriend = async (friendId, event) => {\r\n        event.stopPropagation(); // 이벤트 버블링 막기\r\n        try {\r\n            await axiosInstance.delete(\"/friends/delete\", { params: { userId: userInfo.id, friendId } });\r\n            fetchFriends();\r\n        } catch (error) {\r\n            console.error(\"친구 삭제에 실패했습니다.\", error);\r\n        }\r\n    };\r\n\r\n    const isFriendOrRequested = (userId) => {\r\n        return friends.some(friend => friend.friend.id === userId) || \r\n               friendRequests.some(request => request.user.id === userId) ||\r\n               pendingRequests.some(request => request.friend.id === userId);\r\n    };\r\n\r\n    const handleFriendClick = (friend) => {\r\n        navigate(\"/playlistPage\", { state: { friendInfo: friend } });\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"friends-list-container\">\r\n                <h2>친구 목록</h2>\r\n                <button onClick={() => setShowModal(true)} className=\"add-friend-button\">친구 추가</button>\r\n                <div className=\"friends-list\">\r\n                    {friends.map((friend) => (\r\n                        <div key={friend.id} className=\"friend-item\" onClick={() => handleFriendClick(friend.friend.id === userInfo.id ? friend.user : friend.friend)}>\r\n                            <p>\r\n                                <strong>친구 별명 :</strong> {friend.friend.id === userInfo.id ? friend.user.nickname : friend.friend.nickname}\r\n                            </p>\r\n                            <button className=\"friend-delete-button\" onClick={(event) => handleDeleteFriend(friend.friend.id, event)}>❌</button>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {showModal && (\r\n                <div className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        <span className=\"close\" onClick={() => setShowModal(false)}>&times;</span>\r\n                        <div className=\"modal-tabs\">\r\n                            <button \r\n                                className={`modal-tab-button ${activeTab === \"search\" ? \"active\" : \"\"}`}\r\n                                onClick={() => setActiveTab(\"search\")}\r\n                            >\r\n                                친구 검색\r\n                            </button>\r\n                            <button \r\n                                className={`modal-tab-button ${activeTab === \"pending\" ? \"active\" : \"\"}`}\r\n                                onClick={() => setActiveTab(\"pending\")}\r\n                            >\r\n                                요청한 목록\r\n                            </button>\r\n                            <button \r\n                                className={`modal-tab-button ${activeTab === \"requests\" ? \"active\" : \"\"}`}\r\n                                onClick={() => setActiveTab(\"requests\")}\r\n                            >\r\n                                받은 친구 요청\r\n                            </button>\r\n                        </div>\r\n\r\n                        {activeTab === \"search\" && (\r\n                            <div className=\"friendlist-search-tab\">\r\n                                <h2>친구 추가</h2>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"검색 (ID, 이메일, 닉네임)\"\r\n                                    value={searchKeyword}\r\n                                    onChange={(e) => setSearchKeyword(e.target.value)}\r\n                                />\r\n                                <button onClick={handleSearch}>검색</button>\r\n                                <div className=\"search-results\">\r\n                                    {searchResults.map((user) => (\r\n                                        <div key={user.id} className=\"search-result-item\">\r\n                                            <p>\r\n                                                <strong>ID:</strong> {user.id}\r\n                                            </p>\r\n                                            <p>\r\n                                                <strong>이메일:</strong> {user.email}\r\n                                            </p>\r\n                                            <p>\r\n                                                <strong>닉네임:</strong> {user.nickname}\r\n                                            </p>\r\n                                            <button \r\n                                                onClick={() => handleAddFriend(user.id)} \r\n                                                disabled={isFriendOrRequested(user.id)}\r\n                                            >\r\n                                                {isFriendOrRequested(user.id) ? \"요청됨\" : \"친구 추가\"}\r\n                                            </button>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {activeTab === \"pending\" && (\r\n                            <div className=\"friendlist-pending-tab\">\r\n                                <h2>요청한 목록</h2>\r\n                                <div className=\"pending-requests-list\">\r\n                                    {pendingRequests.length === 0 ? (\r\n                                        <p>요청한 목록이 없습니다.</p>\r\n                                    ) : (\r\n                                        pendingRequests.map((request) => (\r\n                                            console.log(request),\r\n                                            <div key={request.id} className=\"pending-request-item\">\r\n                                                <p>\r\n                                                    <strong>요청한 사용자 ID:</strong> {request.friend.nickname}\r\n                                                </p>\r\n                                            </div>\r\n                                        ))\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {activeTab === \"requests\" && (\r\n                            <div className=\"friendlist-requests-tab\">\r\n                                <h2>받은 친구 요청</h2>\r\n                                <div className=\"friend-requests-list\">\r\n                                    {friendRequests.length === 0 ? (\r\n                                        <p>받은 요청이 없습니다.</p>\r\n                                    ) : (\r\n                                        \r\n                                        friendRequests.map((request) => (\r\n                                            console.log(request),\r\n                                            <div key={request.id} className=\"friend-request-item\">\r\n                                                \r\n                                                <p>\r\n                                                    <strong>요청한 사용자:</strong> {request.user.nickname}\r\n                                                    <button className=\"accept-button\" onClick={() => handleAcceptFriendRequest(request.id)}>✅</button>\r\n                                                </p>\r\n                                            </div>\r\n                                        ))\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FriendsList;","import React from \"react\";\r\nimport MusicSearch from \"../music/MusicSearch\";\r\nimport \"../../styles/SidebarLayout.css\";\r\nimport FriendsList from \"../social/FriendsList\";\r\n\r\nconst SidebarLayout = ({ children }) => {\r\n    return (\r\n        <div className=\"sidebar-layout-layout\">\r\n            <div className=\"sidebar-layout-sidebar\">\r\n                <MusicSearch onSelectTrack={()=>{}}/>\r\n                <FriendsList />\r\n            </div>\r\n            <div className=\"sidebar-layout-main-content\">\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SidebarLayout;","import axios from 'axios';\r\n\r\nexport const transferPlayback = async (deviceId) => {\r\n    try {\r\n        const url = 'https://api.spotify.com/v1/me/player';\r\n        await axios.put(\r\n            url,\r\n            {\r\n                device_ids: [deviceId],\r\n                play: true\r\n            },\r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n                }\r\n            }\r\n        );\r\n    } catch (error) {\r\n        console.error('Failed to transfer playback:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const play = async ({ spotify_uri, deviceId, position = 0 }) => {\r\n    try {\r\n        const url = `https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`;\r\n        \r\n        await axios.put(\r\n            url,\r\n            {\r\n                uris: [spotify_uri],\r\n                position_ms: position\r\n            },\r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n                }\r\n            }\r\n        );\r\n    } catch (error) {\r\n        console.error('Failed to play track:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const pause = async () => {\r\n    try {\r\n        await axios.put('https://api.spotify.com/v1/me/player/pause', null, {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error('Failed to pause track:', error);\r\n        throw error;\r\n    }\r\n};","import { useState, useEffect } from \"react\";\r\nimport axiosInstance from \"../api/axiosInstance\";\r\nimport { transferPlayback } from \"../components/music/spotifyPlayer\";\r\n\r\nconst useMusicSearch = () => {\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [results, setResults] = useState([]);\r\n    const [audioPlayer, setAudioPlayer] = useState(new Audio());\r\n    const [isPremium, setIsPremium] = useState(false);\r\n    const [deviceId, setDeviceId] = useState(null);\r\n\r\n    // Premium 상태 확인\r\n    useEffect(() => {\r\n        const checkPremiumStatus = async () => {\r\n            try {\r\n                const response = await axiosInstance.get('/api/spotify/userInfo');\r\n                setIsPremium(response.data.product === 'premium');\r\n            } catch (error) {\r\n                //console.error(\"Failed to check premium status\", error);\r\n            }\r\n        };\r\n        checkPremiumStatus();\r\n    }, []);\r\n\r\n    // 디바이스 ID 설정\r\n    useEffect(() => {\r\n        const fetchDeviceId = async () => {\r\n            try {\r\n                const response = await axiosInstance.get('/music/devices', {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${localStorage.getItem('MUSICOVERY_ACCESS_TOKEN')}`\r\n                    }\r\n                });\r\n                const devices = response.data.devices;\r\n                if (devices.length > 0) {\r\n                    setDeviceId(devices[0].id);\r\n                    // 브라우저를 활성 디바이스로 설정\r\n                    await transferPlayback(devices[0].id);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch devices\", error);\r\n            }\r\n        };\r\n        fetchDeviceId();\r\n    }, []);\r\n\r\n    const handleSearch = async (e) => {\r\n        try {\r\n            const response = await axiosInstance.get(`/api/spotify/search?keyword=${keyword}&type=track`);\r\n            const filteredResults = response.data.tracks.items.filter(\r\n                (track) => track.is_playable\r\n            );\r\n            setResults(filteredResults);\r\n        } catch (error) {\r\n            console.error(\"Failed to search music\", error);\r\n            setResults([]);\r\n        }\r\n    };\r\n\r\n    return {\r\n        keyword,\r\n        setKeyword,\r\n        results,\r\n        handleSearch,\r\n        isPremium,\r\n        deviceId,\r\n    };\r\n};\r\n\r\nexport default useMusicSearch;","const defaultImage = `${process.env.REACT_APP_API_URL}/images/default.png`;\r\n\r\nexport const getImageUrl = (playlistPhoto) => {\r\n    if (!playlistPhoto) {\r\n        return defaultImage;\r\n    }\r\n    return playlistPhoto.startsWith(\"/images/\") \r\n        ? `${process.env.REACT_APP_API_URL}${playlistPhoto}` \r\n        : playlistPhoto;\r\n};\r\n\r\nexport const getDefaultImage = () => {\r\n    return defaultImage;\r\n};","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../../styles/Nav.css\";\r\n\r\nconst Nav = () => {\r\n    return (\r\n            <aside className=\"social-sidebar\">\r\n                <nav className=\"nav-menu\">\r\n                    <ul>\r\n                        <li><Link to=\"/quiz\">AI가사 퀴즈</Link></li>\r\n                        <li><Link to=\"/songquiz\">노래퀴즈</Link></li>\r\n                        <li><Link to=\"/streaming\">스트리밍</Link></li>\r\n                    </ul>\r\n                </nav>\r\n            </aside>\r\n\r\n    );\r\n};\r\n\r\nexport default Nav;\r\n"],"names":["_ref","onSelectTrack","keyword","setKeyword","results","handleSearch","isPremium","useMusicSearch","hasSearched","setHasSearched","useState","_jsxs","className","children","onSubmit","e","preventDefault","_jsx","type","value","onChange","target","placeholder","length","map","track","index","onClick","Music","id","SongQuiz","artist","setArtist","tracks","setTracks","currentTrack","setCurrentTrack","play","setPlay","hintVisible","setHintVisible","userAnswer","setUserAnswer","accessToken","localStorage","getItem","deviceId","setDeviceId","isTrackPlaying","setIsTrackPlaying","matchedSongs","setMatchedSongs","useEffect","script","document","createElement","src","async","body","appendChild","window","onSpotifyWebPlaybackSDKReady","player","Spotify","Player","name","getOAuthToken","cb","volume","addListener","device_id","console","log","transferPlayback","_ref2","_ref3","message","error","_ref4","connect","fetch","method","headers","Authorization","JSON","stringify","device_ids","response","data","json","localDevice","devices","find","device","includes","is_active","getAvailableDevices","playTrackAtPosition","position","duration","uris","uri","position_ms","setTimeout","Header","SidebarLayout","_response$data","_response$data$tracks","axiosInstance","get","encodeURIComponent","normalizedInput","trim","toLowerCase","normalizedTitle","params","title","normalizedAlternatives","alert","prev","nextTrackIndex","findIndex","playTrack","playHint","Nav","PlaylistItem","React","playlist","isChecked","onCheck","playlistId","checked","htmlFor","getImageUrl","playlistPhoto","alt","playlistTitle","PlaylistModal","playlists","selectedPlaylists","loading","onClose","onAdd","stopPropagation","disabled","tooltipStyle","setTooltipStyle","showPlaylistModal","setShowPlaylistModal","setPlaylists","setSelectedPlaylists","setLoading","addTrackToList","setIsPlaying","deviceReady","useContext","TrackContext","playlistsLoadedRef","useRef","userInfo","useUserInfo","handleCloseModal","handlePlaylistCheck","useCallback","prevSelected","filter","album","images","onMouseEnter","rect","currentTarget","getBoundingClientRect","top","left","width","onMouseLeave","handleMouseLeave","url","artists","join","style","_error$response","_error$response2","status","open","external_urls","spotify","handlePlayClick","handleAddToPlaylist","current","userId","fetchPlaylists","ReactDOM","promises","post","trackId","Promise","all","FriendsList","navigate","useNavigate","friends","setFriends","friendRequests","setFriendRequests","pendingRequests","setPendingRequests","showModal","setShowModal","searchKeyword","setSearchKeyword","searchResults","setSearchResults","activeTab","setActiveTab","fetchFriends","fetchFriendRequests","fetchPendingRequests","isFriendOrRequested","some","friend","request","user","state","friendInfo","handleFriendClick","nickname","event","friendId","delete","handleDeleteFriend","email","handleAddFriend","friendRequestId","handleAcceptFriendRequest","MusicSearch","setResults","audioPlayer","setAudioPlayer","Audio","setIsPremium","product","checkPremiumStatus","axios","put","fetchDeviceId","filteredResults","items","is_playable","defaultImage","startsWith","getDefaultImage","Link","to"],"sourceRoot":""}